from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth import logout, authenticate, login, get_user_model
from hfu_cms.models import *
from django.http.response import HttpResponse, HttpResponseRedirect, Http404
from django.core.urlresolvers import reverse
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.views.generic import View, FormView
from django.contrib.auth.decorators import user_passes_test
from django.utils.decorators import method_decorator
from django.db.models import Q
from HealthDynamicsCMS.settings import DEFAULT_FROM_EMAIL
from news.models import NewsFeed
from django.template.loader import get_template
from django.core.validators import validate_email
# Validator Exception
from django.core.exceptions import ValidationError
from django.contrib.auth.tokens import default_token_generator
from django.contrib.auth.models import User
from django.utils.encoding import force_bytes
from django.template import loader
from django.views.decorators.http import require_GET, require_POST
from django.core.mail import send_mail
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
import json
import uuid
from check_point import check_doctor, check_organisation, check_organisation_edit, return_doc, \
    check_organisation_complete, check_organisation_for_schedule, check_attached_doctor_in_publish_stage, \
    check_attached_organisation_in_publish_stage, return_lab,return_organisation,check_doctor_global_search
from datetime import datetime
from master_list import day_list, demo_time_list
from underscore import *
import os
from django.shortcuts import redirect
from django.core.urlresolvers import reverse

from providers.models import *
from hfu_cms.models import Labs,Organisation_branches
from news.models import NewsTypeMaster
from .data_publisher import my_send_mail

#hospital_type = ['Allopathy', 'Ayurveda', 'Homeopathy', 'Naturopathy']
hospital_category = ['Private', 'Public', 'Nursing Homes']
imageURL = "hfu_cms/static"


##FOR Localhost CMS
#hostname = 'http://192.168.1.7:'
#port="8094"

##FOR LIVE CMS
#hostname = 'https://stagingapi.healthforu.com'
#port=""
#STATIC_URL_DOMAIN = 'http://cms.healthforu.com/static'

##FOR BETA CMS
hostname = 'https://test.healthforu.com'
port=""
STATIC_URL_DOMAIN = 'http://beta-cms.healthforu.com/static'

baseFolder = "/media/organisation_gallery"
ApiKey = 'AIzaSyBSgwtACK4WPjYKy837g7fgaeYf6JDjxkM' # hfu key
# https://maps.googleapis.com/maps/api/geocode/json?address=Silver+Link,+Station+Road,+ Near+Flyover+Nalasopara+West&key=AIzaSyAFrUEbWeF0Zgt8_9W2vPrwkZuawBDlG0k

#hostname = 'https://api.healthforu.com'
#port=":443"
authToken = "6Le67BQUAAAAAN_zdhvYdXDiVBrdGaVkPwThfgsjghfsjdgfjs"

from .models import Disease,Symptoms
from django.shortcuts import get_object_or_404
from django.conf import settings
import mammoth
import base64
import os
image_iterator = 0
image_file_name = ''
image_src = ''
image_alt_g=''
import elasticsearch_client
from .data_publisher import master_SingleRecord_elastic_update,__organisation_data_creation,__doctor_data_creation
from django.db import IntegrityError


####################################################################
# Name - File upload                                               #
# Owner - Jitendra Dixit                                           #
####################################################################
def handle_uploaded_file(f, image_name, folder_name):
    try:
        folder_name = imageURL + folder_name
        if not os.path.exists(folder_name):
            os.makedirs(folder_name)
        image_name = image_name
        with open(folder_name + image_name + '.jpg', 'wb+') as destination:
            for chunk in f.chunks():
                destination.write(chunk)
        destination.close()
        import commands
        commands.getoutput('jpegoptim *.jpg ' + folder_name + image_name + '.jpg')
    except Exception as e:
        print
        '%s (%s)' % (e.message, type(e))
    return image_name + '.jpg'

####################################################################
# Name - paginate                                                  #
# Owner - Visnu Badal                                              #
####################################################################
def remove_file(file_path):
    try:
        file_path = imageURL + file_path
        if os.path.exists(file_path):
            os.remove(file_path)
        else:
            print("Sorry, I can not remove %s file." % file_path)
    except Exception as e:
        print(e)

####################################################################
# Name - paginate                                                  #
# Owner - Visnu Badal                                              #
####################################################################
def paginate(object_list, per_page):
    paginator = Paginator(object_list, per_page)
    try:
        objects = paginator.page('page')
    except PageNotAnInteger:
        objects = paginator.page(1)
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        objects = paginator.page(paginator.num_pages)
    return objects

def index(request):
    return render(request, 'index/index.html', {'tab': 'admin_tab'})

def user_page(request):
    return render(request, 'user_login/user_login.html', {'tab': 'user_tab'})

def forgot_password(request):
    return render(request, 'user_login/forget_password.html', {'tab': 'forgot_tab'})

def locate_us_data(request):
    return render(request, 'user_login/locate_us.html', {'tab': 'locate_tab'})

####################################################################
# Name - login_user                                                #
# Owner - Visnu Badal                                              #
####################################################################
@csrf_exempt
def login_user(request):
    try:
        logout(request)
        if request.method == 'POST':
            user_name = request.POST['username'].strip()
            password = request.POST['password'].strip()
            user_type = request.POST['user_type'].strip()
            if user_name is not None and password is not None and user_type:
                user = authenticate(username=user_name, password=password)
                if user is not None:
                    if user_type == 'is_admin':
                        if user.is_active and user.is_superuser:
                            login(request, user)
                            # return HttpResponse("You are super user")
                            return HttpResponseRedirect(reverse('users-dashboard'))
                        else:
                            messages.error(request, 'You are no longer activate.')
                    elif user_type == "is_user":
                        if user.is_active:
                            # user_manage = UserManagement.objects.filter(user_id=user.id)
                            login(request, user)
                            return HttpResponseRedirect(reverse('users-dashboard'))
                        else:
                            messages.error(request, 'You are no longer activate.')
                    else:
                        messages.error(request, 'Please Select Proper type user.')
                else:
                    messages.error(request, "Username and Password are incorrect.")
            else:
                messages.error(request, 'Please enter username and password.')
            if user_type == 'is_admin':
                return HttpResponseRedirect('/')
            elif user_type == 'is_user':
                return HttpResponseRedirect('/cms/user/')
    except Exception as e:
        print e
        raise Http404

####################################################################
# Name - login_user                                                #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def logout_doc(request):
    try:
        if request.method == "GET":
            logout(request)
            return HttpResponseRedirect('/')
        else:
            return HttpResponse('User is not Valid')
    except Exception as e:
        raise Http404

####################################################################
# Name - deactivate_user                                           #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def deactivate_user(request, user_id=None):
    try:
        if user_id is not None:
            deactivate_obj = User.objects.filter(id=user_id)
            deactivate_obj.update(is_active=False)
            if UserManagement.objects.filter(user_id=user_id, is_news=True):
                messages.success(request,"User Successfully De-activated")
                return HttpResponseRedirect(reverse('user-news'))
            elif UserManagement.objects.filter(user_id=user_id, is_service_plan=True):
                messages.success(request,"User Successfully De-activated")
                return HttpResponseRedirect(reverse('user-service'))
            elif UserManagement.objects.filter(user_id=user_id, is_caller=True):
                messages.success(request,"User Successfully De-activated")
                return HttpResponseRedirect(reverse('user-caller'))
            elif UserManagement.objects.filter(user_id=user_id, is_reviewer=True):
                messages.success(request,"User Successfully De-activated")
                return HttpResponseRedirect(reverse('user-reviewer'))
            elif UserManagement.objects.filter(user_id=user_id, is_publisher=True):
                messages.success(request,"User Successfully De-activated")
                return HttpResponseRedirect(reverse('user-publisher'))
        else:
            raise Http404
    except:
        raise Http404

####################################################################
# Name - activate_user                                             #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def activate_user(request, user_id=None):
    try:
        if user_id is not None:
            activate_obj = User.objects.filter(id=user_id)
            activate_obj.update(is_active=True)
            if UserManagement.objects.filter(user_id=user_id, is_news=True):
                messages.success(request,"User Successfully Activated")
                return HttpResponseRedirect(reverse('user-news'))
            elif UserManagement.objects.filter(user_id=user_id, is_service_plan=True):
                messages.success(request,"User Successfully Activated")
                return HttpResponseRedirect(reverse('user-service'))
            elif UserManagement.objects.filter(user_id=user_id, is_caller=True):
                messages.success(request,"User Successfully Activated")
                return HttpResponseRedirect(reverse('user-caller'))
            elif UserManagement.objects.filter(user_id=user_id, is_reviewer=True):
                messages.success(request,"User Successfully Activated")
                return HttpResponseRedirect(reverse('user-reviewer'))
            elif UserManagement.objects.filter(user_id=user_id, is_publisher=True):
                messages.success(request,"User Successfully Activated")
                return HttpResponseRedirect(reverse('user-publisher'))
        else:
            raise Http404
    except Exception as e:
        raise Http404

####################################################################
# Name - doctor_data_manage                                        #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def doctor_data_manage(request):
    try:
        return render(request, 'admin/doctor_management/doctor_management.html',
                      {'tab': 'data', 'crosal': 'doctormanage'})
    except:
        raise Http404

####################################################################
# Name - doctor_data_by_users                                      #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def doctor_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            doctor_data_obj = Doctor.objects.filter(current_user_id=search_data).order_by('name')
            paginator = Paginator(doctor_data_obj, 100)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/doctor_management/doctor_by_user.html',
                      {'tab': 'data', 'crosal': 'doctorbymanage', 'doctor_all_data': doctor_data_obj,
                       'user_data_obj': user_data_obj,'search_data':search_data})
        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            doctor_data_obj = Doctor.objects.filter(name__icontains=search_data_two).order_by('name')
            paginator = Paginator(doctor_data_obj, 100)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/doctor_management/doctor_by_user.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'doctor_all_data': doctor_data_obj,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})
        user_data_obj = UserManagement.objects.all()
        doctor_all_data = Doctor.objects.all().order_by('name')
        paginator = Paginator(doctor_all_data, 100)
        page = request.GET.get('page')
        try:
            doctor_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            doctor_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            doctor_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/doctor_management/doctor_by_user.html',
                      {'tab': 'data', 'crosal': 'doctorbymanage', 'doctor_all_data': doctor_all_data,
                       'user_data_obj': user_data_obj})
    except:
        raise Http404

####################################################################
# Name - doctor_data_by_stages                                     #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def doctor_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            doctor_all_data = Doctor.objects.filter(stage_id=stage_id).order_by('name')
        else:
            doctor_all_data = Doctor.objects.all().order_by('name')
            stage_id=None
        stage_data_obj = Stage.objects.all()
        paginator = Paginator(doctor_all_data, 100)
        page = request.GET.get('page')
        try:
            doctor_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            doctor_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            doctor_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/doctor_management/doctor_by_stages.html',
                      {'tab': 'data', 'crosal': 'doctorbymanage', 'doctor_all_data': doctor_all_data,
                       'stage_data': stage_data_obj,'stage_no':stage_id })
    except:
        raise Http404
""" Assign Function Here """

####################################################################
# Name - assignment                                                #
# Owner - Visnu Badal                                              #
# Review by - jitendra dixit                                       #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def assignment(request):
    try:
        zone_filter = False
        stage_filter = False
        user_filter = False
        zone_location_filter_length = False
        category_filter = False
        stage_data = Stage.objects.all()[:4]
        user_data = User.objects.all().order_by('username')
        zone_obj = Zone.objects.filter(delete=False).order_by('name')
        zone_location_obj = {}
        category_obj = Category.objects.filter(delete=False).order_by('name')
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            doctor_data_obj = Doctor.objects.filter(name__icontains=search_data).order_by('name')

            #disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
            paginator = Paginator(doctor_data_obj, 100)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/doctor_management/doctor_assign.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                           'zone_obj': zone_obj,
                           'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                           'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                           'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                           'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                           'search_data':search_data})
        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'filter':
            zone_data = request.GET['zone'].strip()
            if zone_data:
                zone_filter = zone_data
            try:
                zone_location_data = request.GET['zone_location'].strip()
            except:
                zone_location_data = 0
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = 0
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = 0
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            if zone_location_data:
                zone_location_filter_length = int(zone_location_data)
                zone_location_obj = ZoneLocation.objects.all()

            category_data = request.GET['category'].strip()
            if category_data:
                category_filter = int(category_data)
            if zone_data and category_data:
                if zone_location_data and stage_id_data and user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(zone_location=zone_location_data),
                                                            Q(category=category_data), Q(stage=stage_id_data),
                                                            Q(current_user=user_id_data)).order_by('name')
                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/doctor_management/doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })


                elif zone_location_data and stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(zone_location=zone_location_data),
                                                            Q(category=category_data), Q(stage=stage_id_data)).order_by(
                        'name')
                elif zone_location_data and user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(zone_location=zone_location_data),
                                                            Q(category=category_data),
                                                            Q(current_user=user_id_data)).order_by('name')
                elif stage_id_data and user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(category=category_data),
                                                            Q(current_user=user_id_data),
                                                            Q(stage=stage_id_data)).order_by(
                        'name')
                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/doctor_management/doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(category=category_data), Q(stage=stage_id_data)).order_by(
                        'name')
                elif user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(category=category_data),
                                                            Q(current_user=user_id_data)).order_by(
                        'name')
                else:
                    doctor_data_obj = Doctor.objects.filter(zone=zone_data, category=category_data).order_by('name')
                # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                paginator = Paginator(doctor_data_obj, 100)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/doctor_management/doctor_assign.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })
            elif category_data:
                if stage_id_data and user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(category=category_data), Q(current_user=user_id_data),
                                                            Q(stage=stage_id_data)).order_by('name')

                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/doctor_management/doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(category=category_data), Q(stage=stage_id_data)).order_by(
                        'name')
                elif user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(category=category_data),
                                                            Q(current_user=user_id_data)).order_by('name')
                else:
                    doctor_data_obj = Doctor.objects.filter(category=category_data).order_by('name')

                # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                paginator = Paginator(doctor_data_obj, 100)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/doctor_management/doctor_assign.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter,
                               'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif zone_data and zone_location_data:
                if stage_id_data and user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(zone_location=zone_location_data),
                                                            Q(current_user=user_id_data),
                                                            Q(stage=stage_id_data)).order_by(
                        'name')
                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/doctor_management/doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(zone_location=zone_location_data),
                                                            Q(stage=stage_id_data)).order_by('name')
                elif user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(zone_location=zone_location_data),
                                                            Q(current_user=user_id_data)).order_by('name')
                else:
                    doctor_data_obj = Doctor.objects.filter(zone=zone_data, zone_location=zone_location_data).order_by(
                        'name')
                # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                paginator = Paginator(doctor_data_obj, 100)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/doctor_management/doctor_assign.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                               'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif zone_data:
                if stage_id_data and user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(stage=stage_id_data),
                                                            Q(current_user=user_id_data)).order_by('name')
                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/doctor_management/doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(stage=stage_id_data)).order_by('name')
                elif user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(current_user=user_id_data)).order_by(
                        'name')
                else:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data)).order_by('name')
                # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                paginator = Paginator(doctor_data_obj, 100)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/doctor_management/doctor_assign.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                               'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif stage_id_data or user_id_data:
                if stage_id_data and user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(stage=stage_id_data),
                                                            Q(current_user=user_id_data)).order_by('name')
                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/doctor_management/doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(stage=stage_id_data)).order_by('name')
                elif user_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(current_user=user_id_data)).order_by('name')
                else:
                    doctor_data_obj = Doctor.objects.all().order_by('name')
            else:
                doctor_data_obj = Doctor.objects.all().order_by('name')

            # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
            paginator = Paginator(doctor_data_obj, 100)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/doctor_management/doctor_assign.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                           'zone_obj': zone_obj,
                           'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                           'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                           'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                           'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                           'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                           'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

        else:

            filter_name = None
            zone_data = None
            zone_location_data = None
            category_data = None
            stage_id_data = None
            user_id_data= None
            doctor_data_obj = Doctor.objects.all().order_by('name')

            # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
            paginator = Paginator(doctor_data_obj, 100)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/doctor_management/doctor_assign.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                           'zone_obj': zone_obj,
                           'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                           'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                           'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                           'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                           'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                           'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

    except Exception as e:
        raise Http404

####################################################################
# Name - assign                                                    #
# Owner - Visnu Badal                                              #
# Review by - jitendra dixit                                       #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                nbslist = []
                nbflist = []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = Doctor.objects.filter(id=checkedValues[i]).update(current_user_id=assign_user,
                                                                                   stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue
                my_send_mail(request, 'doctor', nbslist, nbflist, 'Doctor Assignment', 'Assigned')
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/doctor/assignment/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - organisation                                              #
# Owner - Visnu Badal                                              #
# Review by - jitendra dixit                                       #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_organisation(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                nbslist = []
                nbflist = []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = OrganisationName.objects.filter(id=checkedValues[i]).update(
                            current_user_id=assign_user,
                            stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue
                my_send_mail(request, 'organisation', nbslist, nbflist, 'Hospital Assignment', 'Assigned')
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/organisation/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - Lab assignment                                            #
# Owner - Jaydeep                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_lab(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                nbslist = []
                nbflist = []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = Labs.objects.filter(id=checkedValues[i]).update(
                            current_user_id=assign_user,
                            stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue
                my_send_mail(request, 'lab', nbslist, nbflist, 'Lab Assignment', 'Assigned')

                response1['Redirect'] = True
                response1['RedirectUrl'] = '/lab/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - get_users_stage                                           #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def get_users_stage(request):
    try:
        if request.method == "POST":
            stage_id = request.POST['id']
            user_type = request.POST['user_type']
            response = {}
            user_data = ''
            if int(stage_id) == 1 or int(stage_id) == 2:
                if user_type == 'news_user':
                    user_find = UserManagement.objects.filter(is_news=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'doctor':
                    user_find = UserManagement.objects.filter(is_doctor_caller=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'lab':
                    user_find = UserManagement.objects.filter(is_path_caller=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'bloodbank':
                    user_find = UserManagement.objects.filter(is_blood_caller=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'ambulance':
                    user_find = UserManagement.objects.filter(is_ambulance_caller=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'pharmacy':
                    user_find = UserManagement.objects.filter(is_phar_caller=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'plan':
                    user_find = UserManagement.objects.filter(is_service_plan=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'disease':
                    user_find = UserManagement.objects.filter(is_disease_caller=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'rehab':
                    user_find = UserManagement.objects.filter(is_physio_rehab_caller=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'nurse_bureau':
                    user_find = UserManagement.objects.filter(is_nurse_bureau_caller=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'dietitian':
                    user_find = UserManagement.objects.filter(is_dietitian_caller=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'therapist':
                    user_find = UserManagement.objects.filter(is_therapist_caller=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
            elif int(stage_id) == 3:
                if user_type == 'news_user':
                    user_find = UserManagement.objects.filter(is_news_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'doctor':
                    user_find = UserManagement.objects.filter(is_doctor_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'lab':
                    user_find = UserManagement.objects.filter(is_path_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'bloodbank':
                    user_find = UserManagement.objects.filter(is_blood_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'ambulance':
                    user_find = UserManagement.objects.filter(is_ambulance_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'pharmacy':
                    user_find = UserManagement.objects.filter(is_phar_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'disease':
                    user_find = UserManagement.objects.filter(is_disease_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'plan':
                    user_find = UserManagement.objects.filter(is_service_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'disease':
                    user_find = UserManagement.objects.filter(is_disease_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'rehab':
                    user_find = UserManagement.objects.filter(is_physio_rehab_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'nurse_bureau':
                    user_find = UserManagement.objects.filter(is_nurse_bureau_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'dietitian':
                    user_find = UserManagement.objects.filter(is_dietitian_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
                elif user_type == 'therapist':
                    user_find = UserManagement.objects.filter(is_therapist_reviewer=True).values('user_id')
                    user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
            elif int(stage_id) == 4:
                user_find = UserManagement.objects.filter(is_publisher=True).values('user_id')
                user_data = User.objects.filter(id__in=user_find, is_active=True).values('id', 'username')
            response['user_data'] = list(user_data)
            data = json.dumps(response)
            return HttpResponse(data)
    except Exception as e:
        raise Http404

####################################################################
# Name - MyUser                                                    #
# Owner - Visnu Badal                                              #
####################################################################
class MyUser(View):
    template_name = 'admin/user_management.html'
    users = None
    @method_decorator(login_required(login_url='/'))
    @method_decorator(user_passes_test(lambda u: u.is_superuser))
    def get(self, request, *args, **kwargs):
        self.users = self.request.GET.get('users')
        user_obj = UserManagement.objects.all()
        user_caller = user_obj.filter(is_caller=True).values('user_id')
        user_reviewer = user_obj.filter(is_reviewer=True).values('user_id')
        user_publisher = user_obj.filter(is_publisher=True).values('user_id')
        user_news = user_obj.filter(is_news=True).values('user_id')
        user_service = user_obj.filter(is_service_plan=True).values('user_id')
        caller_no = User.objects.filter(id__in=user_caller).count()
        reviewer_no = User.objects.filter(id__in=user_reviewer).count()
        publisher_no = User.objects.filter(id__in=user_publisher).count()
        news_no = User.objects.filter(id__in=user_news).count()
        service_no = User.objects.filter(id__in=user_service).count()
        admin_no = User.objects.filter(is_superuser=True).count()
        if self.users is not None:
            if self.users == 'service':
                form_open = 'service'
            elif self.users == 'news':
                form_open = 'news'
            elif self.users == 'cms':
                form_open = 'cms'
            else:
                form_open = ''
        else:
            form_open = None
        # user_obj = UserManagement.objects.all()
        return render(request, self.template_name,
                      {'tab': 'users_tab', 'form_open': form_open, 'user_no': caller_no, 'reviewer_no': reviewer_no,
                       'publisher_no': publisher_no, 'news_no': news_no, 'service_no': service_no,'admin_no':admin_no})

####################################################################
# Name - Dashboard                                                 #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def dashboard(request):
    try:
        print request.COOKIES
        if request.method == "GET":
            if request.user.is_superuser:
                # Total Doctor Count and Total Hospital and Clinic
                all_doctor = Doctor.objects.all().count()
                all_live_doctors = Live_Doctor.objects.all().count()
                all_lab = Labs.objects.all().count()
                all_user_data = User.objects.all()
                all_user_no = all_user_data.count()
                all_user_active = all_user_data.filter(is_active=True).count()
                organisation_data = OrganisationName.objects.filter(is_live_org=False).count()
                live_organisation_data = OrganisationName.objects.filter(is_live_org=True).count()
                all_bloodbank = BloodBank.objects.all().count()
                all_pharmacy = MedicalPharmacyStore.objects.all().count()
                all_ambulance = Ambulance.objects.all().count()
                all_global_feed = NewsFeed.objects.filter(news_type=1).count()
                all_wellness_feed = NewsFeed.objects.filter(news_type=2).count()
                all_health_feed = NewsFeed.objects.filter(news_type=3).count()
                all_home_plan =  ServicePlan.objects.filter(is_home_service=True).count()
                all_life_plan = ServicePlan.objects.filter(is_life_service=True).count()
                all_enterprise_plan = ServicePlan.objects.filter(is_enterprise_service=True).count()
                all_rehab_center = RehabCenter.objects.all().count()
                all_nurse_bureau = Nurse_Bureau.objects.all().count()
                all_dietitians =  Dietitian.objects.all().count()
                question_obj_count = patienttoaskquestion.objects.filter(free='true').count()
                feedbank_obj_count = patienttodoctorfeedback.objects.all().count()

                return render(request, 'admin/dashboard.html',
                              {'tab': 'dashboard', 'all_user_no': all_user_no, 'all_user_active': all_user_active,
                               'all_doctor': all_doctor, 'organisation_data': organisation_data, 'all_lab': all_lab,
                               'all_live_doctors':all_live_doctors,'live_organisation_data':live_organisation_data,
                               'all_bloodbank': all_bloodbank, 'all_pharmacy': all_pharmacy,
                               'all_ambulance':all_ambulance,'all_global_feed':all_global_feed,
                               'all_wellness_feed':all_wellness_feed, 'all_health_feed ':all_health_feed,
                               'all_home_plan':all_home_plan,'all_life_plan':all_life_plan,
                               'all_enterprise_plan':all_enterprise_plan,'all_rehab_center':all_rehab_center,
                               'all_nurse_bureau':all_nurse_bureau,'all_dietitians':all_dietitians,
                               'question_obj_count':question_obj_count,'feedbank_obj_count':feedbank_obj_count})
            else:
                return render(request, 'admin/dashboard.html',
                              {'tab': 'dashboard'})
            # countall_hospital =
            user_manage_obj = UserManagement.objects.filter(user_id=request.user.id)
            content_reviewer_obj = user_manage_obj.filter(user_id=request.user.id, is_newsfeed=True)
            if content_reviewer_obj:
                try:
                    content_reviewer_obj = content_reviewer_obj[0].user_id
                except IndexError:
                    content_reviewer_obj = ''
                    pass
                content_reviewer = all_user_obj.filter(id=content_reviewer_obj, is_active=True, is_staff=True,
                                                       is_superuser=False)
                if len(content_reviewer):
                    is_content_reviewer_user = True
                else:
                    is_content_reviewer_user = False
                content_publisher = all_user_obj.filter(id=content_reviewer_obj, is_active=True, is_staff=False,
                                                        is_superuser=False)
                if len(content_publisher):
                    is_content_publisher_user = True
                else:
                    is_content_publisher_user = False
                request.session['is_content_reviewer_user'] = is_content_reviewer_user
                request.session['is_content_publisher_user'] = is_content_publisher_user
            plan_reviewer_obj = user_manage_obj.filter(user_id=request.user.id, is_service_provider=True)
            if plan_reviewer_obj:
                try:
                    plan_reviewer_obj = plan_reviewer_obj[0].user_id
                except IndexError:
                    plan_reviewer_obj = ''
                    pass
                plan_reviewer = all_user_obj.filter(id=plan_reviewer_obj, is_active=True, is_staff=True,
                                                    is_superuser=False)
                if len(plan_reviewer):
                    is_plan_reviewer_user = True
                else:
                    is_plan_reviewer_user = False
                plan_publisher = all_user_obj.filter(id=plan_reviewer_obj, is_active=True, is_staff=False,
                                                     is_superuser=False)
                if len(plan_publisher):
                    is_plan_publisher_user = True
                else:
                    is_plan_publisher_user = False
                request.session['is_plan_reviewer_user'] = is_plan_reviewer_user
                request.session['is_plan_publisher_user'] = is_plan_publisher_user
            return render(request, 'dashboard.html')
        else:
            return HttpResponse('User is not active')
    except Exception as e :
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - Data Management                                           #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def data_management(request):
    try:
        if request.method == 'GET':
            doctor_data = Doctor.objects.all().count()
            live_doctor_data = Live_Doctor.objects.all().count()
            organisation_data = OrganisationName.objects.filter(is_live_org=False).count()
            live_organisation_data = OrganisationName.objects.filter(is_live_org=True).count()
            lab_data = Labs.objects.all().count()
            bloodbank_data = BloodBank.objects.all().count()
            ambulance_data = Ambulance.objects.all().count()
            pharmacy_data = MedicalPharmacyStore.objects.all().count()
            global_feed_data = NewsFeed.objects.filter(news_type=1).count()
            wellness_feed_data = NewsFeed.objects.filter(news_type=2).count()
            home_plan_data = ServicePlan.objects.filter(is_home_service=True).count()
            life_plan_data = ServicePlan.objects.filter(is_life_service=True).count()
            rehab_data = RehabCenter.objects.all().count()
            enterprise_plan_data = ServicePlan.objects.filter(is_enterprise_service=True).count()
            nurse_bureau_data = Nurse_Bureau.objects.all().count()
            dietitian_data = Dietitian.objects.all().count()
            therapist_data = Therapist.objects.all().count()
            question_obj_count = patienttoaskquestion.objects.filter(free='true').count()
            feedbank_obj_count = patienttodoctorfeedback.objects.all().count()
            return render(request, 'data_management/data_main.html',
                          dict(tab='data', doctor_data=doctor_data, organisation_data=organisation_data,
                               live_doctor_data=live_doctor_data,live_organisation_data=live_organisation_data,
                               lab_data=lab_data, bloodbank_data=bloodbank_data, ambulance_data=ambulance_data,
                               pharmacy_data=pharmacy_data,global_feed_data=global_feed_data,
                               wellness_feed_data=wellness_feed_data,home_plan_data=home_plan_data,life_plan_data=life_plan_data,
                               enterprise_plan_data=enterprise_plan_data,rehab_data=rehab_data,nurse_bureau_data=nurse_bureau_data,
                               dietitian_data=dietitian_data,therapist_data=therapist_data,
                               question_obj_count = question_obj_count,feedbank_obj_count = feedbank_obj_count))
        else:
            raise Http404
    except Exception as e:
        raise Http404

####################################################################
# Name - caller_user                                               #
# Owner - Visnu Badal                                              #
################################################################## #
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def   caller_user(request):
    try:
        search_data = None
        if request.method == 'GET':
            try :
                search_data = request.GET.get('search_data')
            except:
                search_data = None
            if search_data :
                caller_user_obj = UserManagement.objects.filter(is_caller=True, is_news=False, is_service_plan=False,user__name__icontains=search_data )
            else:
                caller_user_obj = UserManagement.objects.filter(is_caller=True,is_news=False,is_service_plan=False)
            #caller_user_obj = UserManagement.objects.filter(is_caller=True)
            paginator = Paginator(caller_user_obj, 20)
            page = request.GET.get('page')
            try:
                caller_user_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                caller_user_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                caller_user_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/user_table.html',
                          dict(caller_user_data=caller_user_obj, tab='users_tab', user_type='caller',search_data=search_data))
        else:
            raise Http404
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - publisher_user                                            #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def publisher_user(request):
    try:
        search_data = None
        if request.method == 'GET':
            try:
                search_data = request.GET.get('search_data')
            except:
                search_data = None
            if search_data:
                publisher_user_obj = UserManagement.objects.filter(is_publisher=True,user__name__icontains=search_data)
            else:
                publisher_user_obj = UserManagement.objects.filter(is_publisher=True)
                # caller_user_obj = UserManagement.objects.filter(is_caller=True)
            paginator = Paginator(publisher_user_obj, 20)
            page = request.GET.get('page')
            try:
                publisher_user_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                publisher_user_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                publisher_user_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/user_table.html',
                          dict(publisher_user_data=publisher_user_obj, tab='users_tab', user_type='publisher',search_data=search_data))
        else:
            raise Http404
    except Exception as e:
        raise Http404

####################################################################
# Name - news_user                                                 #
# Owner - Visnu Badal                                              #
################################################################## #
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def news_user(request):
    try:
        search_data = None
        if request.method == 'GET':
            try:
                search_data = request.GET.get('search_data')
            except:
                search_data = None
            if search_data:
                news_user_obj = UserManagement.objects.filter(is_news=True, user__name__icontains=search_data)
            else:
                news_user_obj = UserManagement.objects.filter(is_news=True)
                # caller_user_obj = UserManagement.objects.filter(is_caller=True)
            paginator = Paginator(news_user_obj, 20)
            page = request.GET.get('page')
            try:
                news_user_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                news_user_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                news_user_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/user_table.html',
                          dict(news_user_data=news_user_obj, tab='users_tab', user_type='news',search_data=search_data))
        else:
            raise Http404
    except Exception as e:
        raise Http404

####################################################################
# Name - service_user                                              #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def service_user(request):
    try:
        search_data = None
        if request.method == 'GET':
            try:
                search_data = request.GET.get('search_data')
            except:
                search_data = None
            if search_data:
                service_user_obj = UserManagement.objects.filter(is_service_plan=True, user__name__icontains=search_data)
            else:
                service_user_obj = UserManagement.objects.filter(is_service_plan=True)
            paginator = Paginator(service_user_obj, 20)
            page = request.GET.get('page')
            try:
                service_user_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                service_user_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                service_user_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/user_table.html',
                          dict(service_user_data=service_user_obj, tab='users_tab', user_type='service',search_data=search_data))
        else:
            raise Http404
    except Exception as e:
        raise Http404

####################################################################
# Name - reviewer_user                                             #
# Owner - Visnu Badal                                              #
################################################################## #
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def reviewer_user(request):
    try:
        search_data = None
        if request.method == 'GET':
            try:
                search_data = request.GET.get('search_data')
            except:
                search_data = None
            if search_data:
                reviewer_user_obj = UserManagement.objects.filter(is_reviewer=True, user__name__icontains=search_data)
            else:
                reviewer_user_obj = UserManagement.objects.filter(is_reviewer=True)
                # caller_user_obj = UserManagement.objects.filter(is_caller=True)
            paginator = Paginator(reviewer_user_obj, 20)
            page = request.GET.get('page')
            try:
                reviewer_user_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                reviewer_user_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                reviewer_user_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/user_table.html',
                          dict(reviewer_user_data=reviewer_user_obj, tab='users_tab', user_type='reviewer',search_data=search_data))
        else:
            raise Http404
    except Exception as e:
        raise Http404

####################################################################
# Name - admin_user                                                #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def admin_user(request):
    try:
        search_data = None
        if request.method == 'GET':
            try:
                search_data = request.GET.get('search_data')
            except:
                search_data = None
            if search_data:

                admin_user_obj = User.objects.filter(is_superuser=True, name__icontains=search_data)
            else:
                admin_user_obj = User.objects.filter(is_superuser=True)
            paginator = Paginator(admin_user_obj, 20)
            page = request.GET.get('page')
            try:
                admin_user_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                admin_user_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                admin_user_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/user_table.html',
                          dict(admin_user_data=admin_user_obj, tab='users_tab', user_type='admin',search_data=search_data))
        else:
            raise Http404
    except Exception as e:
        raise Http404

@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def check_username(request):
    try:
        if request.POST:
            response1 = {}
            user_name = request.POST['formData']
            check_user_data = User.objects.filter(username=request.POST['formData'])
            if check_user_data:
                return HttpResponse(False)
            else:
                return HttpResponse(True)
    except Exception as e:
        raise Http404

####################################################################
# Name - admin_user                                                #
# Owner - Visnu Badal                                              #
################################################################## #
class MyUserList(View):
    model = UserManagement
    template_name = 'admin/user_add_edit.html'
    user_type = None
    user_cms = None
    tab = 'users_tab'
    user_service = None
    @staticmethod
    def welcome_email(request, user_data, password):
        try:
            c = {
                'email': user_data.email,
                'domain': request.META['HTTP_HOST'],
                'site_name': 'Health Dynamics Solution',
                'user': user_data.username,
                'password': password
            }
            subject = 'Welcome to Health Dynamics Solution'
            email_template_name = 'admin/registration/welcome.html'
            # subject = loader.render_to_string(subject_template_name, c)
            # subject = ''.join(subject.splitlines())
            email = loader.render_to_string(email_template_name, c)
            send_mail(subject, email, DEFAULT_FROM_EMAIL, [user_data.email], fail_silently=False)
            print("sent")
            return True
        except Exception as e:

            return False

    @method_decorator(login_required(login_url='/'))
    @method_decorator(user_passes_test(lambda u: u.is_superuser))
    def get(self, request, *args, **kwargs):
        if self.user_cms == 'caller':
            self.user_type = 'is_caller'
        elif self.user_cms == 'reviewer':
            self.user_type = 'is_reviewer'
        elif self.user_cms == 'admin':
            self.user_type = 'is_admin'
        elif self.user_cms == 'publisher':
            self.user_type = 'is_publisher'
        elif self.user_cms == 'news':
            self.user_type = 'is_news'
        elif self.user_cms == 'service':
            self.user_type = 'is_service'
        else:
            raise Http404

        return render(request, self.template_name,
                      {'tab': self.tab, 'user_type': self.user_type, 'add': 'add'})

    @method_decorator(csrf_exempt)
    @method_decorator(user_passes_test(lambda u: u.is_superuser))
    def post(self, request):
        try:
            user_name = self.request.POST['user_name'].strip()
            password_user = self.request.POST['password'].strip()
            email_user = self.request.POST['email'].strip()
            type_user = self.request.POST['type'].strip()
            firstname = self.request.POST['firstname'].strip()
            lastname = self.request.POST['lastname'].strip()


            if type_user == 'Caller' and user_name and password_user and email_user:
                check_username_var = User.objects.filter(Q(username__iexact=user_name) | Q(email__iexact=email_user))
                if check_username_var:
                    messages.error(request, "Email already exists")
                    self.form_open = 'caller_form'
                    return render(request, self.template_name,
                                  {'tab': 'users_tab', 'form_open': self.form_open, 'eror': 'error2'})
                try:
                    is_doctor_caller = self.request.POST['is_doctor_caller'].strip()
                    if is_doctor_caller == "on":
                        is_doctor_caller = True
                    else:
                        is_doctor_caller = False
                except:
                    is_doctor_caller = False

                try:
                    is_phar_caller = self.request.POST['is_phar_caller'].strip()
                    if is_phar_caller == "on":
                        is_phar_caller = True
                    else:
                        is_phar_caller = False
                except:
                    is_phar_caller = False

                try:
                    is_path_caller = self.request.POST['is_path_caller'].strip()
                    if is_path_caller == "on":
                        is_path_caller = True
                except:
                    is_path_caller = False

                try:
                    is_ambulance_caller = self.request.POST['is_ambu_caller'].strip()
                    if is_ambulance_caller == "on":
                        is_ambulance_caller = True
                    else:
                        is_ambulance_caller = False
                except:
                    is_ambulance_caller = False

                try:
                    is_blood_caller = self.request.POST['is_blood_caller'].strip()
                    if is_blood_caller == "on":
                        is_blood_caller = True
                    else:
                        is_blood_caller = False
                except:
                    is_blood_caller = False

                try:
                    is_disease_caller = self.request.POST['is_disease_caller'].strip()
                    if is_disease_caller== "on":
                        is_disease_caller = True
                    else:
                        is_disease_caller = False
                except:
                    is_disease_caller = False

                try:
                    is_physio_rehab_caller = self.request.POST['is_physio_rehab_caller'].strip()
                    if is_physio_rehab_caller== "on":
                        is_physio_rehab_caller = True
                    else:
                        is_physio_rehab_caller = False
                except:
                    is_physio_rehab_caller = False

                try:
                    is_nurse_bureau_caller = self.request.POST['is_nurse_bureau_caller'].strip()
                    if is_nurse_bureau_caller== "on":
                        is_nurse_bureau_caller = True
                    else:
                        is_nurse_bureau_caller = False
                except:
                    is_nurse_bureau_caller = False

                try:
                    is_dietitian_caller = self.request.POST['is_dietitian_caller'].strip()
                    if is_dietitian_caller== "on":
                        is_dietitian_caller = True
                    else:
                        is_dietitian_caller = False
                except:
                    is_dietitian_caller = False

                try:
                    is_therapist_caller = self.request.POST['is_therapist_caller'].strip()
                    if is_therapist_caller== "on":
                        is_therapist_caller = True
                    else:
                        is_therapist_caller = False
                except:
                    is_therapist_caller = False

                # try:
                #     is_live_doctor_caller = self.request.POST['is_live_doctor_caller'].strip()
                #     if is_live_doctor_caller == "on":
                #         is_live_doctor_caller = True
                #     else:
                #         is_live_doctor_caller = False
                # except:
                #     is_live_doctor_caller = False

                caller_user_var = User.objects.create_user(user_name, email_user, password_user)
                caller_user_var.is_active = True
                caller_user_var.first_name = firstname
                caller_user_var.last_name = lastname
                caller_user_var.save()

                self.model(user_id=caller_user_var.id, is_caller=True, is_doctor_caller=is_doctor_caller,
                           is_phar_caller=is_phar_caller, is_path_caller=is_path_caller, is_ambulance_caller=is_ambulance_caller,
                           is_blood_caller=is_blood_caller, is_disease_caller=is_disease_caller, is_physio_rehab_caller=is_physio_rehab_caller,
                           is_nurse_bureau_caller=is_nurse_bureau_caller, is_dietitian_caller=is_dietitian_caller,
                           is_therapist_caller=is_therapist_caller).save()
                # , is_live_doctor_caller = is_live_doctor_caller
                self.welcome_email(request, caller_user_var, password_user)
                return HttpResponseRedirect(reverse('user-caller'))
            elif type_user == 'Reviewer' and user_name and password_user and email_user:
                check_email = User.objects.filter(Q(email__iexact=email_user))
                if check_email:
                    messages.error(request, "Email already exists")
                    return HttpResponseRedirect(reverse('get-reviewer-users'))
                check_user = User.objects.filter(Q(username__iexact=user_name))
                if check_user:
                    messages.error(request, "UserName already exists")
                    return HttpResponseRedirect(reverse('get-reviewer-users'))
                reviewer_user_var = User.objects.create_user(user_name, email_user, password_user)
                reviewer_user_var.is_active = True
                reviewer_user_var.is_staff = True
                reviewer_user_var.first_name = firstname
                reviewer_user_var.last_name = lastname
                reviewer_user_var.save()
                try:
                    news_reviewer = self.request.POST['is_news_reviewer'].strip()
                    if news_reviewer == 'on':
                        news_reviewer_is = True
                    else:
                        news_reviewer_is = False
                except:
                    news_reviewer_is = False
                try:
                    service_reviewer = self.request.POST['is_service_reviewer'].strip()
                    if service_reviewer == 'on':
                        service_reviewer_is = True
                    else:
                        service_reviewer_is = False
                except:
                    service_reviewer_is = False
                try:
                    doctor_reviewer = self.request.POST['is_doctor_reviewer'].strip()
                    if doctor_reviewer == 'on':
                        doctor_reviewer_is = True
                    else:
                        doctor_reviewer_is = False
                except:
                    doctor_reviewer_is = False

                try:
                    path_reviewer = self.request.POST['is_path_reviewer'].strip()
                    if path_reviewer  == 'on':
                        path_reviewer_is = True
                    else:
                        path_reviewer_is = False
                except:
                    path_reviewer_is = False
                try:
                    blood_reviewer = self.request.POST['is_blood_reviewer'].strip()
                    if blood_reviewer  == 'on':
                        blood_reviewer_is = True
                    else:
                        blood_reviewer_is = False
                except:
                     blood_reviewer_is = False
                try:
                    disease_reviewer = self.request.POST['is_disease_reviewer'].strip()
                    if disease_reviewer  == 'on':
                        disease_reviewer_is = True
                    else:
                        disease_reviewer_is = False
                except:
                     disease_reviewer_is = False

                try:
                    phar_reviewer = self.request.POST['is_phar_reviewer'].strip()
                    if phar_reviewer  == 'on':
                        phar_reviewer_is = True
                    else:
                        phar_reviewer_is = False
                except:
                     phar_reviewer_is = False

                try:
                    ambu_reviewer = self.request.POST['is_ambu_reviewer'].strip()
                    if ambu_reviewer  == 'on':
                        ambu_reviewer_is = True
                    else:
                        ambu_reviewer_is = False
                except:
                     ambu_reviewer_is = False

                try:
                    is_nurse_bureau_reviewer = self.request.POST['is_nurse_bureau_reviewer'].strip()
                    if is_nurse_bureau_reviewer  == 'on':
                        is_nurse_bureau_reviewer = True
                    else:
                        is_nurse_bureau_reviewer = False
                except:
                    is_nurse_bureau_reviewer = False

                try:
                    is_dietitian_reviewer = self.request.POST['is_dietitian_reviewer'].strip()
                    if is_dietitian_reviewer  == 'on':
                        is_dietitian_reviewer = True
                    else:
                        is_dietitian_reviewer = False
                except:
                    is_dietitian_reviewer = False

                try:
                    is_therapist_reviewer = self.request.POST['is_therapist_reviewer'].strip()
                    if is_therapist_reviewer  == 'on':
                        is_therapist_reviewer = True
                    else:
                        is_therapist_reviewer = False
                except:
                    is_therapist_reviewer = False

                # try:
                #     is_live_doctor_reviewer = self.request.POST['is_live_doctor_reviewer'].strip()
                #     if is_live_doctor_reviewer == 'on':
                #         is_live_doctor_reviewer = True
                #     else:
                #         is_live_doctor_reviewer = False
                # except:
                #     is_live_doctor_reviewer = False

                obj = self.model(user_id=reviewer_user_var.id, is_reviewer=True, is_news_reviewer=news_reviewer_is,
                           is_doctor_reviewer=doctor_reviewer_is, is_service_reviewer=service_reviewer_is,
                           is_path_reviewer= path_reviewer_is,is_blood_reviewer=blood_reviewer_is,
                           is_disease_reviewer=disease_reviewer_is, is_phar_reviewer=phar_reviewer_is,
                           is_ambulance_reviewer =ambu_reviewer_is,
                           is_nurse_bureau_reviewer=is_nurse_bureau_reviewer, is_dietitian_reviewer=is_dietitian_reviewer,
                           is_therapist_reviewer=is_therapist_reviewer)
                # , is_live_doctor_reviewer = is_live_doctor_reviewer, is_physio_rehab_reviewer=is_physio_rehab_reviewer
                obj.save()

                self.welcome_email(request, reviewer_user_var, password_user)
                return HttpResponseRedirect(reverse('user-reviewer'))
            elif type_user == 'Admin' and user_name and password_user and email_user:
                check_username = User.objects.filter(username__iexact=user_name)
                if check_username:
                    self.form_open = 'sudo_form'
                    return render(request, self.template_name,
                                  {'tab': 'users_tab', 'form_open': self.form_open, 'error': 'error2'})
                sudo_user = User.objects.create_user(user_name, email_user, password_user)
                sudo_user.is_active = True
                sudo_user.is_staff = True
                sudo_user.is_superuser = True
                sudo_user.save()
                self.welcome_email(request, sudo_user, password_user)
                messages.success(request,"New Admin user added successfully")
                return HttpResponseRedirect('/cms/users/?users=sudo')
            elif type_user == 'Publisher' and user_name and password_user and email_user:
                check_email = User.objects.filter(Q(email__iexact=email_user))
                if check_email:
                    messages.error(request, "Email already exists")
                    return HttpResponseRedirect(reverse('get-publisher-users'))
                check_user = User.objects.filter(Q(username__iexact=user_name))
                if check_user:
                    messages.error(request, "UserName already exists")
                    return HttpResponseRedirect(reverse('get-publisher-users'))
                publisher_user_var = User.objects.create_user(user_name, email_user, password_user)
                publisher_user_var.is_active = True
                publisher_user_var.is_staff = True
                publisher_user_var.first_name = firstname
                publisher_user_var.last_name = lastname
                publisher_user_var.save()
                self.model(user_id=publisher_user_var.id, is_publisher=True).save()
                self.welcome_email(request, publisher_user_var, password_user)
                return HttpResponseRedirect(reverse('user-publisher'))
            elif type_user == 'News' and user_name and password_user and email_user:
                check_email = User.objects.filter(Q(email__iexact=email_user))
                if check_email:
                    messages.error(request, "Email already exists")
                    return HttpResponseRedirect(reverse('get-news-users'))
                check_user = User.objects.filter(Q(username__iexact=user_name))
                if check_user:
                    messages.error(request, "UserName already exists")
                    return HttpResponseRedirect(reverse('get-news-users'))
                news_user_var = User.objects.create_user(user_name, email_user, password_user)
                news_user_var.is_active = True
                news_user_var.is_staff = True
                news_user_var.first_name = firstname
                news_user_var.last_name = lastname
                news_user_var.save()
                self.model(user_id=news_user_var.id, is_news=True).save()
                self.welcome_email(request, news_user_var, password_user)
                return HttpResponseRedirect(reverse('user-news'))
            elif type_user == 'Service' and user_name and password_user and email_user:
                check_email = User.objects.filter(Q(email__iexact=email_user))
                if check_email:
                    messages.error(request, "Email already exists")
                    return HttpResponseRedirect(reverse('get-service-users'))
                check_user = User.objects.filter(Q(username__iexact=user_name))
                if check_user:
                    messages.error(request, "UserName already exists")
                    return HttpResponseRedirect(reverse('get-service-users'))
                service_user_var = User.objects.create_user(user_name, email_user, password_user)
                service_user_var.is_active = True
                service_user_var.is_staff = True
                service_user_var.first_name = firstname
                service_user_var.last_name = lastname
                service_user_var.save()
                self.model(user_id=service_user_var.id, is_service_plan=True,is_caller=True).save()
                self.welcome_email(request, service_user_var, password_user)
                return HttpResponseRedirect(reverse('user-service'))
                # elif type_user == 'plan_publisher':
                # elif type_user == 'paln_reviewer':
                # elif type_user == 'content':
                # elif type_user == 'content_reviewer':

        except Exception as e:
            raise Http404

####################################################################
# Name - users_edit                                                #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def users_edit(request, user_id=None):
    try:
        if request.method == 'GET' and user_id is not None:
            user_data_obj = UserManagement.objects.filter(user_id=user_id)
            if user_data_obj:
                if user_data_obj[0].is_caller:
                    user_type = 'is_caller'
                elif user_data_obj[0].is_reviewer:
                    user_type = 'is_reviewer'
                elif user_data_obj[0].is_publisher:
                    user_type = 'is_publisher'
                elif user_data_obj[0].is_news:
                    user_type = 'is_news'
                elif user_data_obj[0].is_service_plan:
                    user_type = 'is_service'
                else:
                    user_type = None
                    messages.error(request, 'Something Bad Happened')
            else:
                user_type = None
                messages.error(request, 'User did not found.')
            if user_type is None:
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            return render(request, 'admin/edit_user_data.html',
                          {'user_type': user_type, 'user_data_obj': user_data_obj})
        elif request.method == 'POST' and user_id is not None:
            id_user = request.POST['id_user'].strip()
            password_user = request.POST['password'].strip()
            email_user = request.POST['email'].strip()
            type_user = request.POST['type'].strip()
            firstname = request.POST['firstname'].strip()
            lastname = request.POST['lastname'].strip()

            try:
                news_reviewer = request.POST['is_news_reviewer'].strip()
                if news_reviewer == 'on':
                    news_reviewer_is = True
                else:
                    news_reviewer_is = False
            except:
                news_reviewer_is = False

            try:
                service_reviewer = request.POST['is_service_reviewer'].strip()
                if service_reviewer == 'on':
                    service_reviewer_is = True
                else:
                    service_reviewer_is = False
            except:
                service_reviewer_is = False

            # Added By Vishnu
            try:
                path_reviewer = request.POST['is_path_reviewer'].strip()
                if path_reviewer == 'on':
                    path_reviewer_is = True
                else:
                    path_reviewer_is = False
            except:
                path_reviewer_is = False

            try:
                blood_reviewer = request.POST['is_blood_reviewer'].strip()
                if blood_reviewer == 'on':
                    blood_reviewer_is = True
                else:
                    blood_reviewer_is = False
            except:
                blood_reviewer_is = False

            try:
                disease_reviewer = request.POST['is_disease_reviewer'].strip()
                if disease_reviewer == 'on':
                    disease_reviewer_is = True
                else:
                    disease_reviewer_is = False
            except:
                disease_reviewer_is = False

            try:
                phar_reviewer = request.POST['is_phar_reviewer'].strip()
                if phar_reviewer == 'on':
                    phar_reviewer_is = True
                else:
                    phar_reviewer_is = False
            except:
                phar_reviewer_is = False

            try:
                ambu_reviewer = request.POST['is_ambu_reviewer'].strip()
                if ambu_reviewer == 'on':
                    ambu_reviewer_is = True
                else:
                    ambu_reviewer_is = False
            except:
                ambu_reviewer_is = False

            try:
                doctor_reviewer = request.POST['is_doctor_reviewer'].strip()
                if doctor_reviewer == 'on':
                    doctor_reviewer_is = True
                else:
                    doctor_reviewer_is = False
            except:
                doctor_reviewer_is = False


            try:
                is_physio_rehab_reviewer = request.POST['is_physio_rehab_reviewer'].strip()
                if is_physio_rehab_reviewer == "on":
                    is_physio_rehab_reviewer = True
                else:
                    is_physio_rehab_reviewer = False
            except:
                is_physio_rehab_reviewer = False


            try:
                is_nurse_bureau_reviewer = request.POST['is_nurse_bureau_reviewer'].strip()
                if is_nurse_bureau_reviewer == "on":
                    is_nurse_bureau_reviewer = True
                else:
                    is_nurse_bureau_reviewer = False
            except:
                is_nurse_bureau_reviewer = False

            try:
                is_dietitian_reviewer = request.POST['is_dietitian_reviewer'].strip()
                if is_dietitian_reviewer == "on":
                    is_dietitian_reviewer = True
                else:
                    is_dietitian_reviewer = False
            except:
                is_dietitian_reviewer = False

            try:
                is_therapist_reviewer = request.POST['is_therapist_reviewer'].strip()
                if is_therapist_reviewer == "on":
                    is_therapist_reviewer = True
                else:
                    is_therapist_reviewer = False
            except:
                is_therapist_reviewer = False

            # try:
            #     is_live_doctor_reviewer = request.POST['is_live_doctor_reviewer'].strip()
            #     if is_live_doctor_reviewer == 'on':
            #         is_live_doctor_reviewer = True
            #     else:
            #         is_live_doctor_reviewer = False
            # except:
            #     is_live_doctor_reviewer = False

            #added by Nishank  26-9-16
            try:
                is_doctor_caller = request.POST['is_doctor_caller'].strip()
                if is_doctor_caller == "on":
                    is_doctor_caller = True
                else:
                    is_doctor_caller = False

            except:
                is_doctor_caller = False

            try:
                is_phar_caller = request.POST['is_phar_caller'].strip()
                if is_phar_caller == "on":
                    is_phar_caller = True
                else:
                    is_phar_caller = False
            except:
                is_phar_caller = False

            try:
                is_path_caller = request.POST['is_path_caller'].strip()
                if is_path_caller == "on":
                    is_path_caller = True
                else:
                    is_path_caller = False
            except:
                is_path_caller = False

            try:
                is_ambulance_caller = request.POST['is_ambu_caller'].strip()
                if is_ambulance_caller == "on":
                    is_ambulance_caller = True
                else:
                    is_ambulance_caller = False
            except:
                is_ambulance_caller = False

            try:
                is_blood_caller = request.POST['is_blood_caller'].strip()
                if is_blood_caller == "on":
                    is_blood_caller = True
                else:
                    is_blood_caller = False
            except:
                is_blood_caller = False

            try:
                is_disease_caller = request.POST['is_disease_caller'].strip()
                if is_disease_caller == "on":
                    is_disease_caller = True
                else:
                    is_disease_caller = False
            except:
                is_disease_caller = False

            try:
                is_physio_rehab_caller = request.POST['is_physio_rehab_caller'].strip()
                if is_physio_rehab_caller == "on":
                    is_physio_rehab_caller = True
                else:
                    is_physio_rehab_caller = False
            except:
                is_physio_rehab_caller = False

            try:
                is_nurse_bureau_caller = request.POST['is_nurse_bureau_caller'].strip()
                if is_nurse_bureau_caller == "on":
                    is_nurse_bureau_caller = True
                else:
                    is_nurse_bureau_caller = False
            except:
                is_nurse_bureau_caller = False

            try:
                is_dietitian_caller = request.POST['is_dietitian_caller'].strip()
                if is_dietitian_caller == "on":
                    is_dietitian_caller = True
                else:
                    is_dietitian_caller = False
            except:
                is_dietitian_caller = False

            try:
                is_therapist_caller = request.POST['is_therapist_caller'].strip()
                if is_therapist_caller == "on":
                    is_therapist_caller = True
                else:
                    is_therapist_caller = False
            except:
                is_therapist_caller = False

            # try:
            #     is_live_doctor_caller = request.POST['is_live_doctor_caller'].strip()
            #     if is_live_doctor_caller == "on":
            #         is_live_doctor_caller = True
            #     else:
            #         is_live_doctor_caller = False
            # except:
            #     is_live_doctor_caller = False

            #-----Commented By Nishank on 14Nov 16 to make lastname non mandatory-----
            #if id_user == user_id and firstname and lastname and type_user and email_user:
            if id_user == user_id and firstname and type_user and email_user:
                if User.objects.filter(Q(email__iexact=email_user)).exclude(id=user_id):
                    messages.error(request, 'Email already exists')
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                if password_user:
                    user_update_data = User.objects.get(id=id_user)
                    user_update_data.set_password(password_user)
                    user_update_data.email = email_user
                    user_update_data.first_name = firstname
                    user_update_data.last_name = lastname
                    user_update_data.save()
                else:
                    User.objects.filter(id=id_user).update(first_name=firstname, last_name=lastname, email=email_user)
                reviewer_obj = UserManagement.objects.filter(user_id=id_user)

                if reviewer_obj[0].is_reviewer:
                    if doctor_reviewer_is is True or doctor_reviewer_is is False:
                        in_doctor_obj = Doctor.objects.filter(current_user_id=id_user)
                        in_organisation_obj = OrganisationName.objects.filter(current_user_id=id_user)
                        if in_doctor_obj or in_organisation_obj:
                            messages.error(request,
                                           "Reviewer Doctor/Organisation access right not changed, Already data attached")
                            reviewer_obj.update(is_doctor_reviewer=True)
                        else:
                            reviewer_obj.update(is_doctor_reviewer=doctor_reviewer_is)

                    if news_reviewer_is is True or news_reviewer_is is False:
                        in_news_object = NewsFeed.objects.filter(current_user_id=id_user)
                        if in_news_object:
                            messages.error(request,
                                           "Reviewer News access right not changed, Already data attached")
                            reviewer_obj.update(is_news_reviewer=True)
                        else:
                            reviewer_obj.update(is_news_reviewer=news_reviewer_is)

                    if service_reviewer_is is True or service_reviewer_is is False:
                        in_service_plan_object = ServicePlan.objects.filter(current_user_id=id_user)
                        in_service_provider_object = ServiceProvider.objects.filter(current_user_id=id_user)
                        if in_service_plan_object or in_service_provider_object :
                            messages.error(request,
                                           "Reviewer Service access right not changed, Already data attached")
                            reviewer_obj.update(is_service_reviewer=True)
                        else:
                            reviewer_obj.update(is_service_reviewer=service_reviewer_is)
                       # Added By Vishnu
                    if path_reviewer_is is True or path_reviewer_is is False:
                        in_path_object = Labs.objects.filter(current_user_id=id_user)
                        if in_path_object:
                            messages.error(request,
                                           "Reviewer Service access right not changed, Already data attached")
                            reviewer_obj.update(is_path_reviewer=True)
                        else:
                            reviewer_obj.update(is_path_reviewer=path_reviewer_is)

                    if phar_reviewer_is is True or phar_reviewer_is is False:
                        in_pharmacy_object = MedicalPharmacyStore.objects.filter(current_user_id=id_user)
                        if in_pharmacy_object:
                            messages.error(request,
                                           "Reviewer Service access right not changed, Already data attached")
                            reviewer_obj.update(is_phar_reviewer=True)
                        else:
                            reviewer_obj.update(is_phar_reviewer=phar_reviewer_is)

                    if blood_reviewer_is is True or blood_reviewer_is is False:
                        in_bloodbank_object = BloodBank.objects.filter(current_user_id=id_user)
                        if in_bloodbank_object :
                            messages.error(request,
                                           "Reviewer Service access right not changed, Already data attached")
                            reviewer_obj.update(is_blood_reviewer=True)
                        else:

                            reviewer_obj.update(is_blood_reviewer=blood_reviewer_is)

                    if disease_reviewer_is is True or disease_reviewer_is is False:
                        in_disease_object = Disease.objects.filter(current_user_id=id_user)
                        if in_disease_object:
                            messages.error(request,
                                           "Reviewer Service access right not changed, Already data attached")
                            reviewer_obj.update(is_disease_reviewer=True)
                        else:
                            reviewer_obj.update(is_disease_reviewer=disease_reviewer_is)

                    if ambu_reviewer_is is True or ambu_reviewer_is is False:
                        in_ambulance_object = Ambulance.objects.filter(current_user_id=id_user)
                        if in_ambulance_object:
                            messages.error(request,
                                           "Reviewer Service access right not changed, Already data attached")
                            reviewer_obj.update(is_ambulance_reviewer=True)
                        else:
                            reviewer_obj.update(is_ambulance_reviewer=ambu_reviewer_is)

                    if is_physio_rehab_reviewer is True or is_physio_rehab_reviewer is False:
                        in_rehab_object = RehabCenter.objects.filter(current_user_id=id_user)
                        if in_rehab_object:
                            messages.error(request,
                                           "Reviewer Service access right not changed, Already data attached")
                            reviewer_obj.update(is_physio_rehab_reviewer=True)
                        else:
                            reviewer_obj.update(is_physio_rehab_reviewer=is_physio_rehab_reviewer)

                    if is_nurse_bureau_reviewer is True or is_nurse_bureau_reviewer is False:
                        in_nurse_bureau_object = Nurse_Bureau.objects.filter(current_user_id=id_user)
                        if in_nurse_bureau_object:
                            messages.error(request,
                                           "Reviewer Service access right not changed, Already data attached")
                            reviewer_obj.update(is_nurse_bureau_reviewer=True)
                        else:
                            reviewer_obj.update(is_nurse_bureau_reviewer=is_nurse_bureau_reviewer)

                    if is_dietitian_reviewer is True or is_dietitian_reviewer is False:
                        in_dietitian_object = Dietitian.objects.filter(current_user_id=id_user)
                        if in_dietitian_object:
                            messages.error(request,"Reviewer Service access right not changed, Already data attached")
                            reviewer_obj.update(is_dietitian_reviewer=True)
                        else:
                            reviewer_obj.update(is_dietitian_reviewer=is_dietitian_reviewer)

                    if is_therapist_reviewer is True or is_therapist_reviewer is False:
                        in_therapist_object = Therapist.objects.filter(current_user_id=id_user)
                        if in_therapist_object:
                            messages.error(request,"Reviewer Service access right not changed, Already data attached")
                            reviewer_obj.update(is_therapist_reviewer=True)
                        else:
                            reviewer_obj.update(is_therapist_reviewer=is_therapist_reviewer)

                    # if is_live_doctor_reviewer is True or is_live_doctor_reviewer is False:
                    #     in_live_doctor_obj = Live_Doctor.objects.filter(current_user_id=id_user)
                    #     if in_live_doctor_obj:
                    #         messages.error(request,
                    #                        "Reviewer Live Doctor access right not changed, Already data attached")
                    #         reviewer_obj.update(is_live_doctor_reviewer=True)
                    #     else:
                    #         reviewer_obj.update(is_live_doctor_reviewer=is_live_doctor_reviewer)

                    messages.success(request, type_user + ' successfully updated')
                    return HttpResponseRedirect(reverse('user-management'))

                #Added by Nishank 26-9-16
                if reviewer_obj[0].is_caller:
                    if is_doctor_caller is True or is_doctor_caller is False:
                        in_doctor_obj = Doctor.objects.filter(current_user_id=id_user)
                        in_organization_obj = OrganisationName.objects.filter(current_user_id=id_user)
                        if in_doctor_obj or in_organization_obj:

                            messages.error(request,
                                           "Caller Doctor/Organisation access right not changed, Already data attached")
                            reviewer_obj.update(is_doctor_caller=True)
                        else:
                            reviewer_obj.update(is_doctor_caller=is_doctor_caller)

                    if is_phar_caller is True or is_phar_caller is False:
                        in_news_object = MedicalPharmacyStore.objects.filter(current_user_id=id_user)
                        if in_news_object:
                            messages.error(request,
                                           "Caller Pharmacy access right not changed, Already data attached")
                            reviewer_obj.update(is_phar_caller=True)
                        else:
                            reviewer_obj.update(is_phar_caller=is_phar_caller)

                    if is_path_caller is True or is_path_caller is False:
                        in_news_object = Labs.objects.filter(current_user_id=id_user)
                        if in_news_object:
                            messages.error(request, "Caller Path Lab access right not changed, Already data attached")
                            reviewer_obj.update(is_path_caller=True)
                        else:
                            reviewer_obj.update(is_path_caller=is_path_caller)

                    if is_ambulance_caller is True or is_ambulance_caller is False:
                        in_news_object = Ambulance.objects.filter(current_user_id=id_user)
                        if in_news_object:
                            messages.error(request,"Caller Ambulance access right not changed, Already data attached")
                            reviewer_obj.update(is_ambulance_caller=True)
                        else:
                            reviewer_obj.update(is_ambulance_caller=is_ambulance_caller)

                    if is_blood_caller is True or is_blood_caller is False:
                        in_news_object = BloodBank.objects.filter(current_user_id=id_user)
                        if in_news_object:
                            messages.error(request,
                                           "Caller Blood Bank Service access right not changed, Already data attached")
                            reviewer_obj.update(is_blood_caller=True)
                        else:
                            reviewer_obj.update(is_blood_caller=is_blood_caller)

                    if is_disease_caller is True or is_disease_caller is False:
                        in_news_object = Disease.objects.filter(current_user_id=id_user)
                        if in_news_object:
                            messages.error(request, "Caller Disease access right not changed, Already data attached")
                            reviewer_obj.update(is_disease_caller=True)
                        else:
                            reviewer_obj.update(is_disease_caller=is_disease_caller)

                    if is_physio_rehab_caller is True or is_physio_rehab_caller is False:
                        in_rehab_object = RehabCenter.objects.filter(current_user_id=id_user)
                        if in_rehab_object:
                            messages.error(request,
                                           "Caller Rehab / Physio access right not changed, Already data attached")
                            reviewer_obj.update(is_physio_rehab_caller=True)
                        else:
                            reviewer_obj.update(is_physio_rehab_caller=is_physio_rehab_caller)

                    if is_nurse_bureau_caller is True or is_nurse_bureau_caller is False:
                        in_nurse_bureau_object = Nurse_Bureau.objects.filter(current_user_id=id_user)
                        if in_nurse_bureau_object:
                            messages.error(request,
                                           "Caller Nurse Bureau  access right not changed, Already data attached")
                            reviewer_obj.update(is_nurse_bureau_caller=True)
                        else:
                            reviewer_obj.update(is_nurse_bureau_caller=is_nurse_bureau_caller)

                    if is_dietitian_caller is True or is_dietitian_caller is False:
                        in_dietitian_object = Dietitian.objects.filter(current_user_id=id_user)
                        if in_dietitian_object:
                            messages.error(request,
                                           "Caller Dietitian access right not changed, Already data attached")
                            reviewer_obj.update(is_dietitian_caller=True)
                        else:
                            reviewer_obj.update(is_dietitian_caller=is_dietitian_caller)

                    if is_therapist_caller is True or is_therapist_caller is False:
                        in_therapist_object = Therapist.objects.filter(current_user_id=id_user)
                        if in_therapist_object:
                            messages.error(request, "Caller therapist access right not changed, Already data attached")
                            reviewer_obj.update(is_therapist_caller=True)
                        else:
                            reviewer_obj.update(is_therapist_caller=is_therapist_caller)

                    # if is_live_doctor_caller is True or is_live_doctor_caller is False:
                    #     in_live_doctor_obj = Live_Doctor.objects.filter(current_user_id=id_user)
                    #     if in_live_doctor_obj:
                    #         messages.error(request,
                    #                        "Caller Live Doctor access right not changed, Already data attached")
                    #         reviewer_obj.update(is_live_doctor_caller=True)
                    #     else:
                    #         reviewer_obj.update(is_live_doctor_caller=is_live_doctor_caller)

                    messages.success(request, type_user + ' successfully updated')
                    return HttpResponseRedirect(reverse('user-management'))
            else:
                messages.error(request, 'Please do with correct information with all fields')
        else:
            messages.error(request, 'Other method is not allowed')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(reverse('user-management'))

""" Doctor Functions Here """
####################################################################
# Name - doctor_listing                                            #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def doctor_listing(request):
    try:
        zone_filter = False
        zone_location_filter = False
        category_filter = False
        status_data = None
        try:
            zone_data = request.GET['zone'].strip()
        except:
            zone_data = None
        if zone_data:
            zone_filter = int(zone_data)
            zone_location_obj = ZoneLocation.objects.filter(zone_id=zone_data,delete=False)
        else:
            zone_location_obj = []
        try:
            zone_location_data = request.GET['zone_location'].strip()
        except:
            zone_location_data = None
        if zone_location_data:
            zone_location_filter = int(zone_location_data)
        try:
            category_id = request.GET['category']
            if category_id:
                category_filter = int(category_id)
        except:
            category_id = None
        try:
            status_data = request.GET['status_data'].strip()
            if status_data == '':
                status_data = None
        except:
            status_data = None


        assign_id = UserManagement.objects.get(user_id=request.user.id)
        user_data = User.objects.all()
        category_obj = Category.objects.filter(delete=False).order_by('name')
        zone_obj = Zone.objects.filter(delete=False).order_by('name')
        if assign_id.is_caller is True:
            telecaller_id = request.user.id
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
        else:
            reviewer_id = 0
        if telecaller_id or reviewer_id:
            if zone_data and category_id:
                if zone_location_data:
                    if status_data:
                        if status_data == 'active':
                            doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=False),
                                                               Q(category_id=category_id), Q(zone=zone_data),
                                                               Q(zone_location=zone_location_data)).order_by('name')
                        if status_data == 'inactive':
                            doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=True),
                                                               Q(category_id=category_id), Q(zone=zone_data),
                                                               Q(zone_location=zone_location_data)).order_by('name')
                    else:
                        doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id),
                                                           Q(category_id=category_id), Q(zone=zone_data),
                                                           Q(zone_location=zone_location_data)).order_by('name')
                else:
                    if status_data:
                        if status_data == 'active':
                            doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=False),
                                                               Q(category_id=category_id), Q(zone=zone_data)).order_by('name')
                        if status_data == 'inactive':
                            doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=True),
                                                               Q(category_id=category_id), Q(zone=zone_data)).order_by('name')

                    else:
                        doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id),
                                                       Q(category_id=category_id), Q(zone=zone_data)).order_by('name')
                if len(doctor_obj) == 0:
                    messages.error(request, "No Doctor found")
                    return render(request, 'data_management/doctor_data/doctor_listing.html',
                                  {'tab_listing': 'doctor_listing', 'category_obj': category_obj,
                                   'category_filter': category_filter, 'zone_obj': zone_obj,
                                   'zone_filter': zone_filter, 'zone_location_filter': zone_location_filter,
                                   'zone_location_obj': zone_location_obj,'status_data':status_data})
                paginator = Paginator(doctor_obj, 50)
                page = request.GET.get('page')
                try:
                    doctor_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/doctor_data/doctor_listing.html',
                              dict(doctor=doctor_obj, tab_listing='doctor_listing', category_obj=category_obj,
                                   category_filter=category_filter, zone_obj=zone_obj, user_data=user_data,
                                   zone_filter=zone_filter, zone_location_obj=zone_location_obj,
                                   zone_location_filter=zone_location_filter,status_data=status_data))
            elif zone_data:
                if zone_location_data:
                    if status_data:
                        if status_data == 'active':
                            doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=False),
                                                               Q(zone=zone_data),
                                                               Q(zone_location=zone_location_data)).order_by('name')
                        if status_data == 'inactive':
                            doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=True),
                                                               Q(zone=zone_data),
                                                               Q(zone_location=zone_location_data)).order_by('name')
                    else:
                        doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id),
                                                           Q(zone=zone_data),
                                                           Q(zone_location=zone_location_data)).order_by('name')
                else:
                    if status_data:
                        if status_data == 'active':
                            doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=False),
                                                               Q(zone=zone_data)).order_by('name')
                        if status_data == 'inactive':
                            doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=True),
                                                               Q(zone=zone_data)).order_by('name')
                    else:
                        doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id),
                                                           Q(zone=zone_data)).order_by('name')
                paginator = Paginator(doctor_obj, 50)
                page = request.GET.get('page')
                try:
                    doctor_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/doctor_data/doctor_listing.html',
                              dict(doctor=doctor_obj, tab_listing='doctor_listing', category_obj=category_obj,
                                   category_filter=category_filter, zone_obj=zone_obj, user_data=user_data,
                                   zone_filter=zone_filter, zone_location_obj=zone_location_obj,
                                   zone_location_filter=zone_location_filter,status_data=status_data))
            elif category_id:
                if status_data:
                    if status_data == 'active':
                        doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=False),
                                                           Q(category_id=category_id)).order_by('name')
                    if status_data == 'inactive':
                        doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=True),
                                                           Q(category_id=category_id)).order_by('name')
                else:
                    doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id),
                                                   Q(category_id=category_id)).order_by('name')

            elif status_data:
                if status_data == 'active':
                    doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=False)).order_by('name')
                if status_data == 'inactive':
                    doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id), Q(is_disable=True)).order_by('name')

            elif telecaller_id:
                doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id)).order_by(
                    'name')
            elif reviewer_id:
                doctor_obj = Doctor.objects.filter(Q(current_user_id=request.user.id)).order_by(
                    'name')
            paginator = Paginator(doctor_obj, 50)
            page = request.GET.get('page')
            try:
                doctor_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_obj = paginator.page(paginator.num_pages)
            return render(request, 'data_management/doctor_data/doctor_listing.html',
                          dict(doctor=doctor_obj, tab_listing='doctor_listing', category_obj=category_obj,
                               category_filter=category_filter, zone_obj=zone_obj, user_data=user_data,
                               zone_filter=zone_filter, zone_location_obj=zone_location_obj,
                               zone_location_filter=zone_location_filter,status_data=status_data))
        else:
            return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        raise Http404

""" For Publisher """
####################################################################
# Name - doctor_publisher_listing                                  #
# Owner - Visnu Badal                                              #
####################################################################
# @login_required(login_url='/')
# @csrf_exempt
# @require_GET
# def doctor_publisher_listing(request):
#     try:
#         try:
#             stage_id =  request.GET['stage_id']
#         except:
#             stage_id = None
#         try:
#             search_name =  request.GET['search_name']
#         except:
#             search_name = None
#         assign_id = UserManagement.objects.get(user_id=request.user.id)
#         stage_data_obj = Stage.objects.all()[3:5]
#         category_data = Category.objects.all().order_by('name')
#         category_filter = False
#         try:
#             category_id = request.GET['category']
#         except:
#             category_id = None
#         if assign_id.is_publisher is True:
#             publisher_id = request.user.id
#         else:
#             publisher_id = 0
#
#         if publisher_id and stage_id :
#             doctor_obj = Doctor.objects.filter(stage_id=int(stage_id), current_user_id=request.user.id,is_disable=False).order_by('name')
#         elif publisher_id and search_name :
#             doctor_obj = Doctor.objects.filter(name__icontains=search_name, current_user_id=request.user.id,is_disable=False).order_by('name')
#         elif publisher_id != None and stage_id == None and search_name == None:
#             if category_id:
#                 doctor_obj = Doctor.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
#                 category_filter = int(category_id)
#             else:
#                 doctor_obj = Doctor.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('name')
#             if len(doctor_obj) == 0:
#                 messages.error(request, "No Doctor found")
#                 return render(request, 'publisher/doctor/doctor_listing_publisher.html',
#                               {'tab_listing': 'doctor_listing', 'tab': 'publish_doctor_data',
#                                'stage_data': stage_data_obj,
#                                'category_obj': category_data, 'category_filter': category_filter,'category':category_id,
#                                'stage_id':stage_id,'search_name':search_name})
#
#         paginator = Paginator(doctor_obj, 50)
#         page = request.GET.get('page')
#         try:
#             doctor_obj = paginator.page(page)
#         except PageNotAnInteger:
#             # If page is not an integer, deliver first page.
#             doctor_obj = paginator.page(1)
#         except EmptyPage:
#             # If page is out of range (e.g. 9999), deliver last page of results.
#             doctor_obj = paginator.page(paginator.num_pages)
#         return render(request, 'publisher/doctor/doctor_listing_publisher.html',
#                       dict(doctor=doctor_obj, tab_listing='doctor_listing', tab='publish_doctor_data',
#                            stage_data=stage_data_obj,
#                            category_obj=category_data, category_filter=category_filter,category=category_id,
#                            stage_id=stage_id,search_name=search_name))
#         # else:
#         #     return HttpResponseRedirect(reverse('users-logout'))
#     except Exception as e:
#         #print e
#         raise Http404
@login_required(login_url='/')
@csrf_exempt
@require_GET
def doctor_publisher_listing(request):
    try:
        zone_filter = False
        stage_filter = False
        user_filter = False
        zone_location_filter_length = False
        category_filter = False
        stage_data = Stage.objects.all()[3:5]
        user_data = User.objects.all().order_by('username')
        zone_obj = Zone.objects.filter(delete=False).order_by('name')
        zone_location_obj = {}
        category_obj = Category.objects.filter(delete=False).order_by('name')
        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'filter':
            zone_data = request.GET['zone'].strip()
            if zone_data:
                zone_filter = zone_data
            try:
                zone_location_data = request.GET['zone_location'].strip()
            except:
                zone_location_data = 0
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = 0
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = 0
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            if zone_location_data:
                zone_location_filter_length = int(zone_location_data)
                zone_location_obj = ZoneLocation.objects.all()

            category_data = request.GET['category'].strip()
            if category_data:
                category_filter = int(category_data)
            if zone_data and category_data:
                # if zone_location_data and stage_id_data and user_id_data:
                #     doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                #                                             Q(zone_location=zone_location_data),
                #                                             Q(category=category_data), Q(stage=stage_id_data),
                #                                             Q(current_user_id =request.user.id)).order_by('name')
                #     # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                #     paginator = Paginator(doctor_data_obj, 100)
                #     page = request.GET.get('page')
                #     try:
                #         doctor_data_obj = paginator.page(page)
                #     except PageNotAnInteger:
                #         # If page is not an integer, deliver first page.
                #         doctor_data_obj = paginator.page(1)
                #     except EmptyPage:
                #         # If page is out of range (e.g. 9999), deliver last page of results.
                #         doctor_data_obj = paginator.page(paginator.num_pages)
                #     return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                #                   {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                #                    'zone_obj': zone_obj,
                #                    'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                #                    'zone_filter': zone_filter,
                #                    'zone_location_filter_length': zone_location_filter_length,
                #                    'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                #                    'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                #                    'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                #                    'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })


                if zone_location_data and stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(zone_location=zone_location_data),
                                                            Q(category=category_data), Q(stage=stage_id_data),
                                                            Q(current_user_id =request.user.id),
                                                            Q(is_disable=False)).order_by('name')
                # elif zone_location_data and user_id_data:
                #     doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                #                                             Q(zone_location=zone_location_data),
                #                                             Q(category=category_data),
                #                                             Q(current_user=user_id_data)).order_by('name')
                # elif stage_id_data and user_id_data:
                #     doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                #                                             Q(category=category_data),
                #                                             Q(current_user=user_id_data),
                #                                             Q(stage=stage_id_data)).order_by(
                #         'name')
                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(doctor_data_obj, 50)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(category=category_data), Q(stage=stage_id_data),
                                                            Q(current_user_id =request.user.id),
                                                            Q(is_disable=False)).order_by(
                        'name')
                # elif user_id_data:
                #     doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data),
                #                                             Q(category=category_data),
                #                                             Q(current_user=user_id_data)).order_by(
                #         'name')
                elif zone_location_data:
                    doctor_data_obj = Doctor.objects.filter(zone=zone_data, category=category_data, zone_location=zone_location_data,
                                                            current_user_id=request.user.id,is_disable=False).order_by('name')
                else:
                    doctor_data_obj = Doctor.objects.filter(zone=zone_data, category=category_data,current_user_id =request.user.id,is_disable=False).order_by('name')
                # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                paginator = Paginator(doctor_data_obj, 50)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })
            elif category_data:
                # if stage_id_data and user_id_data:
                #     doctor_data_obj = Doctor.objects.filter(Q(category=category_data), Q(current_user=user_id_data),
                #                                             Q(stage=stage_id_data)).order_by('name')
                #
                #     # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                #     paginator = Paginator(doctor_data_obj, 100)
                #     page = request.GET.get('page')
                #     try:
                #         doctor_data_obj = paginator.page(page)
                #     except PageNotAnInteger:
                #         # If page is not an integer, deliver first page.
                #         doctor_data_obj = paginator.page(1)
                #     except EmptyPage:
                #         # If page is out of range (e.g. 9999), deliver last page of results.
                #         doctor_data_obj = paginator.page(paginator.num_pages)
                #     return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                #                   {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                #                    'zone_obj': zone_obj,
                #                    'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                #                    'zone_filter': zone_filter,
                #                    'zone_location_filter_length': zone_location_filter_length,
                #                    'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                #                    'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                #                    'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                #                    'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                if stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(category=category_data), Q(stage=stage_id_data),Q(current_user_id =request.user.id),
                                                            Q(is_disable=False)).order_by('name')
                # elif user_id_data:
                #     doctor_data_obj = Doctor.objects.filter(Q(category=category_data),
                #                                             Q(current_user=user_id_data)).order_by('name')
                else:
                    doctor_data_obj = Doctor.objects.filter(category=category_data,current_user_id =request.user.id,is_disable=False).order_by('name')

                # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                paginator = Paginator(doctor_data_obj, 50)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter,
                               'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif zone_data and zone_location_data:
                # if stage_id_data and user_id_data:
                #     doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(zone_location=zone_location_data),
                #                                             Q(current_user=user_id_data),
                #                                             Q(stage=stage_id_data)).order_by(
                #         'name')
                #     # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                #     paginator = Paginator(doctor_data_obj, 100)
                #     page = request.GET.get('page')
                #     try:
                #         doctor_data_obj = paginator.page(page)
                #     except PageNotAnInteger:
                #         # If page is not an integer, deliver first page.
                #         doctor_data_obj = paginator.page(1)
                #     except EmptyPage:
                #         # If page is out of range (e.g. 9999), deliver last page of results.
                #         doctor_data_obj = paginator.page(paginator.num_pages)
                #     return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                #                   {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                #                    'zone_obj': zone_obj,
                #                    'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                #                    'zone_filter': zone_filter,
                #                    'zone_location_filter_length': zone_location_filter_length,
                #                    'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                #                    'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                #                    'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                #                    'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                if stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(zone_location=zone_location_data),
                                                            Q(stage=stage_id_data),Q(current_user_id =request.user.id),
                                                            Q(is_disable=False)).order_by('name')
                # elif user_id_data:
                #     doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(zone_location=zone_location_data),
                #                                             Q(current_user=user_id_data)).order_by('name')
                elif category_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(zone_location=zone_location_data),
                                                            Q(category=category_data),Q(current_user_id =request.user.id),
                                                            Q(is_disable=False)).order_by('name')

                else:
                    doctor_data_obj = Doctor.objects.filter(zone=zone_data, zone_location=zone_location_data,current_user_id =request.user.id,
                                                            is_disable=False).order_by('name')
                # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                paginator = Paginator(doctor_data_obj, 50)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                               'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif zone_data:
                # if stage_id_data and user_id_data:
                #     doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(stage=stage_id_data),
                #                                             Q(current_user=user_id_data)).order_by('name')
                #     # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                #     paginator = Paginator(doctor_data_obj, 100)
                #     page = request.GET.get('page')
                #     try:
                #         doctor_data_obj = paginator.page(page)
                #     except PageNotAnInteger:
                #         # If page is not an integer, deliver first page.
                #         doctor_data_obj = paginator.page(1)
                #     except EmptyPage:
                #         # If page is out of range (e.g. 9999), deliver last page of results.
                #         doctor_data_obj = paginator.page(paginator.num_pages)
                #     return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                #                   {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                #                    'zone_obj': zone_obj,
                #                    'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                #                    'zone_filter': zone_filter,
                #                    'zone_location_filter_length': zone_location_filter_length,
                #                    'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                #                    'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                #                    'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                #                    'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                if stage_id_data:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(stage=stage_id_data),Q(current_user_id =request.user.id),
                                                            Q(is_disable=False)).order_by('name')
                # elif user_id_data:
                #     doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data), Q(current_user=user_id_data)).order_by(
                #         'name')
                else:
                    doctor_data_obj = Doctor.objects.filter(Q(zone=zone_data,current_user_id=request.user.id,is_disable=False)).order_by('name')
                # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                paginator = Paginator(doctor_data_obj, 50)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                               'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            # elif stage_id_data or user_id_data:
            #     if stage_id_data and user_id_data:
            #         doctor_data_obj = Doctor.objects.filter(Q(stage=stage_id_data),
            #                                                 Q(current_user=user_id_data)).order_by('name')
            #         # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
            #         paginator = Paginator(doctor_data_obj, 100)
            #         page = request.GET.get('page')
            #         try:
            #             doctor_data_obj = paginator.page(page)
            #         except PageNotAnInteger:
            #             # If page is not an integer, deliver first page.
            #             doctor_data_obj = paginator.page(1)
            #         except EmptyPage:
            #             # If page is out of range (e.g. 9999), deliver last page of results.
            #             doctor_data_obj = paginator.page(paginator.num_pages)
            #         return render(request, 'publisher/doctor/doctor_listing_publisher.html',
            #                       {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
            #                        'zone_obj': zone_obj,
            #                        'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
            #                        'zone_filter': zone_filter,
            #                        'zone_location_filter_length': zone_location_filter_length,
            #                        'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
            #                        'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
            #                        'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
            #                        'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })
            #
            elif stage_id_data:
                doctor_data_obj = Doctor.objects.filter(Q(stage=stage_id_data,current_user_id =request.user.id,is_disable=False)).order_by('name')
            #     elif user_id_data:
            #         doctor_data_obj = Doctor.objects.filter(Q(current_user=user_id_data)).order_by('name')
            #     else:
            #         doctor_data_obj = Doctor.objects.all().order_by('name')
            else:
                doctor_data_obj = Doctor.objects.filter(current_user_id =request.user.id,is_disable=False).order_by('name')

            # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
            paginator = Paginator(doctor_data_obj, 50)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                           'zone_obj': zone_obj,
                           'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                           'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                           'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                           'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                           'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                           'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

        try:
            stage_id =  request.GET['stage_id']
        except:
            stage_id = None
        try:
            search_name =  request.GET['search_name']
        except:
            search_name = None
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0

        if publisher_id and stage_id :
            doctor_obj = Doctor.objects.filter(stage_id=int(stage_id), current_user_id=request.user.id,is_disable=False).order_by('name')
        elif publisher_id and search_name :
            doctor_obj = Doctor.objects.filter(name__icontains=search_name, current_user_id=request.user.id,is_disable=False).order_by('name')
        elif publisher_id != None and stage_id == None and search_name == None:
            if category_id:
                doctor_obj = Doctor.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                category_filter = int(category_id)
            else:
                doctor_obj = Doctor.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('name')
            if len(doctor_obj) == 0:
                messages.error(request, "No Doctor found")
                return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                              {'tab_listing': 'doctor_listing', 'tab': 'publish_doctor_data',
                               'stage_data': stage_data_obj,
                               'category_obj': category_data, 'category_filter': category_filter,'category':category_id,
                               'stage_id':stage_id,'search_name':search_name})

        paginator = Paginator(doctor_obj, 50)
        page = request.GET.get('page')
        try:
            doctor_obj = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            doctor_obj = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            doctor_obj = paginator.page(paginator.num_pages)
        return render(request, 'publisher/doctor/doctor_listing_publisher.html',
                      dict(doctor_data_obj=doctor_obj, tab_listing='doctor_listing', tab='publish_doctor_data',
                           stage_data=stage_data_obj,zone_location_obj=zone_location_obj,zone_obj= zone_obj,
                           category_obj=category_data, category_filter=category_filter,category=category_id,
                           stage_id=stage_id,search_name=search_name))
        # else:
        #     return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - doctor_publisher_listing                                  #
# Owner - Visnu Badal                                              #
####################################################################
# @login_required(login_url='/')
# @csrf_exempt
# @require_GET
# def organisation_publisher_listing(request):
#     try:
#         try:
#             search_name = request.GET['search_name']
#         except:
#             search_name = None
#         try:
#             stage_id = request.GET['stage_id']
#         except:
#             stage_id = None
#         assign_id = UserManagement.objects.get(user_id=request.user.id)
#         stage_data_obj = Stage.objects.all()[3:5]
#         category_data = Category.objects.all().order_by('name')
#         category_filter = False
#         try:
#             category_id = request.GET['category']
#         except:
#             category_id = None
#         if assign_id.is_publisher is True:
#             publisher_id = request.user.id
#         else:
#             publisher_id = 0
#         if stage_id and publisher_id:
#             organisation_obj = OrganisationName.objects.filter(stage_id=int(stage_id), current_user_id=request.user.id,is_disable=False).order_by('name')
#         elif search_name and publisher_id:
#             organisation_obj = OrganisationName.objects.filter(name__icontains=search_name, current_user_id=request.user.id,is_disable=False).order_by('name')
#         elif publisher_id != None and stage_id == None and search_name == None :
#             if category_id:
#                 organisation_obj = OrganisationName.objects.filter(Q(stage_id__gte=4),
#                                                                    Q(category_id=category_id),
#                                                                    Q(current_user_id=request.user.id),Q(is_disable=False)).order_by('name')
#                 category_filter = int(category_id)
#             else:
#                 organisation_obj = OrganisationName.objects.filter(Q(stage_id__gte=4),
#                                                                    Q(current_user_id=request.user.id),Q(is_disable=False)).order_by('name')
#         if len(organisation_obj) == 0:
#             messages.error(request, "No organization found")
#             return render(request, 'publisher/organisation/organisation_listing_publisher.html',
#                           {'tab_listing': 'organisation-listing', 'tab': 'publish_organisation_data',
#                            'stage_data': stage_data_obj,
#                            'category_obj': category_data, 'category_filter': category_filter,'stage_id':stage_id,
#                            'search_name':search_name})
#         else:
#             paginator = Paginator(organisation_obj, 50)
#             page = request.GET.get('page')
#             try:
#                 organisation_obj = paginator.page(page)
#             except PageNotAnInteger:
#                 # If page is not an integer, deliver first page.
#                 organisation_obj = paginator.page(1)
#             except EmptyPage:
#                 # If page is out of range (e.g. 9999), deliver last page of results.
#                 organisation_obj = paginator.page(paginator.num_pages)
#             return render(request, 'publisher/organisation/organisation_listing_publisher.html',
#                           dict(organisation=organisation_obj, tab_listing='organisation-listing',
#                                tab='publish_organisation_data',
#                                stage_data=stage_data_obj,
#                                category_obj=category_data, category_filter=category_filter,stage_id=stage_id,
#                                search_name=search_name))
#         # else:
#         #     return HttpResponseRedirect(reverse('users-logout'))
#     except Exception as e:
#         raise Http404
@login_required(login_url='/')
@csrf_exempt
@require_GET
def organisation_publisher_listing(request):
    try:
        stage_data = Stage.objects.all()[3:5]
        state_data_obj = State.objects.all().order_by('name')
        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'organisation_filter':
            stage_filter = False
            user_filter = False
            state_filter = False
            city_filter = False
            locality_filter = False
            user_data= None
            try:
                stage_id_data = request.GET['stage_id'].strip()
            except:
                stage_id_data = None
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = None
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:

                if city_data and locality_data:
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')
                    if stage_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                Q(locality=locality_data),
                                                                                Q(stage=stage_id_data),
                                                                                Q(current_user_id=request.user.id),Q(is_disable=False)).order_by('name')
                    else:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                Q(locality=locality_data),
                                                                                Q(current_user_id=request.user.id),Q(is_disable=False)).order_by(
                            'name')

                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(organisation_data_obj, 50)
                    page = request.GET.get('page')
                    try:
                        organisation_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        organisation_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        organisation_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'publisher/organisation/organisation_listing_publisher.html',
                                  {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                                   'organisation': organisation_data_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter, 'user_data': user_data, 'user_filter': user_filter,
                                   'stage_filter': stage_filter,
                                   'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                                    'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })
                elif city_data:
                    if stage_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                Q(stage=stage_id_data),
                                                                                Q(current_user_id=request.user.id),Q(is_disable=False)).order_by(
                            'name')
                    else:
                        organisation_data_obj = OrganisationName.objects.filter(state=state_data,
                                                                                city=city_data,
                                                                                is_live_org=False,
                                                                                current_user_id=request.user.id,is_disable=False).order_by('name')

                    paginator = Paginator(organisation_data_obj, 50)
                    page = request.GET.get('page')
                    try:
                        organisation_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        organisation_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        organisation_data_obj = paginator.page(paginator.num_pages)

                    return render(request, 'publisher/organisation/organisation_listing_publisher.html',
                                  {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                                   'organisation': organisation_data_obj, 'state_data_obj': state_data_obj,
                                   'state_filter': state_filter, 'locality_filter': locality_filter,
                                   'city_filter': city_filter, 'city_obj': city_obj, 'user_data': user_data,
                                   'user_filter': user_filter,
                                   'filter_name': filter_name, 'state_data': state_data, 'city_data': city_data,
                                   'user_id_data': user_id_data, 'locality_data': locality_data,
                                   'stage_id_data': stage_id_data})
                else:
                    if stage_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(is_live_org=False),
                                                                                Q(stage=stage_id_data,
                                                                                  current_user_id=request.user.id),Q(is_disable=False)).order_by(
                            'name')
                    else:

                        organisation_data_obj = OrganisationName.objects.filter(state=state_data,is_live_org=False,current_user_id=request.user.id,is_disable=False).order_by('name')
                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(organisation_data_obj, 50)
                    page = request.GET.get('page')
                    try:
                        organisation_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        organisation_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        organisation_data_obj = paginator.page(paginator.num_pages)

                    return render(request, 'publisher/organisation/organisation_listing_publisher.html',
                                  {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                                   'organisation': organisation_data_obj, 'state_data_obj': state_data_obj,
                                   'state_filter': state_filter, 'locality_filter': locality_filter,
                                   'city_filter': city_filter, 'city_obj': city_obj, 'user_data': user_data,
                                   'user_filter': user_filter,
                                       'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                                       'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })
            #only stage
            if stage_id_data:
                organisation_data_obj = OrganisationName.objects.filter(Q(stage=stage_id_data,is_live_org=False,current_user_id=request.user.id,is_disable=False)).order_by('name')
            else:
                organisation_data_obj = OrganisationName.objects.filter(current_user_id=request.user.id,is_live_org=False,is_disable=False).order_by('name')

            # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
            paginator = Paginator(organisation_data_obj, 50)
            page = request.GET.get('page')
            try:
                organisation_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                organisation_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                organisation_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/organisation/organisation_listing_publisher.html',
                          {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                           'organisation': organisation_data_obj, 'state_data_obj': state_data_obj,
                           'user_data': user_data, 'user_filter': user_filter,
                           'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                           'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })

        try:
            search_name = request.GET['search_name']
        except:
            search_name = None
        try:
            stage_id = request.GET['stage_id']
        except:
            stage_id = None
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if stage_id and publisher_id:
            organisation_obj = OrganisationName.objects.filter(stage_id=int(stage_id),is_live_org=False, current_user_id=request.user.id,is_disable=False).order_by('name')
        elif search_name and publisher_id:
            organisation_obj = OrganisationName.objects.filter(name__icontains=search_name,is_live_org=False, current_user_id=request.user.id,is_disable=False).order_by('name')
        elif publisher_id != None and stage_id == None and search_name == None :
            if category_id:
                organisation_obj = OrganisationName.objects.filter(Q(stage_id__gte=4),
                                                                   Q(category_id=category_id),
                                                                   Q(is_live_org=False),
                                                                   Q(current_user_id=request.user.id),Q(is_disable=False)).order_by('name')
                category_filter = int(category_id)
            else:
                organisation_obj = OrganisationName.objects.filter(Q(stage_id__gte=4),
                                                                   Q(current_user_id=request.user.id),
                                                                   Q(is_live_org=False),
                                                                   Q(is_disable=False)).order_by('name')
        if len(organisation_obj) == 0:
            messages.error(request, "No organization found")
            return render(request, 'publisher/organisation/organisation_listing_publisher.html',
                          {'tab_listing': 'organisation-listing', 'tab': 'publish_organisation_data',
                           'stage_data': stage_data,
                           'category_obj': category_data, 'category_filter': category_filter,'stage_id':stage_id,
                           'search_name':search_name})
        else:
            paginator = Paginator(organisation_obj, 50)
            page = request.GET.get('page')
            try:
                organisation_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                organisation_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                organisation_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/organisation/organisation_listing_publisher.html',
                          dict(organisation=organisation_obj, tab_listing='organisation-listing',
                               tab='publish_organisation_data',
                               stage_data=stage_data,state_data_obj=state_data_obj,
                               category_obj=category_data, category_filter=category_filter,stage_id=stage_id,
                               search_name=search_name,stage_id_data=None))
        # else:
        #     return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        raise Http404



# ####################################################################
# # Name - doctor_publisher_listing                                  #
# # Owner - Visnu Badal                                              #
# # Review by - ?                                                    #
# # For Publisher view                                               #
# ####################################################################
#
# @login_required(login_url='/')
# @csrf_exempt
# @require_GET
# def organisation_publisher_listing(request):
#     try:
#         assign_id = UserManagement.objects.get(user_id=request.user.id)
#         stage_data_obj = Stage.objects.all()[3:5]
#         category_data = Category.objects.all().order_by('name')
#         category_filter = False
#         try:
#             category_id = request.GET['category']
#         except:
#             category_id = None
#         if assign_id.is_publisher is True:
#             publisher_id = request.user.id
#         else:
#             publisher_id = 0
#         if publisher_id:
#             if category_id:
#                 doctor_obj = Doctor.objects.filter(Q(current_user_id=publisher_id),
#                                                    Q(category_id=category_id)).order_by('name')
#                 category_filter = int(category_id)
#             else:
#                 doctor_obj = Doctor.objects.filter(current_user_id=publisher_id).order_by('name')
#             if len(doctor_obj) == 0:
#                 messages.error(request, "No Doctor found")
#                 return render(request, 'publisher/doctor/doctor_listing_publisher.html',
#                               {'tab_listing': 'organisation-listing', 'tab': 'publish_organisation_data',
#                                'stage_data': stage_data_obj,
#                                'category_obj': category_data, 'category_filter': category_filter})
#
#             paginator = Paginator(doctor_obj, 50)
#             page = request.GET.get('page')
#             try:
#                 doctor_obj = paginator.page(page)
#             except PageNotAnInteger:
#                 # If page is not an integer, deliver first page.
#                 doctor_obj = paginator.page(1)
#             except EmptyPage:
#                 # If page is out of range (e.g. 9999), deliver last page of results.
#                 doctor_obj = paginator.page(paginator.num_pages)
#             return render(request, 'publisher/doctor/doctor_listing_publisher.html',
#                           dict(doctor=doctor_obj,
#                                tab_listing= 'organisation-listing',tab= 'publish_organisation_data',
#                                stage_data=stage_data_obj,
#                                category_obj=category_data, category_filter=category_filter))
#
#         else:
#             return HttpResponseRedirect(reverse('users-logout'))
#     except Exception as e:
#         # print e
#         raise Http404

####################################################################
# Name - lab_publisher_listing                                     #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def lab_publisher_listing(request):
    try:
        search_name = None
        try:
            search_name = request.GET['search_name']
        except:
            search_name = None
        search_data=None
        try:
            search_data = request.GET['search_data']
        except:
            search_data = None
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if search_data or search_name:
            if search_data and publisher_id:
                lab_obj = Labs.objects.filter(stage_id=int(search_data),current_user_id =request.user.id,is_disable=False).order_by('name')
            elif search_name and publisher_id:
                lab_obj = Labs.objects.filter(name__icontains=search_name, current_user_id=request.user.id,is_disable=False).order_by('name')
            else:
                lab_obj = []
            paginator = Paginator(lab_obj, 50)
            page = request.GET.get('page')
            try:
                lab_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/lab/lab_listing_publisher.html',
                          dict(lab=lab_obj, tab_listing='lab_listing', tab='publish_lab_data',
                               stage_data=stage_data_obj,
                               category_obj=category_data, category_filter=category_filter,
                               search_data=search_data,search_name=search_name))
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if publisher_id:
            if category_id:
                lab_obj = Labs.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                category_filter = int(category_id)
            else:
                lab_obj = Labs.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('name')
            if len(lab_obj) == 0:
                messages.error(request, "No lab found")
                return render(request, 'publisher/lab/lab_listing_publisher.html',
                              {'tab_listing': 'lab_listing', 'tab': 'publish_lab_data',
                               'stage_data': stage_data_obj,
                               'category_obj': category_data, 'category_filter': category_filter,
                               'search_data':search_data,'search_name':search_name})
            paginator = Paginator(lab_obj, 50)
            page = request.GET.get('page')
            try:
                lab_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/lab/lab_listing_publisher.html',
                          dict(lab=lab_obj, tab_listing='lab_listing', tab='publish_lab_data',
                               stage_data=stage_data_obj,
                               category_obj=category_data, category_filter=category_filter,
                               search_data=search_data,search_name=search_name))
        else:
            return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        #print e
        raise Http404








####################################################################
# Name - pharmacy_publisher_listing                                #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def pharmacy_publisher_listing(request):
    try:
        try:
            search_name = request.GET['search_name']
        except:
            search_name = None
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        try:
            stage_id = request.GET['stage_id']
        except:
            stage_id = None
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if stage_id and publisher_id:
            pharmacy_obj = MedicalPharmacyStore.objects.filter(Q(stage_id=int(stage_id)), Q(current_user_id=request.user.id), Q(is_disable=False)).order_by('name')

        elif search_name and publisher_id:
            pharmacy_obj = MedicalPharmacyStore.objects.filter(Q(name__icontains=search_name),
                                                               Q(current_user_id=request.user.id), Q(is_disable=False)).order_by('name')
        elif publisher_id != None and stage_id == None and search_name == None:
            if category_id:
                pharmacy_obj = MedicalPharmacyStore.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                category_filter = int(category_id)
            else:
                pharmacy_obj = MedicalPharmacyStore.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('name')
        if len(pharmacy_obj) == 0:
            messages.error(request, "No pharmacy found")
            return render(request, 'publisher/pharmacy/pharmacy_listing_publisher.html',
                          {'tab_listing': 'pharmacy_listing', 'tab': 'publish_pharmacy_data',
                           'stage_data': stage_data_obj,
                           'category_obj': category_data, 'category_filter': category_filter,
                           'stage_id':stage_id,'search_name':search_name})
        paginator = Paginator(pharmacy_obj, 50)
        page = request.GET.get('page')
        try:
            pharmacy_obj = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            pharmacy_obj = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            pharmacy_obj = paginator.page(paginator.num_pages)
        return render(request, 'publisher/pharmacy/pharmacy_listing_publisher.html',
                      dict(pharmacy=pharmacy_obj, tab_listing='pharmacy_listing', tab='publish_pharmacy_data',
                           stage_data=stage_data_obj,
                           category_obj=category_data, category_filter=category_filter,
                           stage_id=stage_id,search_name=search_name))
        # else:
        #     return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        raise Http404

####################################################################
# Name - ambulance_publisher_listing                               #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def ambulance_publisher_listing(request):
    try:
        search_name = None
        stage_id = None
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        try:
            search_name = request.GET['search_name']
        except:
            search_name = None
        try:
            stage_id = request.GET['stage_id']
        except:
            stage_id = None
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if publisher_id:
            if search_name:
                ambulance_obj = Ambulance.objects.filter(Q(name__icontains=search_name), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
            elif stage_id:
                ambulance_obj = Ambulance.objects.filter(Q(stage_id=stage_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')

            elif category_id:
                ambulance_obj = Ambulance.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                category_filter = int(category_id)
            else:
                ambulance_obj = Ambulance.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('name')
            if len(ambulance_obj) == 0:
                messages.error(request, "No ambulance found")
                return render(request, 'publisher/ambulance/ambulance_listing_publisher.html',
                              {'tab_listing': 'ambulance_listing', 'tab': 'publish_ambulance_data',
                               'stage_data': stage_data_obj,
                               'category_obj': category_data, 'category_filter': category_filter,
                               'stage_id':stage_id,'search_name':search_name})
            paginator = Paginator(ambulance_obj, 50)
            page = request.GET.get('page')
            try:
                ambulance_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                ambulance_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                ambulance_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/ambulance/ambulance_listing_publisher.html',
                          dict(ambulance=ambulance_obj, tab_listing='ambulance_listing', tab='publish_ambulance_data',
                               stage_data=stage_data_obj,
                               category_obj=category_data, category_filter=category_filter,
                               stage_id=stage_id,search_name=search_name))
        else:
            return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        raise Http404

####################################################################
# Name - bloodbank_publisher_listing                               #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def bloodbank_publisher_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        stage_id = search_name = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        try:
            stage_id = request.GET['stage_id']
        except:
            stage_id = None
        try:
            search_name = request.GET['search_name']
        except:
            search_name = None
        if publisher_id and stage_id:
            bloodbank_obj = BloodBank.objects.filter(stage_id=stage_id,current_user_id=request.user.id,is_disable=False).order_by('name')
        elif publisher_id and search_name:
            bloodbank_obj = BloodBank.objects.filter(name__icontains=search_name, current_user_id=request.user.id,
                                                     is_disable=False).order_by('name')
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if publisher_id and stage_id == None and search_name == None:
            if category_id:
                bloodbank_obj = BloodBank.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                category_filter = int(category_id)
            else:
                bloodbank_obj = BloodBank.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('name')
        if len(bloodbank_obj) == 0:
            messages.error(request, "No bloodbank found")
            return render(request, 'publisher/bloodbank/bloodbank_listing_publisher.html',
                          {'tab_listing': 'bloodbank_listing', 'tab': 'publish_bloodbank_data',
                           'stage_data': stage_data_obj,
                           'category_obj': category_data, 'category_filter': category_filter,
                           'stage_id':stage_id,'search_name':search_name})
        paginator = Paginator(bloodbank_obj, 50)
        page = request.GET.get('page')
        try:
            bloodbank_obj = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            bloodbank_obj = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            bloodbank_obj = paginator.page(paginator.num_pages)
        return render(request, 'publisher/bloodbank/bloodbank_listing_publisher.html',
                      dict(bloodbank=bloodbank_obj, tab_listing='bloodbank_listing', tab='publish_bloodbank_data',
                           stage_data=stage_data_obj,
                           category_obj=category_data, category_filter=category_filter,
                           stage_id=stage_id,search_name=search_name))
        # else:
        #     return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        raise Http404

####################################################################
# Name - disease_publisher_listing                                 #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def disease_publisher_listing(request):
    try:
        search_data = None
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all()
        category_filter = False
        try:
            search_data = request.GET['search_data']
        except:
            search_data = None
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if publisher_id:
            if search_data:
                disease_obj = Disease.objects.filter(current_user_id=publisher_id, topic_title__icontains=search_data, is_disable=False).order_by('topic_title')
            elif category_id:
                disease_obj = Disease.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =publisher_id),Q(is_disable=False)).order_by('topic_title')
                category_filter = int(category_id)
            else:
                disease_obj = Disease.objects.filter(stage_id__gte=4,current_user_id =publisher_id,is_disable=False).order_by('topic_title')
            if disease_obj :
                paginator = Paginator(disease_obj, 50)
                page = request.GET.get('page')
                try:
                    disease_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    disease_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    disease_obj = paginator.page(paginator.num_pages)
                return render(request, 'publisher/disease/disease_listing_publisher.html',
                      dict(disease=disease_obj, tab_listing='disease_listing', tab='publish_disease_data',
                           stage_data=stage_data_obj,search_data=search_data,
                           category_obj=category_data, category_filter=category_filter))
            else:
                messages.error(request, "No disease found")
                return render(request, 'publisher/disease/disease_listing_publisher.html',
                          {'tab_listing': 'disease_listing', 'tab': 'publish_disease_data',
                           'stage_data': stage_data_obj,
                           'category_obj': category_data, 'category_filter': category_filter,
                           'search_data':search_data})
        else:
            return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        raise Http404

####################################################################
# Name - drug_publisher_listing                                    #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def drug_publisher_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if publisher_id:
            if category_id:
                drug_obj = Drug.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False))
                category_filter = int(category_id)
            else:
                drug_obj = Drug.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False)
            if len(drug_obj) == 0:
                messages.error(request, "No drug found")
                return render(request, 'publisher/drug/drug_listing_publisher.html',
                              {'tab_listing': 'drug_listing', 'tab': 'publish_drug_data',
                               'stage_data': stage_data_obj,
                               'category_obj': category_data, 'category_filter': category_filter})
            paginator = Paginator(drug_obj, 50)
            page = request.GET.get('page')
            try:
                drug_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                drug_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                drug_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/drug/drug_listing_publisher.html',
                          dict(drug=drug_obj, tab_listing='drug_listing', tab='publish_drug_data',
                               stage_data=stage_data_obj,
                               category_obj=category_data, category_filter=category_filter))
        else:
            return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        raise Http404

####################################################################
# Name - symptoms_publisher_listing                                #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def symptoms_publisher_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if publisher_id:
            if category_id:
                symptoms_obj = Symptoms.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('topic_title')
                category_filter = int(category_id)
            else:
                symptoms_obj = Symptoms.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('topic_title')
            if len(symptoms_obj) == 0:
                messages.error(request, "No symptoms found")
                return render(request, 'publisher/symptoms/symptoms_listing_publisher.html',
                              {'tab_listing': 'symptoms_listing', 'tab': 'publish_symptoms_data',
                               'stage_data': stage_data_obj,
                               'category_obj': category_data, 'category_filter': category_filter})
            paginator = Paginator(symptoms_obj, 50)
            page = request.GET.get('page')
            try:
                symptoms_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                symptoms_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                symptoms_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/symptoms/symptoms_listing_publisher.html',
                          dict(symptoms=symptoms_obj, tab_listing='symptoms_listing', tab='publish_symptoms_data',
                               stage_data=stage_data_obj,
                               category_obj=category_data, category_filter=category_filter))
        else:
            return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        raise Http404

""" Publish Doctors """
####################################################################
# Name - publish_doctor                                            #
# Owner - Visnu Badal                                              #
####################################################################
from data_publisher import data_publisher, data_un_publisher
@login_required(login_url='/')
@csrf_exempt
@require_POST
def publish_doctor(request):
    response_data = {
        "Message": "Internal Server Error"
    }
    try:
        if request.method == "POST":
            type = request.POST.get('type')
            data_type = request.POST.get('data_type')
            checked_values = request.POST.get('checkedValues')
            if data_type == "doctor" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "livedoctor" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"


            elif data_type == "organisation" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "ambulance" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "bloodbank" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "dietitian" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "disease" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "enterpriseplan" or data_type == "lifeplan" or data_type == "homeplan" :
                if checked_values :
                    if type == "publish":
                        checked_values = checked_values.split(',')
                        result = data_publisher(data_type, checked_values,request)
                        if result:
                            response_data['Message'] = "Data has been sucessfully published"
                    elif type == "un-publish":
                        checked_values = checked_values.split(',')
                        result = data_un_publisher(data_type, checked_values,request)
                        if result:
                            response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "nurse_bureau" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "pharmacy" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "lab" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "rehabitation" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "symptom" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "therapist" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values,request)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "serviceplan" and checked_values:
                if checked_values:
                    if type == "publish":
                        checked_values = checked_values.split(',')
                        result = data_publisher(data_type, checked_values, request)
                        if result:
                            response_data['Message'] = "Data has been sucessfully published"
                    elif type == "un-publish":
                        checked_values = checked_values.split(',')
                        result = data_un_publisher(data_type, checked_values, request)
                        if result:
                            response_data['Message'] = "Data has been sucessfully un-published"
    except Exception as e:
        raise Http404
    response_data = json.dumps(response_data)
    return HttpResponse(response_data)

####################################################################
# Name - doctor_listing_edit                                       #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def doctor_listing_edit(request, doctor_id=None):
    try:
        associated_disease_list = None
        associated_symptoms_list = None
        country_obj = Country.objects.filter(delete=False)
        state_obj = State.objects.filter(delete=False)
        city = City.objects.filter(delete=False)
        locality = Locality.objects.filter(delete=False)

        if doctor_id is not None and request.method == "GET":
            doctor_data = Doctor.objects.filter(id=doctor_id)
            if doctor_data:
                speciality = doctor_data[0].speciality
                select_speciality = []
                if speciality != '' and speciality != None:
                    # select_speciality = speciality.split(',')
                    #line 1 and 2below commented by Nishank
                    #1 select_speciality = map(int, select_speciality)
                    #2 select_speciality = map(int, speciality)
                    speciality_no_list = speciality.split(",")
                    select_speciality = map(int, speciality_no_list)

                specialty_obj = Speciality.objects.filter(category_id=doctor_data[0].category_id)
                select_service_offer = []
                service_offer = doctor_data[0].service_offered

                if service_offer != '' and service_offer != None:
                    # select_service_offer = service_offer.split(',')
                    #select_service_offer = map(int, select_service_offer)
                    select_service_offer_no_list = service_offer.split(",")
                    select_service_offer = map(int, select_service_offer_no_list)

                service_offer_obj = Service_Offred.objects.filter(category_id=doctor_data[0].category_id)
                category_obj = Category.objects.filter(delete=False).order_by('name')
                emer_localities_list = None
                if doctor_data[0].localities and doctor_data[0].localities != '':
                    emer_localities_list = doctor_data[0].localities.split(',')

                if doctor_data[0].associated_diseases != '' and doctor_data[0].associated_diseases != None and doctor_data[0].associated_diseases != []:
                    diseases = doctor_data[0].associated_diseases.strip()
                    dlist = diseases.split(',')
                    associated_disease_list=[]
                    for i in dlist:
                        dis = Disease_search_master.objects.get(id =int(i))
                        associated_disease_list.append(dis.name)

                if doctor_data[0].associated_symptoms != '' and doctor_data[0].associated_symptoms != None and doctor_data[0].associated_symptoms != []:
                    symptoms = doctor_data[0].associated_symptoms.strip()
                    slist = symptoms.split(',')
                    associated_symptoms_list=[]
                    for i in slist:
                        sym = Symptoms_search_master.objects.get(id =int(i))
                        associated_symptoms_list.append(sym.name)

                # Code commednted during transition from ols SO SPE to new SO SPE finals

                # ccat = Category.objects.get(id=doctor_data[0].category_id)
                # service_offer_obj2 = Doc_Cat_SO_Speciality_Association.objects.filter(category=ccat.id)[
                #     0].ServiceOffered
                # if service_offer_obj2 != None and service_offer_obj2 != '':
                #     xx = service_offer_obj2.split(',')
                #     service_offer_obj2 = [Doctor_ServiceOffered_New.objects.get(id=xyz) for xyz in xx]
                # select_service_offer2 = []
                # service_offer_new = doctor_data[0].new_service_offered
                # if service_offer_new != '' and service_offer_new != None:
                #     select_service_offer_no_list2 = service_offer_new.split(",")
                #     select_service_offer2 = map(int, select_service_offer_no_list2)
                #
                # ccat = Category.objects.get(id=doctor_data[0].category_id)
                # specialty_obj2 = Doc_Cat_SO_Speciality_Association.objects.filter(category=ccat.id)[0].Specialities
                # if specialty_obj2 != None and specialty_obj2 != '':
                #     xx = specialty_obj2.split(',')
                #     specialty_obj2 = [Doctor_Speciality_New.objects.get(id=xyz) for xyz in xx]
                # selectedspeciality2 = []
                # speciality_new = doctor_data[0].new_speciality
                # if speciality_new != '' and speciality_new != None:
                #     select_speciality_new_no_list2 = speciality_new.split(",")
                #     selectedspeciality2 = map(int, select_speciality_new_no_list2)

                # REPLACEMENT CODE
                service_offer_obj2 = []
                select_service_offer2 = []
                specialty_obj2 = []
                selectedspeciality2 = []

                ccat = Category.objects.get(id=doctor_data[0].category_id)
                service_offer_obj3 = Doc_Cat_SO_Speciality_Association_Final.objects.filter(category=ccat.id)[
                    0].ServiceOffered
                if service_offer_obj3 != None and service_offer_obj3 != '':
                    xxx = service_offer_obj3.split(',')
                    service_offer_obj3 = [Doctor_ServiceOffered_New.objects.get(id=xyz) for xyz in xxx]
                select_service_offer3 = []
                service_offer_new_final = doctor_data[0].new_service_offered_final
                if service_offer_new_final != '' and service_offer_new_final != None:
                    select_service_offer_no_list3 = service_offer_new_final.split(",")
                    select_service_offer3 = map(int, select_service_offer_no_list3)

                ccat = Category.objects.get(id=doctor_data[0].category_id)
                specialty_obj3 = Doc_Cat_SO_Speciality_Association_Final.objects.filter(category=ccat.id)[
                    0].Specialities
                if specialty_obj3 != None and specialty_obj3 != '':
                    xxx = specialty_obj3.split(',')
                    specialty_obj3 = [Doctor_Speciality_New.objects.get(id=xyz) for xyz in xxx]
                selectedspeciality3 = []
                speciality_new_final = doctor_data[0].new_speciality_final
                if speciality_new_final != '' and speciality_new_final != None:
                    select_speciality_new_no_list3 = speciality_new_final.split(",")
                    selectedspeciality3 = map(int, select_speciality_new_no_list3)
                    
                global hostname
                global port
                hostport = hostname + port


                return render(request, 'data_management/doctor_data/edit_doctor_data.html',
                              {'tab': 'basic', 'tab_listing': 'doctor_listing', 'doctor_data': doctor_data,
                               'category': category_obj,
                               'selectedspeciality': select_speciality, 'selectedoffers': select_service_offer,
                               'specialty': specialty_obj, 'service': service_offer_obj,
                               'country_obj':country_obj,'state_obj':state_obj,'city':city,
                               'locality':locality,'emer_localities_list':emer_localities_list,
                               'associated_disease_list':associated_disease_list,
                               'associated_symptoms_list':associated_symptoms_list,
                               'selectedoffers2': select_service_offer2,
                               'service2': service_offer_obj2,
                               'selectedspeciality2': selectedspeciality2,
                               'specialty2': specialty_obj2,
                               'selectedoffers3': select_service_offer3,
                               'service3': service_offer_obj3,
                               'selectedspeciality3': selectedspeciality3,
                               'specialty3': specialty_obj3, 'hostport':hostport
                               })
            else:
                return HttpResponseRedirect('/doctor/listing/')

        if request.method == "POST" and doctor_id is not None:
            dr_name = request.POST.get('name').strip()
            category_str = request.POST.get('category').strip()
            if category_str != '':
                dr_category = int(request.POST.get('category').strip())
            else:
                dr_category = None

            # Code commednted during transition from ols SO SPE to new SO SPE finals
            # dr_specialty = request.POST.getlist('specialty')
            # dr_specialty_str = ''
            # if dr_specialty:
            #     dr_specialty_str = ','.join(dr_specialty)
            #
            # dr_service_offer_str = ''
            # dr_service_offer = request.POST.getlist('serviceoffer')
            # if dr_service_offer:
            #     dr_service_offer_str = ','.join(dr_service_offer)

            # REPLACEMENT CODE
            dr_specialty_new_final = request.POST.getlist('specialty3')
            dr_specialty_str_new_final = ''
            if dr_specialty_new_final:
                dr_specialty_str_new_final = ','.join(dr_specialty_new_final)

            dr_service_offer_str_new_final = ''
            dr_service_offer_new_final = request.POST.getlist('serviceoffer3')
            if dr_service_offer_new_final:
                dr_service_offer_str_new_final = ','.join(dr_service_offer_new_final)


            dr_registration_no = request.POST.get('registration_no').strip()
            male = False
            female = False
            try:
                male = request.POST.get('male').strip()
            except:
                pass
            try:
                female = request.POST.get('female').strip()
            except:
                pass
            dr_dob = (str(request.POST.get('dob')).strip())
            ed_dt = None
            if dr_dob:
                ed_dt = datetime.strptime(dr_dob, "%d/%m/%Y")
            dr_mobile = request.POST.get('mobile').strip()
            dr_fax = request.POST.get('fax').strip()
            dr_email = request.POST.get('email').strip()
            dr_secondary_email = request.POST.get('secondary_email').strip()
            dr_sky_id = request.POST.get('sky_id').strip()
            qualification = request.POST.get('qualification').strip()
            doctor_experience_year = request.POST.get('doctor_experience_year').strip()
            emergency_fee = request.POST['emergency_fee'].strip()
            try:
                country_id = request.POST['country_id'].strip()
                country_id = int(country_id)
            except:
                country_id = None
            try:
                state_id = request.POST['state_id'].strip()
                state_id = int(state_id)
            except:
                state_id = None
            try:
                city_id = request.POST['city_id'].strip()
                city_id = int(city_id)
            except:
                city_id = None
            localities = request.POST.getlist('locality_id')

            try:
                is_emergency = request.POST['is_emergency'].strip()
            except:
                is_emergency = 0
            if is_emergency == '1':
                is_emergency= True
            else:
                is_emergency = False
            if is_emergency == True:
                if localities and localities != []:
                    loc_str = ''
                    count = 0
                    for i in localities :
                        count  += 1
                        if count  == 1:
                            loc_str = loc_str + i
                        else:
                            loc_str = loc_str + ',' + i
                    localities = loc_str
                else:
                    localities = ''
            else:
                emergency_fee = ''
                country_id = None
                state_id = None
                city_id = None
                localities = ''
            try:
                talk_to_doc = request.POST['talk_to_doc'].strip()
            except:
                talk_to_doc = 0

            try:
                audio = request.POST['audio'].strip()
            except:
                audio = 0

            try:
                video = request.POST['video'].strip()
            except:
                video = 0

            try:
                chat = request.POST['chat'].strip()
            except:
                chat = 0

            if audio == '1' or audio == 'on' :
                audio = True
            else:
                audio = False

            if video == '1' or video == 'on':
                video = True
            else:
                video = False
            if chat == '1' or chat == 'on':
                chat = True
            else:
                chat = False

            if talk_to_doc == '1' or talk_to_doc == 'on':
                talk_to_doc = True
            else:
                talk_to_doc = False
            if talk_to_doc == True:
                talk_fee = request.POST['talk_fee'].strip()
            else:
                talk_fee = ''
            dr_obj = Doctor.objects.get(pk=doctor_id)

            did = request.POST['did'].strip()
            extension = request.POST['extension'].strip()

            ###############POINTS CODE#############
            points  = 0
            if qualification != None and qualification != '' and qualification !=[]:
                qualifi_list = qualification.split(',')
                for q in qualifi_list:
                    if q.strip().lower() == 'MBBS'.lower() or q.strip().lower() == 'BHMS'.lower():
                        points = points + 6
                        break
                for q2 in qualifi_list:
                    if q2.strip().lower() == 'MD'.lower() or q2.strip().lower() == 'MS'.lower():
                        points = points + 11
                        break
                if len(qualifi_list) > 1:
                    points = points + 3

            if doctor_experience_year != None and doctor_experience_year != '' and doctor_experience_year != []:
                expcheck =  doctor_experience_year.strip()
                if expcheck[:2].isdigit() == True:
                    expyears = int(expcheck[:2])
                    points = points + 6.5
                elif expcheck[:1].isdigit() == True:
                    expyears = int(expcheck[:1])
                    if expyears < 5:
                        points = points + 3.5
                    else:
                        points = points + 5
            if is_emergency == True:
                points = points + 5


            ###############POINTS CODE END#########

            if dr_obj:
                dr_obj.name = dr_name
                dr_obj.category_id = dr_category

                # Code commednted during transition from ols SO SPE to new SO SPE finals
                # dr_obj.speciality = dr_specialty_str
                # dr_obj.service_offered = dr_service_offer_str

                # REPLACEMENT CODE
                dr_obj.new_speciality_final = dr_specialty_str_new_final
                dr_obj.new_service_offered_final = dr_service_offer_str_new_final

                dr_obj.registration_data = dr_registration_no
                dr_obj.dob = ed_dt
                dr_obj.mobile_no = dr_mobile
                dr_obj.phone = dr_fax
                dr_obj.email = dr_email
                dr_obj.secondary_email = dr_secondary_email
                dr_obj.skype_id = dr_sky_id
                dr_obj.qualification_data = qualification
                dr_obj.doctor_experience_year = doctor_experience_year
                dr_obj.male_doctor = male
                dr_obj.female_doctor = female
                dr_obj.is_emergency = is_emergency
                dr_obj.localities = localities
                dr_obj.country_id = country_id
                dr_obj.state_id = state_id
                dr_obj.city_id = city_id
                dr_obj.emergency_fee = emergency_fee
                dr_obj.talk_to_doc = talk_to_doc
                dr_obj.talk_fee = talk_fee
                dr_obj.audio = audio
                dr_obj.video = video
                dr_obj.chat = chat
                dr_obj.did = did
                dr_obj.extension = extension
                dr_obj.points = points
                dr_obj.save()
            is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
            if len(is_publisher):
                #return HttpResponseRedirect(reverse('publisher-doctor-listing'))
                return HttpResponseRedirect('/doctor/edit/' + doctor_id + '/')
            return HttpResponseRedirect('/doctor/edit/' + doctor_id + '/')
    except Exception as e:
        messages.error(request, "Please Enter All field Properly")
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    return Http404

####################################################################
# Name - add_doctor                                                #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_doctor(request):
    try:
        if request.method == "GET":
            zone_obj = Zone.objects.filter(delete=False)
            category_obj = Category.objects.filter(delete=False)
            country_obj = Country.objects.filter(delete=False)
            state_obj = State.objects.filter(delete=False)
            return render(request, 'data_management/doctor_data/add_doctor.html',
                          {'doctor_add': 'add', 'tab_listing': 'doctor_listing', 'zone_obj': zone_obj,
                           'category_obj': category_obj,'country_obj': country_obj,
                           'state_obj': state_obj,})
        elif request.method == "POST":
            doctor_name = request.POST['doctor_name'].strip()
            email = request.POST['email'].strip()
            mobile = request.POST['mobile'].strip()
            fax = request.POST['fax'].strip()
            zone_id = request.POST['zone'].strip()
            zone_location_id = request.POST['zone_location'].strip()
            category_id = request.POST['category'].strip()
            emergency_fee = request.POST['emergency_fee'].strip()
            try:
                country_id = request.POST['country_id'].strip()
                country_id = int(country_id)
            except:
                country_id = None
            try:
                state_id = request.POST['state_id'].strip()
                state_id = int(state_id)
            except:
                state_id = None
            try:
                city_id = request.POST['city_id'].strip()
                city_id = int(city_id)
            except:
                city_id = None
            localities = request.POST.getlist('locality_id')
            try:
                is_emergency = request.POST['is_emergency'].strip()
            except:
                is_emergency = 0
            if is_emergency == '1':
                is_emergency= True
            else:
                is_emergency = False
            if is_emergency == True:
                if localities and localities != []:
                    loc_str = ''
                    count = 0
                    for i in localities :
                        count  += 1
                        if count  == 1:
                            loc_str = loc_str + i
                        else:
                            loc_str = loc_str + ',' + i
                    localities = loc_str
                else:
                    localities = ''
            else:
                emergency_fee = ''
                country_id = None
                state_id = None
                city_id = None
                localities = ''
            try:
                talk_to_doc = request.POST['talk_to_doc'].strip()
            except:
                talk_to_doc = 0
            if talk_to_doc == '1':
                talk_to_doc= True
            else:
                talk_to_doc = False

            if talk_to_doc == True:
                talk_fee = request.POST['talk_fee'].strip()
            else:
                talk_fee = ''
            dr_specialty = request.POST.getlist('specialty')
            dr_specialty_str = ''
            if dr_specialty:
                dr_specialty_str = ','.join(dr_specialty)
            zone_obj = Zone.objects.all()
            category_obj = Category.objects.all()

            did = request.POST['did'].strip()
            extension = request.POST['extension'].strip()

            if doctor_name and zone_id and zone_location_id and category_id :# and dr_specialty_str:
                # Check Doctor Already There
                doctor_obj_check = Doctor.objects.filter(name__iexact=doctor_name, category_id=category_id,
                                                         speciality=dr_specialty_str, zone_location_id=zone_location_id)
                if len(doctor_obj_check):
                    messages.error(request, "Doctor already exists")
                    return render(request, 'data_management/doctor_data/add_doctor.html',
                                  dict(zone_obj=zone_obj, category_obj=category_obj, tab_listing='doctor_listing'))
                stage = Stage.objects.get(id=2)
                dr_specialty_str = ''
                doctor_obj = Doctor.objects.create(unique_id=uuid.uuid4(), name=doctor_name, email=email,
                                                   mobile_no=mobile, phone=fax, zone_id=zone_id,
                                                   zone_location_id=zone_location_id, category_id=category_id,
                                                   speciality=dr_specialty_str, stage=stage,
                                                   current_user_id=request.user.id,is_emergency=is_emergency,
                                                   emergency_fee=emergency_fee,country_id=country_id,
                                                   state_id=state_id,city_id=city_id,localities=localities,
                                                   talk_to_doc=talk_to_doc,talk_fee=talk_fee,
                                                   did=did,extension=extension)
            else:
                messages.error(request, "Please Provide Name, Zone with Location and Category Details")
                return render(request, 'data_management/doctor_data/add_doctor.html',
                              dict(zone_obj=zone_obj, category_obj=category_obj, tab_listing='doctor_listing'))
            return HttpResponseRedirect('/doctor/edit/' + str(doctor_obj.id) + '/')
    except Exception as e:
        raise Http404

####################################################################
# Name - add_care_doctor                                           #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_care_doctor(request):
    try:
        if request.method == "GET":
            doctor_list = Doctor.objects.filter(is_disable=False, provides_home_care=False)
            care_services_list =  Doc_Care_services_master.objects.filter(delete=False)
            return render(request, 'data_management/doctor_data/add_care_doctor.html',
                          {'doctor_list': doctor_list, 'tab_listing': 'care_residence',
                           'care_services_list':care_services_list})
        elif request.method == "POST":
            provides_home_care = True
            doctor_id = None
            try:
                doctor_id = request.POST['doctor_id']
            except:
                doctor_id = None
            alternate_phone = request.POST['alternate_phone']
            doctor_areas_covered = request.POST['doctor_areas_covered']
            doctor_rates = request.POST['doctor_rates']
            doctors_packages = request.POST['doctors_packages']
            service_id_list = request.POST.getlist('service_id_list')
            temp = ''
            count = 0
            for i in service_id_list:
                count += 1
                if count == 1:
                    temp = temp + i.strip()
                else:
                    temp = temp +','+ i.strip()
            service_id_list = temp

            try:
                doctor_obj = Doctor.objects.get(id=doctor_id)
            except:
                doctor_obj = None
            if doctor_obj :
                doctor_obj.doctor_alternate_phone_number = alternate_phone
                doctor_obj.doctor_areas_covered = doctor_areas_covered
                doctor_obj.doctor_rates = doctor_rates
                doctor_obj.doctors_packages = doctors_packages
                doctor_obj.provides_home_care = provides_home_care
                doctor_obj.care_services_provided = service_id_list
                doctor_obj.save()
                messages.success(request, "Successfully Added Doctor to care at home")
            return HttpResponseRedirect(reverse('doctor-care-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - edit_care_doctor                                          #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def edit_care_doctor(request,doctor_id=None):
    try:
        if request.method == "GET":
            if doctor_id:
                doctor = Doctor.objects.get(is_disable=False, provides_home_care=True,id=doctor_id)
                category_id = doctor.category_id
                speciality_master = Speciality.objects.filter(delete=False,category_id=category_id)
                speciality_list = doctor.speciality
                templist = []
                if speciality_list and speciality_list != '' and speciality_list != []:
                    templist = speciality_list.split(',')
                speciality_list = templist
                current_services =  doctor.care_services_provided
                temp =[]
                if current_services and current_services != '' and current_services != []:
                    temp = current_services.split(',')
                current_services =  temp
                care_services_list = Doc_Care_services_master.objects.filter(delete=False)
                return render(request, 'data_management/doctor_data/edit_care_doctor.html',
                              {'doctor': doctor, 'tab_listing': 'care_residence',
                               'care_services_list': care_services_list,'current_services':current_services,
                               'speciality_master':speciality_master,'speciality_list':speciality_list })
            else:
                messages.error(request,'NO ID PROVIDED')
                return HttpResponseRedirect(request.META['HTTP_REFFERER'])
        elif request.method == "POST":
            provides_home_care = True
            alternate_phone = request.POST['alternate_phone']
            doctor_areas_covered = request.POST['doctor_areas_covered']
            doctor_rates = request.POST['doctor_rates']
            doctors_packages = request.POST['doctors_packages']
            service_id_list = request.POST.getlist('service_id_list')
            temp = ''
            count = 0
            for i in service_id_list:
                count += 1
                if count == 1:
                    temp = temp + i.strip()
                else:
                    temp = temp + ',' + i.strip()
            service_id_list = temp
            try:
                doctor_obj = Doctor.objects.get(id=doctor_id)
            except:
                doctor_obj = None
            if doctor_obj:
                doctor_obj.doctor_alternate_phone_number = alternate_phone
                doctor_obj.doctor_areas_covered = doctor_areas_covered
                doctor_obj.doctor_rates = doctor_rates
                doctor_obj.doctors_packages = doctors_packages
                doctor_obj.provides_home_care = provides_home_care
                doctor_obj.care_services_provided = service_id_list
                doctor_obj.save()
                messages.success(request, "Successfully Updated Doctor "+doctor_obj.name)
            else:
                messages.error(request,'Doctor Not Found')
            return HttpResponseRedirect(reverse('doctor-care-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - edit_care_doctor                                          #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def remove_care_doctor(request, doctor_id=None):
    try:
        if request.method == "GET":
            if doctor_id:
                doctor = Doctor.objects.get(id=doctor_id)
                doctor.provides_home_care = False
                doctor.save()
                messages.success(request, 'Successfully Removed Doctor ' + doctor.name + 'from care at home')
                return HttpResponseRedirect(request.META['HTTP_REFERER'])
            else:
                messages.error(request, 'NO ID PROVIDED')
                return HttpResponseRedirect(request.META['HTTP_REFERER'])
        else:
            messages.error(request, 'METHOD NOT ALLOWED')
            return HttpResponseRedirect(request.META['HTTP_REFERER'])
    except Exception as e:
        raise Http404

####################################################################
# Name - schedule_care_doctor                                      #
# BY Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def schedule_care_doctor(request, doctor_id=None):
    try:
        back_to_url = request.META.get('HTTP_REFERER')
        try:
            doctor_obj = Doctor.objects.get(id=doctor_id)
        except:
            doctor_obj = None
        if doctor_obj:
            if request.method == "GET":
                schedule_obj = doctor_obj.doctor_care_schedule_data
                schedule_list = []
                # This case add by jitendra dixit temporary use
                schedule_id = None
                try:
                    if len(
                            schedule_obj) == 0:  # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc

                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        doctor_obj.doctor_care_schedule_data = schedule_data
                        doctor_obj.save()
                except:
                    if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc

                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        doctor_obj.doctor_care_schedule_data = schedule_data
                        doctor_obj.save()
                # 3 get schedule object (whether already exisitng or added by us in step 2 above
                schedule_obj = doctor_obj.doctor_care_schedule_data

                if schedule_obj:
                    schedule_list = doctor_obj.doctor_care_schedule_data  # get the conetnt of json field
                    if type(schedule_list) is str:
                        schedule_list = json.loads(schedule_list)

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)

                if len(is_publisher):
                    user_is_publisher = True

                return render(request, 'data_management/doctor_data/doctor_care_schedule_data_form.html',
                              dict(schedule_list=schedule_list,
                                   doctor_id=doctor_id,
                                   day_list=day_list,
                                   tab=5, back_to_url=back_to_url,
                                   user_is_publisher=user_is_publisher))
            elif request.method == "POST":
                schedule_obj = doctor_obj.doctor_care_schedule_data
                if schedule_obj:
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        # while saving new schedule, the schedule is created as a dictionary which is then appended
                        # to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)
                        schedule_obj = schedule_data
                        doctor_obj.doctor_care_schedule_data = schedule_obj
                        doctor_obj.save()
                        messages.success(request, 'Doctor CARE schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
                else:
                    schedule_list = []
                    try:
                        if len(
                                schedule_obj) == 0:  # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc

                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            doctor_obj.doctor_care_schedule_data = schedule_data
                            doctor_obj.save()
                    except:
                        if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc

                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            doctor_obj.doctor_care_schedule_data = schedule_data
                            doctor_obj.save()
                    # 3 get schedule object (whether already exisitng or added by us in step 2 above
                    schedule_obj = doctor_obj.doctor_care_schedule_data

                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        # while saving new schedule, the schedule is created as a dictionary which is then appended
                        # to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)
                        schedule_obj = schedule_data
                        doctor_obj.doctor_care_schedule_data = schedule_obj
                        doctor_obj.save()
                        messages.success(request, 'Doctor CARE schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
        else:
            messages.error(request, 'Doctor object not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        # print e
        raise Http404

####################################################################
# Name - zone_location                                             #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def zone_location(request):
    data = []
    try:
        if request.method == "POST":
            zone_id = request.POST.get('zone_id')
            zone_location_obj = ZoneLocation.objects.filter(zone_id=zone_id)
            for i in zone_location_obj:
                data_json = {}
                data_json['id'] = i.id
                data_json['name'] = i.name
                data.append(data_json)
            if data:
                data = json.dumps(data)
    except Exception as e:
        raise Http404
    return HttpResponse(data)

####################################################################
# Name - Category                                                  #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def category(request):
    # This view send SO and SPE data on CAtegory change to ajax

    data = {}
    try:
        response1 = {}
        if request.method == "POST":
            category_id = request.POST['id'].strip()
            if category_id is not None:
                speciality = Speciality.objects.filter(category_id=category_id,delete=False).values('id', 'name')
                service = Service_Offred.objects.filter(category_id=category_id,delete=False).values('id', 'name')
                if len(speciality) or len(service):
                    response1['speciality'] = list(speciality)
                    response1['service'] = list(service)
                else:
                    response1['Massage'] = "No Speciality"
                    response1['speciality'] = []
                    response1['service'] = []
            else:
                response1['Massage'] = "Please select category"
        data = json.dumps(response1)
    except Exception as e:
        raise Http404
    return HttpResponse(data)


####################################################################
# Name - category_two                                              #
# By Nishank Gupta                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def category_two(request):
    # This view sends Doctor_ServiceOffered_New and Doctor_Speciality_New on Category change to ajax

    data = {}
    try:
        response1 = {}
        if request.method == "POST":
            category_id = request.POST['id'].strip()
            if category_id is not None:
                Assoc = Doc_Cat_SO_Speciality_Association_Final.objects.get(category=category_id)
                so_list = Assoc.ServiceOffered.strip().split(',')
                spe_list = Assoc.Specialities.strip().split(',')
                service = Doctor_ServiceOffered_New.objects.filter(id__in=so_list).values('id', 'name')
                if spe_list != [] and spe_list != [''] :
                    speciality = Doctor_Speciality_New.objects.filter(id__in=spe_list).values('id', 'name')
                else:
                    speciality = []

                if len(speciality) or len(service):
                    response1['speciality'] = list(speciality)
                    response1['service'] = list(service)
                else:
                    response1['Massage'] = "No Speciality"
                    response1['speciality'] = []
                    response1['service'] = []
            else:
                response1['Massage'] = "Please select category"
        data = json.dumps(response1)
    except Exception as e:
        raise Http404
    return HttpResponse(data)


####################################################################
# Name - reward_doctor                                             #
# Owner - Visnu Badal                                              #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def reward_doctor(request, doctor_id=None):
    try:
        if request.method == 'GET' and doctor_id:
            doctor_data = Doctor.objects.filter(id=doctor_id)
            reward_data = RewardRecognisation.objects.filter(doctor_id=doctor_id)
            membership_data = Membership.objects.filter(doctor_id=doctor_id)
            return render(request, 'data_management/doctor_data/reward.html',
                          {'tab': 'reward', 'tab_listing': 'doctor_listing', 'reward_data': reward_data,
                           'doctor_data': doctor_data, 'membership_data': membership_data})
        elif request.method == 'POST' and doctor_id:
            form_data_type = request.POST['type'].strip()
            if form_data_type == 'reward':
                reward_form_data = request.POST['reward_name'].strip()
                if reward_form_data:
                    reward_data = RewardRecognisation(reward_data=reward_form_data, doctor_id=doctor_id)
                    reward_data.save()
                else:
                    messages.error(request, "Please enter Reward data")
            elif form_data_type == 'membership':
                membership_form_data = request.POST['membership_data'].strip()
                if membership_form_data:
                    membership_data = Membership(name=membership_form_data, doctor_id=doctor_id)
                    membership_data.save()
                else:
                    messages.error(request, "Please enter Membership data")
            return HttpResponseRedirect('/doctor/reward/' + doctor_id + '/')
        else:
            raise Http404
    except Exception as e:
        raise Http404

####################################################################
# Name - reward_doctor                                             #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def education_doctor(request, doctor_id=None):
    try:
        if request.method == 'GET' and doctor_id:
            if request.user.is_superuser:
                doctor_data = Doctor.objects.filter(id=doctor_id)
                return render(request, 'data_management/doctor_data/education.html',
                              {'tab': 'education', 'tab_listing': 'doctor_listing', 'doctor_data': doctor_data})
            if check_doctor(doctor_id, request.user.id):
                doctor_data = Doctor.objects.filter(id=doctor_id)
                return render(request, 'data_management/doctor_data/education.html',
                              {'tab': 'education', 'tab_listing': 'doctor_listing', 'doctor_data': doctor_data})
            else:
                return HttpResponseRedirect(reverse('doctor-listing'))
        elif request.method == 'POST' and doctor_id:
            if check_doctor(doctor_id, request.user.id, request.user.is_superuser):
                form_data_type = request.POST['type'].strip()
                if form_data_type == 'education':
                    education_form_data = request.POST['education_data'].strip()
                    if education_form_data:
                        doctor_education_data = Doctor_Education(education_data=education_form_data,
                                                                 doctor_id=doctor_id)
                        doctor_education_data.save()
                    else:
                        messages.error(request, "Please enter Education data")
                elif form_data_type == 'exp':
                    exp_form_data = request.POST['exp_data'].strip()
                    if exp_form_data:
                        exp_data = Doctor_Experience(experience_data=exp_form_data, doctor_id=doctor_id)
                        exp_data.save()
                    else:
                        messages.error(request, "Please enter Experience data")
                return HttpResponseRedirect('/doctor/education/' + doctor_id + '/')
            else:
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        raise Http404

####################################################################
# Name - reward_doctor                                             #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def attach_doctor(request, doctor_id=None):
    try:
        if check_doctor(doctor_id, request.user.id, request.user.is_superuser):
            if request.method == 'GET' and doctor_id:
                city_filter = False
                locality_filter = False
                city_obj = City.objects.all()
                locality_obj = []
                try:
                    filter_org = request.GET['filter_org']
                    if filter_org == 'on':
                        city_org = request.GET['city_id']
                        locality_org = request.GET['locality_id']
                        if city_org and locality_org:
                            city_filter = int(city_org)
                            locality_filter = int(locality_org)
                            organisation = OrganisationName.objects.filter(
                                Q(stage_id__gte=2) & Q(is_disable=False) & Q(city_id=city_filter) & Q(
                                    locality_id=locality_filter))
                            locality_obj = Locality.objects.filter(city_id=city_filter)
                        else:
                            messages.error(request, 'Please Select City and Locality')
                            organisation = []
                    else:
                        organisation = []
                except Exception as e:
                    # filter_org = None
                    organisation = []
                doctor_data = Doctor.objects.filter(id=doctor_id)
                organisation_obj = AttachWithDoctor.objects.filter(doctor_id=doctor_id)
                # organisation = OrganisationName.objects.filter(stage_id__gte=2, is_disable=False)

                if UserManagement.objects.filter(user_id=request.user.id, is_caller=True):
                    user_data = UserManagement.objects.filter(is_reviewer=True,is_doctor_reviewer=True).values('user_id')
                    user_publisher_data = []
                elif UserManagement.objects.filter(user_id=request.user.id, is_reviewer=True):
                    user_data = UserManagement.objects.filter(is_caller=True,is_doctor_caller=True).values('user_id')
                    user_publisher_data = UserManagement.objects.filter(is_publisher=True).values('user_id')
                else:
                    user_data = []
                    user_publisher_data = []
                reviewer_user_data = User.objects.filter(id__in=user_data, is_active=True)
                publisher_user_data = User.objects.filter(id__in=user_publisher_data, is_active=True)
                valid_choice = ValidateByChoice.objects.all()
                user_data_complete = UserManagement.objects.all()

                all_departments = Department.objects.all().order_by('name')
                # current_departments = []
                # try:
                #     if organisation_obj[0].department and organisation_obj[0].department != '' and organisation_obj[0].department != ' ':
                #         tempde = organisation_obj[0].department.split(',')
                #         for dep in tempde:
                #             dobj = Department.objects.get(id = int(dep.strip()))
                #             current_departments.append(dobj)
                # except:
                #     pass

                return render(request, 'data_management/doctor_data/attach_organisation.html',
                              {'tab': 'attach', 'tab_listing': 'doctor_listing', 'doctor_data': doctor_data,
                               'organisation_doctor': organisation_obj, 'all_organisation': organisation,
                               'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                               'valid_choice': valid_choice, 'city_obj': city_obj, 'city_filter': city_filter,
                               'locality_filter': locality_filter, 'locality_obj': locality_obj,
                               'user_data_complete':user_data_complete,
                               'all_departments':all_departments})
            elif request.method == 'POST' and doctor_id:
                organisation_id = request.POST['organisation_name']
                consultancy_fees = request.POST['consultancy_fees'].strip()
                did = request.POST['did'].strip()
                extension = request.POST['extension'].strip()
                department = request.POST.getlist('Departments_add_org')

                idlist = []
                oid = int(organisation_id)
                temp_dep = ','.join(department)
                department = temp_dep
                if not check_organisation(organisation_id, doctor_id) and consultancy_fees and department :
                    if organisation_id:
                        attach_data = AttachWithDoctor(doctor_id=doctor_id, organisation_id=organisation_id,
                                                       consultancy_fee=consultancy_fees,did=did,extension=extension,
                                                       department=department)
                        attach_data.save()
                        schedule_data = Schedule(doctor_id=doctor_id, organisation_id=organisation_id, schedule_data=[])
                        schedule_data.save()
                        messages.success(request, "Successfully Attached Hospital")
                        # data = __organisation_data_creation(oid)
                        # response = elasticsearch_client.index_data("global", "organisation", organisation_id, data)
                        # if response:
                        #     organisation_obj = OrganisationName.objects.filter(id=organisation_id)
                        #     if organisation_obj:
                        #         organisation_obj.update(publish=True, stage=5)
                        #         messages.success(request, "Successfully Attached AND Hospital Published")
                        # else:
                        #     messages.success(request, "Successfully Attached BUT Hospital Publish FAILED")


                    else:

                        messages.error(request, "Please Enter Consultancy fees and Organisation")
                else:
                    if not consultancy_fees or not department:
                        messages.error(request, 'Consultancy fee and Department are mandatory')
                    else:
                        messages.error(request, 'Organisation already Attached')

                return HttpResponseRedirect('/doctor/attached/' + doctor_id + '/')
        else:
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - schedule_doctor                                           #
# Owner - Jitendra Dixit                                           #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def schedule_doctor(request, doctor_id=None, organisation_id=None):
    try:
        if check_doctor(doctor_id, request.user.id, request.user.is_superuser):
            if request.method == "GET":
                try:
                    doctor_id = int(doctor_id)
                except:
                    raise Http404
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404
                check = AttachWithDoctor.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                if len(check) == 1:
                    schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                    schedule_list = []
                    # This case add by jitendra dixit temporary use
                    by_check = None
                    schedule_id = None
                    if len(schedule_obj) == 0: # 1Scenario when no schedule exists for a given pair of org and doc

                        # 2 create and save a schedule instance with given doc amd org so that we o not have problem in #3 below
                        schedule_data = Schedule(doctor_id=doctor_id, organisation_id=organisation_id, schedule_data=[])
                        schedule_data.save()
                    #3 get schedule object (whether already exisitng or added by us in step 2 above
                    schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)

                    #>>> import json
                    #>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
                    #[u'foo', {u'bar': [u'baz', Non , 1.0, 2]}]
                    #>>> json.dumps([u'foo', {u'bar': [u'baz', None, 1.0, 2]}])
                    # '["foo", {"bar": ["baz", null, 1.0, 2]}]' #Therefore the check for type string

                    if schedule_obj:
                        schedule_list = schedule_obj[0].schedule_data #get the conetnt of json field

                        if type(schedule_list) is str:
                            schedule_list = json.loads(schedule_list)
                        schedule_id = schedule_obj[0].id #Id of the whole scehdule table object saved in id column
                        by_check = schedule_obj[0].by_appointment

                    return render(request, 'data_management/doctor_data/schedule_form.html',
                                  dict(schedule_list=schedule_list, doctor_id=doctor_id,
                                       schedule_id=schedule_id,
                                       day_list=day_list,
                                       organisation_id=organisation_id,
                                       tab_listing='doctor_listing',
                                       by_check=by_check))
                else:
                    raise Http404
            elif request.method == "POST":
                try:
                    doctor_id = int(doctor_id)
                except:
                    raise Http404
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404
                check = AttachWithDoctor.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                schedule_obj.update(by_appointment=False)
                if len(check) == 1 and len(schedule_obj) == 1:
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj[0].schedule_data
                    try:
                        by_app = request.POST.getlist('by_app')
                    except:
                        by_app = []
                    if len(by_app) == 0:
                        by_app.append('0ff')

                    if by_app[0] == 'on':
                        schedule_obj.update(by_appointment=True)
                    else:
                        start_time = request.POST.getlist('start_time')

                        start_period = request.POST.getlist('start_period')
                        end_time = request.POST.getlist('end_time')
                        end_period = request.POST.getlist('end_period')
                        from_day = request.POST.get('from_day')
                        to_day = request.POST.get('to_day')
                        if start_time and start_period and end_period and end_time and from_day:
                            unique_id = str(uuid.uuid4())
                            for i in range(0, len(start_time)):
                                timing_dict = {}
                                timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                                timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                                timing_list.append(timing_dict)
                            add_schedule_dict['from_day'] = from_day
                            add_schedule_dict['to_day'] = to_day
                            add_schedule_dict['timing'] = timing_list
                            add_schedule_dict['id'] = unique_id
                            #while saving new schedule, the schedule is created as a dictionary which is then appended
                            #to the single listcontained in (schedule_data)
                            schedule_data.append(add_schedule_dict)

                            schedule_obj.update(schedule_data=schedule_data,by_appointment=False)
                        else:
                            messages.error(request, 'Please enter required field')
                return HttpResponseRedirect('/doctor/schedule/' + str(doctor_id) + '/' + str(organisation_id) + '/')
        else:
            return HttpResponseRedirect(reverse('doctor-listing'))
    except Exception as e:
        raise Http404



####################################################################
# Name - doctor_verified_fields                                    #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def doctor_verified_fields(request, doctor_id=None):
    try:
        if request.method == 'GET' and doctor_id:
            doctor_data = Doctor.objects.filter(id=doctor_id)
            fields_json = doctor_data[0].verified_fields

            full_list = []
            verified_list = []
            for i in fields_json:
                for k,v in i.items() :
                    full_list.append(k)
                    if v == True:
                        verified_list.append(k)
            print full_list
            print verified_list
            return render(request, 'data_management/doctor_data/verified_fields.html',
                          {'tab':'verifiedfields', 'tab_listing':'doctor_listing','full_list':full_list,
                           'verified_list':verified_list,'doctor_data':doctor_data})

        elif request.method == 'POST' and doctor_id:
            field_names = request.POST.getlist('vfields')
            doctor_data = Doctor.objects.filter(id=doctor_id)
            fields_json = doctor_data[0].verified_fields
            full_list = []
            for i in fields_json:
                for k, v in i.items():
                    full_list.append(k)
            for i in full_list:
                if i in field_names:
                    c = -1
                    for x in fields_json:
                        c += 1
                        for k, v in x.items():
                            if k == i:
                                fields_json[c] = {k:True}
                else:
                    c = -1
                    for x in fields_json:
                        c += 1
                        for k, v in x.items():
                            if k == i:
                                fields_json[c] = {k:False}

            checkj = json.dumps(fields_json)
            doctor_data.update(verified_fields = fields_json)


            messages.success(request,"Successfully Updated Field Meta Data" )
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        messages.success(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


""" Mark As Complete Here """
####################################################################
# Name - mark_as_complete_caller                                   #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller(request):
    try:
        if request.method == 'POST':
            doctor_id = request.POST['doctor_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            live_doc_true = None
            try:
                live_doc_true = request.POST['live_doc_true']
            except:
                live_doc_true = None

            if live_doc_true == 'TrUe':
                find_doctor = Live_Doctor.objects.filter(id= int(doctor_id),current_user_id = request.user.id)
            else:
                find_doctor = return_doc(doctor_id, request.user.id)

            if find_doctor and reviewer_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    find_doctor.update(current_user=reviewer_data_id, previous_user=request.user.id, stage=3,
                                       free_text='', resource_validate=valid_choice_id)
                    messages.success(request, 'Successfully move to next Stage')
                except Exception as e:
                    print e
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        if live_doc_true == 'TrUe':
            return HttpResponseRedirect(reverse('live_doctor_new_registrations_listing'))
        else:
            return HttpResponseRedirect(reverse('doctor-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_complete_caller_organisation                      #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_organisation(request):
    try:
        if request.method == 'POST':
            organisation_id = request.POST['organisation_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_data_id = request.POST['validator_name']
            find_organisation = check_organisation_complete(organisation_id, request.user.id)
            if find_organisation and reviewer_data_id and valid_data_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = find_doctor.stage + 1
                try:
                    find_organisation.update(current_user=reviewer_data_id, previous_user=request.user.id, stage=3,
                                             free_text='', resource_validate=valid_data_id)
                    messages.success(request, 'Successfully move to next Stage')
                except Exception as e:
                    messages.error(request, 'Something Bad Happened')
                    pass
            else:
                messages.error(request, 'Select Reviewer')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('organisation-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_complete_caller_lab                               #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_lab(request):
    try:
        if request.method == 'POST':
            lab_id = request.POST['lab_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            lab_obj = return_lab(lab_id, request.user.id)
            if lab_obj and reviewer_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    lab_obj.current_user = User.objects.get(id=reviewer_data_id)
                    lab_obj.previous_user = request.user.id
                    lab_obj.stage = Stage.objects.get(pk=3)
                    lab_obj.free_text = ''
                    lab_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    lab_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('lab-listing'))
                except:
                    raise Http404
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('lab-listing'))
    except Exception as e:
        return HttpResponse("Something Bad Happened")

####################################################################
# Name - mark_as_complete_reviewer_lab                             #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_lab(request):
    try:
        if request.method == 'POST':
            lab_id = request.POST['lab_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            lab_obj = return_lab(lab_id, request.user.id)
            if lab_obj and publisher_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    lab_obj.current_user = User.objects.get(id=publisher_data_id)
                    lab_obj.previous_user = request.user.id
                    lab_obj.stage = Stage.objects.get(pk=4)
                    lab_obj.free_text = ''
                    lab_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    lab_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('lab-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('lab-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_reverse_caller_lab                                #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_lab(request):
    try:
        if request.method == 'POST':
            lab_id = request.POST['lab_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            lab_obj = return_lab(lab_id,request.user.id)
            if lab_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    lab_obj.current_user = User.objects.get(id=caller_data_id)
                    lab_obj.previous_user = request.user.id
                    lab_obj.stage = Stage.objects.get(pk=2)
                    lab_obj.free_text = free_text
                    lab_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-lab-listing'))
                    return HttpResponseRedirect(reverse('lab-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-lab-listing'))
        return HttpResponseRedirect(reverse('lab-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_reverse_reviewer_lab                               #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_lab(request):
    try:
        if request.method == 'POST':
            lab_id = request.POST['lab_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            lab_obj = return_lab(lab_id, request.user.id)
            if lab_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    lab_obj.current_user = User.objects.get(id=reviewer_data_id)
                    lab_obj.previous_user = request.user.id
                    lab_obj.stage = Stage.objects.get(pk=3)
                    lab_obj.free_text = free_text
                    lab_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    return HttpResponseRedirect(reverse('lab-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('lab-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_complete_publisher_lab                             #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_lab(request):
    try:
        if request.method == 'POST':
            lab_id = request.POST['lab_id']
            lab_obj = return_lab(lab_id, request.user.id)
            if lab_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    lab_obj.stage = Stage.objects.get(pk=5)
                    lab_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    return HttpResponseRedirect(reverse('lab-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('lab-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_complete_reviewer                                 #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer(request):
    try:
        if request.method == 'POST':
            doctor_id = request.POST['doctor_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text'].strip()
            #find_doctor = return_doc(doctor_id, request.user.id)
            live_doc_true = None
            try:
                live_doc_true = request.POST['live_doc_true']
            except:
                live_doc_true = None

            if live_doc_true == 'TrUe':
                find_doctor = Live_Doctor.objects.filter(id=int(doctor_id), current_user_id=request.user.id)
            else:
                find_doctor = return_doc(doctor_id, request.user.id)

            if find_doctor and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                find_doctor.update(current_user=caller_data_id, previous_user=request.user.id, stage=2,
                                   free_text=free_text)
                messages.success(request, 'Successfully move to Previous Stage')
                is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                if len(is_publisher):
                    #return HttpResponseRedirect(reverse('publisher-doctor-listing'))
                    if live_doc_true == 'TrUe':
                        return HttpResponseRedirect(reverse('publisher-live-doctor-listing'))
                    else:
                        return HttpResponseRedirect(reverse('publisher-doctor-listing'))
                else:
                    if live_doc_true == 'TrUe':
                        return HttpResponseRedirect(reverse('live_doctor_new_registrations_listing'))
                    else:
                        return HttpResponseRedirect(reverse('doctor-listing'))
            else:
                messages.error(request, 'Error Found')
        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-doctor-listing'))
        return HttpResponseRedirect(reverse('doctor-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_complete_reviewer_organisation                    #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_organisation(request):
    try:
        if request.method == 'POST':
            organisation_id = request.POST['organisation_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text'].strip()
            find_organisation = check_organisation_complete(organisation_id, request.user.id)
            if find_organisation and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                find_organisation.update(current_user=caller_data_id, previous_user=request.user.id, stage=2,
                                         free_text=free_text)
                messages.success(request, 'Successfully move to Previous Stage')
                is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-organisation-listing'))
                return HttpResponseRedirect(reverse('organisation-listing'))
            else:
                messages.error(request, 'Enter all field')
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-organisation-listing'))
        return HttpResponseRedirect(reverse('organisation-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_complete_publisher                                #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher(request):
    result_data = {}
    try:
        if request.method == 'POST':
            doctor_id = request.POST['doctor_id']
            publisher_data_id = request.POST['publisher_name']
            validator_data_id = request.POST['validator_id']

            live_doc_true = None
            try:
                live_doc_true = request.POST['live_doc_true']
            except:
                live_doc_true = None

            if live_doc_true == 'TrUe':
                check_publish_data = None
            else:
                check_publish_data = None  # This has been done to avoid the egg and hen situation. To undo remnove below line
                                           #  and comment this line
                #check_publish_data = check_attached_organisation_in_publish_stage(doctor_id)


            if check_publish_data:
                result_data['status'] = "Fail"
                result_data["message"] = "This data is not publish stage"
                result_data["data"] = check_publish_data
            else:
                #find_doctor = return_doc(doctor_id, request.user.id)
                if live_doc_true == 'TrUe':
                    find_doctor = Live_Doctor.objects.filter(id=int(doctor_id), current_user_id=request.user.id)
                else:
                    find_doctor = return_doc(doctor_id, request.user.id)

                if find_doctor and publisher_data_id and validator_data_id:
                    find_doctor.update(current_user=publisher_data_id, previous_user=request.user.id, stage=4,
                                       resource_validate=validator_data_id)
                    result_data['status'] = "Ok"
                    result_data['message'] = "Successfully move to Next Stage"
                else:
                    result_data['status'] = "Fail"
                    result_data["message"] = "Internal Server Error"
        else:
            result_data['status'] = "Fail"
            result_data["message"] = "Other Method not allowed"
        result_data = json.dumps(result_data)
        # return HttpResponseRedirect(reverse('organisation-listing'))
    except Exception as e:
        raise Http404
    return HttpResponse(result_data)

####################################################################
# Name -mark_as_reverse_reviewer_doctor                            #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_doctor(request):
    try:
        if request.method == 'POST':
            doctor_id = request.POST['doctor_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            live_doc_true = None
            try:
                live_doc_true = request.POST['live_doc_true']
            except:
                live_doc_true = None

            if live_doc_true == 'TrUe':
                doctor_obj = Live_Doctor.objects.filter(id=int(doctor_id), current_user_id=request.user.id)
            else:
                doctor_obj = return_doc(doctor_id, request.user.id)

            #doctor_obj = return_doc(doctor_id, request.user.id)
            doctor_obj = doctor_obj[0]

            if doctor_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    doctor_obj.current_user_id = reviewer_data_id  #User.objects.get(id=reviewer_data_id)
                    doctor_obj.previous_user = request.user.id
                    doctor_obj.stage_id = 3
                    doctor_obj.free_text = free_text
                    doctor_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    if live_doc_true == 'TrUe':
                        return HttpResponseRedirect(reverse('publisher-live-doctor-listing'))
                    else:
                        return HttpResponseRedirect(reverse('publisher-doctor-listing'))


                except Exception as e:
                    raise Http404
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('publisher-doctor-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_complete_publisher_organisation                   #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_organisation(request):
    result_data = {}
    try:
        if request.method == 'POST':
            organisation_id = request.POST['organisation_id']
            publisher_data_id = request.POST['publisher_name']
            valid_data_id = request.POST['validator_id']
            check_publish_data = check_attached_doctor_in_publish_stage(organisation_id)

            if check_publish_data:
                result_data['status'] = "Fail"
                result_data["message"] = "This data is not publish stage"
                result_data["data"] = check_publish_data
            else:
                find_organisation = check_organisation_complete(organisation_id, request.user.id)
                if find_organisation and publisher_data_id and valid_data_id:
                    find_organisation.update(current_user=publisher_data_id, previous_user=request.user.id, stage=4,
                                             resource_validate=valid_data_id)
                    result_data['status'] = "Ok"
                    result_data['message'] = "Successfully move to Next Stage"
                else:
                    result_data['status'] = "Fail"
                    result_data["message"] = "Internal Server Error"
        else:
            result_data['status'] = "Fail"
            result_data["message"] = "Other Method not allowed"
        result_data = json.dumps(result_data)
        # return HttpResponseRedirect(reverse('organisation-listing'))
    except Exception as e:
        raise Http404
    return HttpResponse(result_data)

####################################################################
# Name -mark_as_reverse_reviewer_organisation                      #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_organisation(request):
    try:
        if request.method == 'POST':
            organisation_id = request.POST['organisation_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            organisation_obj = return_organisation(organisation_id, request.user.id)

            if organisation_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    organisation_obj.current_user = User.objects.get(id=reviewer_data_id)
                    organisation_obj.previous_user = request.user.id
                    organisation_obj.stage = Stage.objects.get(pk=3)
                    organisation_obj.free_text = free_text
                    organisation_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    return HttpResponseRedirect(reverse('publisher-organisation-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('publisher-organisation-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_reverse_caller_organisation                       #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_organisation(request):
    try:
        if request.method == 'POST':
            organisation_id = request.POST['organisation_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            organisation_obj = return_organisation(organisation_id,request.user.id)

            if organisation_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    organisation_obj.current_user = User.objects.get(id=caller_data_id)
                    organisation_obj.previous_user = request.user.id
                    organisation_obj.stage = Stage.objects.get(pk=2)
                    organisation_obj.free_text = free_text
                    organisation_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    return HttpResponseRedirect(reverse('organisation-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('organisation-listing'))
    except Exception as e:
        raise Http404

""" Master Data management """
####################################################################
# Name - master_data                                               #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def master_data(request):
    try:
        if request.method == "GET":
            return render(request, 'admin/master_data_management/master_data_management.html', dict(tab='master_data'))
    except Exception as e:
        raise Http404

####################################################################
# Name - country_data                                              #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def country_data(request):
    try:
        if request.method == "GET":
            country_obj = Country.objects.all().order_by('name')
            return render(request, 'admin/master_data_management/country_data_management.html',
                          dict(country_obj=country_obj))
    except Exception as e:
        raise Http404

####################################################################
# Name - country_add_edit                                          #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def country_add_edit(request, country_id=None):
    try:
        if country_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                country = Country.objects.get(id=country_id)
                return render(request, 'admin/master_data_management/country_add_edit.html',
                              {'country': country, 'admin_action': admin_action})
            if request.method == "POST":
                country = Country.objects.get(id=country_id)
                name = request.POST['country_name'].strip()
                code = request.POST['country_code'].strip()
                if name and code:
                    country_list = Country.objects.all()
                    country.name = name
                    country.country_code = code
                    country.save()
                    # response = master_SingleRecord_elastic_update(request,action='publish', master_type='country', id=country.id,edit='Yes')
                    if response:
                        print 'Updated in elastic'
                    else:
                        print 'Not Updated in elastic'
                    messages.success(request, "Country Edited successfully")
                    return redirect('country_data_page')
                else:
                    messages.error(request, "Please provide country name and code ")
                    return redirect(reverse("country_edit", args=[country.id, ]))
        else:
            admin_action = 'Add'

            if request.method == "GET":
                return render(request, 'admin/master_data_management/country_add_edit.html',
                              {'admin_action': admin_action})

            if request.method == "POST":
                name = request.POST['country_name'].strip()
                code = request.POST['country_code'].strip()
                if name and code:
                    country = Country.objects.all()
                    for i in country:
                        if i.name.lower() == name.lower():
                            messages.error(request, "Country name already exists ")
                            return redirect("country_add")
                        if i.country_code == code:
                            messages.error(request, "Country code already exists ")
                            return redirect("country_add")
                    country = Country(name=name, country_code=code)
                    country.save()
                    # response = master_SingleRecord_elastic_update(request,action='publish', master_type='country',id=country.id,edit=None)
                    messages.success(request, "New country added successfully")
                    return redirect('country_data_page')
                else:
                    messages.error(request, "Please provide country name and code ")
                    return redirect("country_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - state_data                                                #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def state_data(request):
    try:
        if request.method == "GET":
            state_obj = State.objects.all().order_by('name')
            return render(request, 'admin/master_data_management/state_data_management.html',
                          {'state_obj': state_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - state_add_edit                                            #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def state_add_edit(request, state_id=None):
    try:
        if state_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                state = State.objects.get(id=state_id)
                country_list = Country.objects.all()
                return render(request, 'admin/master_data_management/state_add_edit.html',
                              {'state': state, 'country_list': country_list, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['state_name'].strip()
                code = request.POST['state_code'].strip()
                country_id = request.POST['country'].strip()
                state = State.objects.get(id=state_id)
                if name and code and country_id:
                    state.name = name
                    state.state_code = code
                    con = Country.objects.get(id=country_id)
                    state.country = con
                    state.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='state',
                    #                                               id=state.id, edit='Yes')
                    messages.success(request, "state Edited successfully")
                    return redirect('state_data_page')
                else:
                    messages.error(request, "Please provide state name, code  and country ")
                    return redirect(reverse("state_edit", args=[state.id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                con = Country.objects.all()
                return render(request, 'admin/master_data_management/state_add_edit.html',
                              {'country_list': con, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['state_name'].strip()
                code = request.POST['state_code'].strip()
                country_id = request.POST['country'].strip()
                if name and code and country_id:
                    state = State.objects.all()
                    for i in state:
                        if i.name.lower() == name.lower() and i.country_id == int(country_id):
                            messages.error(request, "state name already exists with the chosen country ")
                            return redirect("state_add")
                        if i.state_code == code:
                            messages.error(request, "state code already exists ")
                            return redirect("state_add")
                    con = Country.objects.get(id=country_id)

                    state = State(name=name, state_code=code, country=con)
                    state.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='state',
                    #                                               id=state.id, edit=None)
                    messages.success(request, "New state add successfully")
                    return redirect('state_data_page')
                else:
                    messages.error(request, "Please provide state name and code ")
                    return redirect("state_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - city_data                                                 #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def city_data(request):
    try:
        if request.method == "GET":
            city_obj = City.objects.all().order_by('name')
            return render(request, 'admin/master_data_management/city_data_management.html',
                          {'city_obj': city_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - city_add_edit                                             #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def city_add_edit(request, city_id=None):
    try:
        if city_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                city = City.objects.get(id=city_id)
                state_list = State.objects.all()
                return render(request, 'admin/master_data_management/city_add_edit.html',
                              {'city': city, 'state_list': state_list, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['city_name'].strip()
                code = request.POST['city_code'].strip()
                state = request.POST['state'].strip()
                city = City.objects.get(id=city_id)
                if name and state and code and city:
                    city.name = name
                    city.city_code = code
                    con = State.objects.get(id=state)
                    city.state = con
                    city.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='city',
                    #                                               id=city.id, edit='Yes')
                    messages.success(request, "city Edited successfully")
                    return redirect('city_data_page')
                else:
                    messages.error(request, "Please provide city name and state ")
                    return redirect(reverse("city_edit", args=[city.id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                state_list = State.objects.all()
                return render(request, 'admin/master_data_management/city_add_edit.html',
                              {'state_list': state_list, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['city_name'].strip()
                code = request.POST['city_code'].strip()
                state = request.POST['state'].strip()
                if name and code and state:
                    city_list = City.objects.all()
                    for i in city_list:
                        if i.name.lower() == name.lower() and i.state_id == int(state):
                            messages.error(request, "city name already exists ")
                            return redirect("city_add")
                        if i.city_code == code:
                            messages.error(request, "city code already exists ")
                            return redirect("city_add")
                    con = State.objects.get(id=state)
                    city = City(name=name, city_code=code, state=con, delete=False)
                    city.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='city',
                    #                                               id=city.id, edit=None)
                    messages.success(request, "New city added successfully")
                    return redirect('city_data_page')
                else:
                    messages.error(request, "Please provide city name, code and state ")
                    return redirect("city_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - locality_data                                             #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def locality_data(request):
    try:
        if request.method == "GET":
            try :
                search_data = request.GET.get('search_data')
                results = Locality.objects.filter(name__icontains=search_data).order_by('name')
                paginator = Paginator(results, 100)
                page = request.GET.get('page')
                try:
                    results = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    results = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    results = paginator.page(paginator.num_pages)
                locality_obj = results
                return render(request, 'admin/master_data_management/locality_data_management.html',
                              {'locality_obj': locality_obj,'search_data':search_data})
            except :
                pass
            results = Locality.objects.all().order_by('name')
            paginator = Paginator(results, 100)
            page = request.GET.get('page')
            try:
                results = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                results = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                results = paginator.page(paginator.num_pages)
            locality_obj = results
            return render(request, 'admin/master_data_management/locality_data_management.html',
                          {'locality_obj': locality_obj })
    except Exception as e:
        raise Http404

####################################################################
# Name - locality_add_edit                                         #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def locality_add_edit(request, locality_id=None):
    try:
        if locality_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                locality = Locality.objects.get(id=locality_id)
                city_list = City.objects.all()
                return render(request, 'admin/master_data_management/locality_add_edit.html',
                              {'locality': locality, 'city_list': city_list, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['locality_name'].strip()
                longitude = request.POST['longitude'].strip()
                latitude = request.POST['latitude'].strip()
                city = request.POST['city'].strip()
                locality = Locality.objects.get(id=locality_id)
                if name and city:
                    locality.longitude = longitude
                    locality.latitude = latitude
                    locality.name = name
                    con = City.objects.get(id=city)
                    locality.city = con
                    locality.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='locality',
                    #                                               id=locality.id, edit='Yes')
                    messages.success(request, "locality Edited successfully")
                    return redirect('locality_data_page')
                else:
                    messages.error(request, "Please provide Both Name and City ")
                    return redirect(reverse("locality_edit", args=[locality.id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                city_list = City.objects.all()
                return render(request, 'admin/master_data_management/locality_add_edit.html',
                              {'city_list': city_list, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['locality_name'].strip()
                city = request.POST['city'].strip()
                latitude = request.POST['latitude'].strip()
                longitude = request.POST['longitude'].strip()
                larget_id = Locality.objects.all().order_by("-id")[0].id
                if name and city :
                    locality_list = Locality.objects.all()
                    for i in locality_list:
                        if i.name.lower() == name.lower() and i.city_id == int(city):
                            messages.error(request, "Locality name already exists ")
                            return redirect("locality_add")

                    con = City.objects.get(id=city)

                    if latitude and longitude:
                        locality = Locality(name=name, latitude=latitude, longitude=longitude, city_id=city)
                    else:
                        locality = Locality(name=name, city_id=city)
                    locality.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='locality',
                    #                                               id=locality.id, edit=None)
                    larget_id = Locality.objects.all().order_by("-id")[0].id
                    messages.success(request, "New locality added successfully & largest id = "+str(larget_id))
                    return redirect('locality_data_page')
                else:
                    messages.error(request, "Please provide all the information ")
                    return redirect("locality_add")
    except Exception as e:
        messages.error(request,str(e) + '  & largest id = '+ str(larget_id))
        return redirect("locality_add")

####################################################################
# Name - category_data                                             #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def category_data(request):
    try:
        if request.method == "GET":
            category_obj = Category.objects.all().order_by('name')
            return render(request, 'admin/master_data_management/category_data_management.html',
                          {'category_obj': category_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - category_add_edit                                         #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def category_add_edit(request, category_id=None):
    try:
        if category_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                category = Category.objects.get(id=category_id)
                return render(request, 'admin/master_data_management/category_add_edit.html',
                              {'category': category, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['category_name'].strip()
                category = Category.objects.get(id=category_id)
                if name:
                    category.name = name
                    category.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='category',
                    #                                               id=category.id, edit='Yes')
                    messages.success(request, "category Edited successfully")
                    return redirect('category_data_page')
                else:
                    messages.error(request, "Please provide category name ")
                    return redirect(reverse("category_edit", args=[category.id, ]))

        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/category_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['category_name'].strip()
                if name:
                    category_list = Category.objects.all()
                    for i in category_list:
                        if i.name.lower() == name.lower():
                            messages.error(request, "Category name already exists ")
                            return redirect("category_add")
                    category = Category(name=name)
                    category.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='category',
                    #                                               id=category.id, edit=None)

                    messages.success(request, "New category add successfully")
                    return redirect('category_data_page')
                else:
                    messages.error(request, "Please provide category name ")
                    return redirect("category_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - speciality_data                                           #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def speciality_data(request):
    try:
        try:
            search_data = request.GET.get('search_data')
        except:
            searchdata=None

        try:
            q= request.GET.get('search_dataa')
        except:
            q=None

        category_obj = Category.objects.all().order_by('name')
        if search_data:
            speciality_obj = Speciality.objects.filter(category_id=search_data).order_by('name')
            paginator = Paginator(speciality_obj, 100)
            page = request.GET.get('page')
            try:
                speciality_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                speciality_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                speciality_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/speciality_data_management.html',
                          {'speciality_obj': speciality_obj,'search_data':search_data,
                          'category_obj':category_obj})
        if q:
            try:
                results = Speciality.objects.filter(name__icontains=q).order_by('id')
            except:
                results = None
            if results:
                paginator = Paginator(results, 100)
                page = request.GET.get('page')
                try:
                    results = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    results = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    results = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/speciality_data_management.html',
                          {'speciality_obj': results, 'search_dataa':q,
                           'category_obj': category_obj})

        if request.method == "GET":
            speciality_obj = Speciality.objects.all()

            paginator = Paginator(speciality_obj, 100)
            page = request.GET.get('page')
            try:
                speciality_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                speciality_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                speciality_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/speciality_data_management.html',
                          {'speciality_obj': speciality_obj, 'search_data': search_data,
                           'category_obj': category_obj})

            return render(request, 'admin/master_data_management/speciality_data_management.html',
                          {'speciality_obj': speciality_obj,'category_obj':category_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - speciality_add _edit                                      #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def speciality_add_edit(request, speciality_id=None):
    try:
        if speciality_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                speciality = Speciality.objects.get(id=speciality_id)
                category_list = Category.objects.all()
                return render(request, 'admin/master_data_management/speciality_add_edit.html',
                              {'speciality': speciality, 'category_list': category_list,
                               'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['speciality_name'].strip()
                #approve = request.POST['approve'].strip()
                category_id = request.POST['category'].strip()
                speciality = Speciality.objects.get(id=speciality_id)
                # if approve == "" or approve == 'disapprove':
                #     approve = False
                # elif approve == 'approve':
                #     approve = True
                if name and category_id:
                    speciality.name = name
                    speciality.category_id = category_id
                    #speciality.approve = approve
                    con = Category.objects.get(id=category_id)
                    speciality.category = con
                    speciality.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='speciality',
                    #                                               id=speciality.id, edit='Yes')

                    messages.success(request, "Speciality Edited successfully")
                    return redirect('speciality_data_page')
                else:
                    messages.error(request, "Please provide name and category ")
                    return redirect(reverse("speciality_edit", args=[speciality.id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                category_list = Category.objects.all()
                return render(request, 'admin/master_data_management/speciality_add_edit.html',
                              {'category_list': category_list, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['speciality_name'].strip()
                #approve = request.POST['approve'].strip()
                category_id = request.POST['category'].strip()
                # if approve == "" or approve == 'disapprove':
                #     approve = False
                # elif approve == 'approve':
                #     approve = True
                if name and category:
                    speciality_list = Speciality.objects.all()
                    for i in speciality_list:
                        if i.name.lower() == name.lower() and i.category_id == int(category_id):
                            messages.error(request, "speciality name already exists ")
                            return redirect("speciality_add")
                    con = Category.objects.get(id=category_id)
                    speciality = Speciality(name=name, category_id=category_id, approve=True)
                    speciality.save()
                    response = master_SingleRecord_elastic_update(request, action='publish', master_type='speciality',
                                                                  id=speciality.id, edit=None)
                    messages.success(request, "New speciality add successfully")
                    return redirect('speciality_data_page')
                else:
                    messages.error(request, "Please provide all the information ")
                    return redirect("speciality_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - service_offered_data                                      #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def service_offered_data(request):
    try:
        category_obj = Category.objects.all().order_by('name')
        search_data = None
        search_data = request.GET.get('search_data')
        if search_data:
            service_offered_obj = Service_Offred.objects.filter(category_id=search_data).order_by('name')
            paginator = Paginator(service_offered_obj, 100)
            page = request.GET.get('page')
            try:
                service_offered_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                service_offered_obj = paginator.page(1)
                service_offered_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                service_offered_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/service_offered_data_management.html',
                          {'service_offered_obj': service_offered_obj,'search_data':search_data,
                           'category_obj':category_obj})
        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            service_offered_obj = Service_Offred.objects.filter(name__icontains=search_data_two).order_by('name')
            paginator = Paginator(service_offered_obj, 100)
            page = request.GET.get('page')
            try:
                service_offered_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                service_offered_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                service_offered_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/service_offered_data_management.html',
                          {'service_offered_obj': service_offered_obj, 'search_data_two': search_data_two,
                           'category_obj': category_obj})

        if request.method == "GET":
            service_offered_obj = Service_Offred.objects.all()
            paginator = Paginator(service_offered_obj, 100)
            page = request.GET.get('page')
            try:
                service_offered_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                service_offered_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                service_offered_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/service_offered_data_management.html',
                          {'service_offered_obj': service_offered_obj,'category_obj':category_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - organisation_types_data                                   #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def organisation_types_data(request):
    try:
        if request.method == "GET":
            org_types = Organisation_types.objects.all().order_by('type_name')
            paginator = Paginator(org_types, 100)
            page = request.GET.get('page')
            try:
                org_types = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                org_types = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                org_types = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/organisation_types_data_management.html',
                              {'org_types': org_types})
    except Exception as e:
        raise Http404

####################################################################
# Name - organisation_categories_data                              #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def organisation_categories_data(request):
    try:
        if request.method == "GET":
            org_categories = Organisation_categories.objects.all().order_by('category_name')
            paginator = Paginator(org_categories, 100)
            page = request.GET.get('page')
            try:
                org_categories = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                org_categories = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                org_categories = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/organisation_categories_data_management.html',
                              {'org_categories': org_categories})
    except Exception as e:
        raise Http404

####################################################################
# Name - organisation_facilities_data                              #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def organisation_facilities_data(request):
    try:
        if request.method == "GET":
            org_facilities = Facility.objects.all().order_by('name')
            paginator = Paginator(org_facilities, 100)
            page = request.GET.get('page')
            try:
                org_facilities = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                org_facilities = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                org_facilities = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/organisation_facilities_data_management.html',
                          {'org_facilities': org_facilities})
    except Exception as e:
        raise Http404

# ####################################################################
# # Name - disease_category_data                                     #
# # Owner - Nishank                                                  #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def disease_category_data(request):
    try:
        try:
            q=request.GET.get('search_data')
        except:
            q=None

        if q:
            try:
                disease_obj=Disease_Category_search_mapping.objects.filter(disease_name__icontains=q).order_by('id')
            except:
                disease_obj=None
            paginator = Paginator(disease_obj, 100)
            page = request.GET.get('page')
            try:
                disease_category = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                disease_category = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                disease_category = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/disease_category_data_management.html',
                          {'disease_category': disease_category,'search_data':q})

        if request.method == "GET":
            disease_category = Disease_Category_search_mapping.objects.all().order_by('disease_name')
            paginator = Paginator(disease_category, 100)
            page = request.GET.get('page')
            try:
                disease_category = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                disease_category = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                disease_category = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/disease_category_data_management.html',
                          {'disease_category': disease_category,'search_data':q})
    except Exception as e:
        raise Http404

####################################################################
# Name - disease_category_add_edit                                 #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def disease_category_add_edit(request, disease_category_id=None):
    try:
        if disease_category_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Disease_Category_search_mapping.objects.get(id=disease_category_id)
                cat_obj =  Category.objects.filter(delete=False)
                cat2_id_list = type_obj.categories
                l = cat2_id_list.split(',')
                templ =[]
                for i in l:
                    templ.append(i.strip())
                cat_id_list = templ
                return render(request, 'admin/master_data_management/disease_category_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action, 'cat_id_list': cat_id_list,
                               'cat_obj':cat_obj})

            elif request.method == "POST":
                disease_name = request.POST['disease_name'].strip()
                category_id_list = request.POST.getlist('categories')
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if disease_name:
                    type_obj = Disease_Category_search_mapping.objects.get(id=disease_category_id)
                    type_obj.disease_name = disease_name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True

                    temp_list = []
                    for i in category_id_list:
                        item_spaces_removed = i.strip()
                        temp_list.append(i)

                    category_id_list = temp_list
                    cat_string = ','.join(category_id_list)
                    type_obj.categories = cat_string
                    type_obj.save()
                    messages.success(request, "Disease Category Mapping edited successfully")
                    return redirect('disease_category_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("disease_category_edit", args=[disease_category_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                cat_obj = Category.objects.filter(delete=False)
                return render(request, 'admin/master_data_management/disease_category_add_edit.html',
                              {'admin_action': admin_action,'cat_obj':cat_obj })
            elif request.method == "POST":
                disease_name = request.POST['disease_name'].strip()
                category_id_list = request.POST.getlist('categories')
                l = []
                for i in category_id_list :
                    l.append(i.strip())
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if disease_name:
                    category_id_string = ",".join(l)
                    new_object = Disease_Category_search_mapping(disease_name=disease_name,
                                                                 categories=category_id_string)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "Disease Category Mapping added successfully")
                    return redirect('disease_category_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("disease_category_add"))
    except Exception as e:
        raise Http404

# ####################################################################
# # Name - pharmacy_type_data                                        #
# # By - Nishank                                                     #
######################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def pharmacy_type_data(request):
    try:
        if request.method == "GET":
            pharmacy_type = MedicalPharmacyStoreType.objects.all().order_by('name')
            paginator = Paginator(pharmacy_type, 100)
            page = request.GET.get('page')
            try:
                pharmacy_type = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                pharmacy_type = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                pharmacy_type = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/pharmacy_type_data_management.html',
                          {'pharmacy_type': pharmacy_type})
    except Exception as e:
        raise Http404

####################################################################
# Name - pharmacy_type_add_edit                                    #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def pharmacy_type_add_edit(request, pharmacy_type_id=None):
    try:
        if pharmacy_type_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = MedicalPharmacyStoreType.objects.get(id=pharmacy_type_id)
                return render(request, 'admin/master_data_management/pharmacy_type_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['type_name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = MedicalPharmacyStoreType.objects.get(id=pharmacy_type_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    response = master_SingleRecord_elastic_update(request, action='publish', master_type='pharmacytype',
                                                                  id=type_obj.id, edit='Yes')
                    messages.success(request, "Pharmacy Type edited successfully")
                    return redirect('pharmacy_type_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("pharmacy_type_edit", args=[pharmacy_type_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/pharmacy_type_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['type_name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = MedicalPharmacyStoreType(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    response = master_SingleRecord_elastic_update(request, action='publish', master_type='pharmacytype',
                                                                  id=new_object.id, edit=None)

                    messages.success(request, "New Pharmacy Type added successfully")
                    return redirect('pharmacy_type_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("pharmacy_type_add"))
    except Exception as e:
        raise Http404

# ####################################################################
# # Name - pharmacy_services_data                                    #
# # By - Nishank                                                     #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def pharmacy_services_data(request):
    try:
        if request.method == "GET":
            pharmacy_services = MedicalPharmacyStoreServices.objects.all().order_by('name')
            paginator = Paginator(pharmacy_services, 100)
            page = request.GET.get('page')
            try:
                pharmacy_services = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                pharmacy_services = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                pharmacy_services = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/pharmacy_services_data_management.html',
                          {'pharmacy_services': pharmacy_services})
    except Exception as e:
        raise Http404

####################################################################
# Name - pharmacy_services_add_edit                                #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def pharmacy_services_add_edit(request, pharmacy_services_id=None):
    try:
        if pharmacy_services_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = MedicalPharmacyStoreServices.objects.get(id=pharmacy_services_id)
                return render(request, 'admin/master_data_management/pharmacy_services_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['type_name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = MedicalPharmacyStoreServices.objects.get(id=pharmacy_services_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    response = master_SingleRecord_elastic_update(request, action='publish', master_type='pharmacyServices',
                                                                  id=type_obj.id, edit='Yes')
                    messages.success(request, "Pharmacy Type edited successfully")
                    return redirect('pharmacy_services_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("pharmacy_services_edit", args=[pharmacy_services_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/pharmacy_services_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['type_name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = MedicalPharmacyStoreServices(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    response = master_SingleRecord_elastic_update(request, action='publish', master_type='pharmacyServices',
                                                                  id=new_object.id, edit=None)
                    messages.success(request, "New Pharmacy Type added successfully")
                    return redirect('pharmacy_services_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("pharmacy_services_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - service_offered_add_edit                                  #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def service_offered_add_edit(request, service_offered_id=None):
    try:
        if service_offered_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                service_offered = Service_Offred.objects.get(id=service_offered_id)
                category_list = Category.objects.all()
                return render(request, 'admin/master_data_management/service_offered_add_edit.html',
                              {'service_offered': service_offered, 'category_list': category_list,
                               'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['service_offered_name'].strip()
                approve = request.POST['approve'].strip()
                category_id = request.POST['category'].strip()
                service_offered = Service_Offred.objects.get(id=service_offered_id)
                if approve == "" or approve == 'disapprove':
                    approve = False
                elif approve == 'approve':
                    approve = True

                if name and category_id:
                    service_offered.name = name
                    service_offered.category_id = category_id
                    service_offered.approve = approve
                    con = Category.objects.get(id=category_id)
                    service_offered.category = con
                    service_offered.save()
                    response = master_SingleRecord_elastic_update(request, action='publish', master_type='service_offered',
                                                                  id=service_offered.id, edit='Yes')

                    messages.success(request, "service_offered edited successfully")
                    return redirect('service_offered_data_page')
                else:
                    messages.error(request, "Please provide name and category ")
                    return redirect(reverse("service_offered_edit", args=[service_offered.id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                category_list = Category.objects.all()
                return render(request, 'admin/master_data_management/service_offered_add_edit.html',
                              {'category_list': category_list, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['service_offered_name'].strip()
                approve = request.POST['approve'].strip()
                category_id = request.POST['category'].strip()

                if name and category:
                    if approve == "" or approve == 'disapprove':
                        approve = False
                    elif approve == 'approve':
                        approve = True
                service_offered_list = Service_Offred.objects.all()
                for i in service_offered_list:
                    if i.name.lower() == name.lower() and i.category_id == int(category_id):
                        messages.error(request, "speciality name already exists ")
                        return redirect("service_offered_add")
                con = Category.objects.get(id=category_id)
                service_offered = Service_Offred(name=name, category=con, approve=approve)

                service_offered.save()
                response = master_SingleRecord_elastic_update(request, action='publish', master_type='service_offered',
                                                              id=service_offered.id, edit=None)

                messages.success(request, "New service_offered added successfully")
                return redirect('service_offered_data_page')
            else:
                messages.error(request, "Please provide all the information ")
                return redirect("service_offered_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - zone_data                                                 #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def zone_data(request):
    try:
        if request.method == "GET":
            zone_obj = Zone.objects.all().order_by('name')
            return render(request, 'admin/master_data_management/zone_data_management.html',
                          {'zone_obj': zone_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - zone_add_edit                                             #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def zone_add_edit(request, zone_id=None):
    try:
        if zone_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                zone = Zone.objects.get(id=zone_id)
                return render(request, 'admin/master_data_management/zone_add_edit.html',
                              {'zone': zone, 'admin_action ': admin_action})

            elif request.method == "POST":
                name = request.POST['zone_name'].strip()
                zone = Zone.objects.get(id=zone_id)
                if name:
                    zone.name = name
                    zone.save()
                    messages.success(request, "zone edited successfully")
                    return redirect('zone_data_page')
                else:
                    messages.error(request, "Please provide zone name ")
                    return redirect(reverse("zone_edit", args=[zone.id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/zone_add_edit.html',
                              {'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['zone_name'].strip()
                if name:
                    zone_list = Zone.objects.all()
                    for i in zone_list:
                        if i.name.lower() == name.lower():
                            messages.error(request, "Zone name already exists ")
                            return redirect("zone_add")
                    zone = Zone(name=name)
                    zone.save()
                    messages.success(request, "New zone add successfully")
                    return redirect('zone_data_page')
                else:
                    messages.error(request, "Please provide zone name ")
                    return redirect("zone_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - zone_location_data                                        #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def zone_location_data(request):
    try:
        if request.method == "GET":
            try :
                search_data = request.GET.get('search_data')
                results = ZoneLocation.objects.filter(name__icontains=search_data).order_by('name')
                paginator = Paginator(results, 100)
                page = request.GET.get('page')
                try:
                    results = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    results = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    results = paginator.page(paginator.num_pages)
                zone_location_obj = results
                return render(request, 'admin/master_data_management/zone_location_data_management.html',
                              {'zone_location_obj': zone_location_obj,'search_data':search_data})
            except :
                pass
            results = ZoneLocation.objects.all().order_by('name')
            paginator = Paginator(results, 100)
            page = request.GET.get('page')
            try:
                results = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                results = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                results = paginator.page(paginator.num_pages)
            zone_location_obj = results
            return render(request, 'admin/master_data_management/zone_location_data_management.html',
                          {'zone_location_obj': zone_location_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - zone_location_add_edit                                    #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def zone_location_add_edit(request, zone_location_id=None):
    try:
        if zone_location_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                zonelocation = ZoneLocation.objects.get(id=zone_location_id)
                zone_list = Zone.objects.all()
                return render(request, 'admin/master_data_management/zone_location_add_edit.html',
                              {'zonelocation': zonelocation, 'zone_list': zone_list, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['zone_location_name'].strip()
                zone_id = request.POST['zone'].strip()
                zonelocation = ZoneLocation.objects.get(id=zone_location_id)
                if name and zone_id:
                    zone = Zone.objects.get(id=zone_id)
                    zonelocation.name = name
                    zonelocation.zone = zone
                    zonelocation.save()
                    messages.success(request, "zone location edited successfully")
                    return redirect('zone_location_data_page')
                else:
                    messages.error(request, "Please provide name and zone")
                    return redirect(reverse("zone_location_edit", args=[zonelocation.id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                zone_list = Zone.objects.all()
                return render(request, 'admin/master_data_management/zone_location_add_edit.html',
                              {'zone_list': zone_list, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['zone_location_name'].strip()
                zone_id = request.POST['zone'].strip()
                if name and zone_id:
                    zone_location_list = ZoneLocation.objects.all()
                    for i in zone_location_list:
                        if i.name.lower() == name.lower() and i.zone_id == int(zone_id):
                            messages.error(request, "Zone Location already exists ")
                            return redirect("zone_location_add")
                    con = Zone.objects.get(id=zone_id)
                    zone_location = ZoneLocation(name=name, zone=con)
                    zone_location.save()
                    messages.success(request, "New zone_location added successfully")
                    return redirect('zone_location_data_page')
                else:
                    messages.error(request, "Please provide name and zone ")
                    return redirect(reverse("zone_location_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - organisation_types_add_edit                               #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def organisation_types_add_edit(request, organisation_types_id=None):
    try:
        if organisation_types_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Organisation_types.objects.get(id=organisation_types_id)
                return render(request, 'admin/master_data_management/organisation_types_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['type_name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name :
                    type_obj = Organisation_types.objects.get(id=organisation_types_id)
                    type_obj.type_name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Organisation Type edited successfully")
                    return redirect('organisation_types_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("organisation_types_edit", args=[organisation_types_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/organisation_types_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['type_name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name :
                    new_object = Organisation_types(type_name = name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Organization Type added successfully")
                    return redirect('organisation_types_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("organisation_types_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - organisation_categories_add_edit                          #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def organisation_categories_add_edit(request, organisation_categories_id=None):
    try:
        if organisation_categories_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Organisation_categories.objects.get(id=organisation_categories_id)
                return render(request, 'admin/master_data_management/organisation_categories_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['category_name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name :
                    type_obj = Organisation_categories.objects.get(id=organisation_categories_id)
                    type_obj.category_name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Organisation Category edited successfully")
                    return redirect('organisation_categories_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("organisation_categories_edit", args=[organisation_categories_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/organisation_categories_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['category_name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name :
                    new_object = Organisation_categories(category_name = name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Organization Category added successfully")
                    return redirect('organisation_categories_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("organisation_categories_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - organisation_facilities_add_edit                          #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def organisation_facilities_add_edit(request, organisation_facilities_id=None):
    try:
        if organisation_facilities_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Facility.objects.get(id=organisation_facilities_id)
                return render(request, 'admin/master_data_management/organisation_facilities_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name :
                    type_obj = Facility.objects.get(id=organisation_facilities_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Organisation Facility edited successfully")
                    return redirect('organisation_facilities_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("organisation_facilities_edit", args=[organisation_facilities_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/organisation_facilities_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name :
                    new_object = Facility(name = name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Organization Facility added successfully")
                    return redirect('organisation_facilities_data_page')
                else:
                    messages.error(request, "Please provide name")
                    return redirect(reverse("organisation_facilities_add"))
    except Exception as e:
        raise Http404

"""All Edit Function here"""
####################################################################
# Name - edit_reward                                               #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def edit_reward(request):
    try:
        reward_id = request.POST['reward_id'].strip()
        reward_name = request.POST['reward_name'].strip()
        if reward_id and reward_name:
            reward_data = RewardRecognisation.objects.filter(pk=reward_id).update(reward_data=reward_name)
            messages.success(request, 'Updated')
        else:
            messages.error(request, 'Please enter data')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - edit_member                                               #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def edit_member(request):
    try:
        member_id = request.POST['member_id'].strip()
        membership_data = request.POST['membership_data'].strip()
        if member_id and membership_data:
            member_data = Membership.objects.filter(pk=member_id).update(name=membership_data)
            messages.success(request, 'Updated')
        else:
            messages.error(request, 'Please enter data')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - edit_education                                            #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def edit_education(request):
    try:
        education_id = request.POST['education_id'].strip()
        education_data = request.POST['education_data'].strip()
        if education_id and education_data:
            edu_data = Doctor_Education.objects.filter(pk=education_id).update(education_data=education_data)
            messages.success(request, 'Updated')
        else:
            messages.error(request, 'Please enter data')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - edit_experience                                           #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def edit_experience(request):
    try:
        experience_id = request.POST['experience_id'].strip()
        exp_data = request.POST['exp_data'].strip()
        if experience_id and exp_data:
            ex_data = Doctor_Experience.objects.filter(pk=experience_id).update(experience_data=exp_data)
            messages.success(request, 'Updated')
        else:
            messages.error(request, 'Please enter data')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - edit_attach_data                                          #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def edit_attach_data(request):
    try:
        attach_id = request.POST['attach_id'].strip()
        consultancy_fees = request.POST['consultancy_fees'].strip()
        try:
            did = request.POST['did'].strip()
        except:
            did = ''
        try:
            extension = request.POST['extension'].strip()
        except:
            extension = ''
        try:
            departments = request.POST.getlist('Departments')
        except:
            departments = ''
        if not departments:
            departments = None
        else:
            temp_dep = ",".join(departments)
            departments = temp_dep
        if attach_id and consultancy_fees and departments :
            attach_data = AttachWithDoctor.objects.filter(pk=attach_id).update(consultancy_fee=consultancy_fees,
                                                                               did=did,extension=extension,department=departments )
            messages.success(request, 'Updated')
        else:
            messages.error(request, 'Please provide Consultancy Fee and atleast 1 Department')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

""" Active and deactivate Doctor Data"""
####################################################################
# Name - disable_doctor_data                                       #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def disable_doctor_data(request, doctor_id=None):
    try:
        if doctor_id is not None:
            Doctor.objects.filter(id=doctor_id).update(is_disable=True)
            messages.success(request, 'Successfully Disable')
        else:
            messages.error(request, 'Try again')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


####################################################################
# Name - disable_unpublish_doctor_data                             #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def disable_unpublish_doctor_data(request, doctor_id=None):
    try:
        if doctor_id is not None:
            Doctor.objects.filter(id=doctor_id).update(is_disable=True)
            import elasticsearch_client
            response = elasticsearch_client.delete_document('global', 'doctor', doctor_id)
            if response:
                doctor_obj = Doctor.objects.filter(id=doctor_id)
                if doctor_obj:
                    doctor_obj.update(publish=False, stage=4)
                    messages.success(request, 'Successfully Disabled and Unpublished')
            else:
                messages.error(request, 'Successfully Disabled but NOT Unpublished')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        else:
            messages.error(request, 'Try again')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - enable_doctor_data                                        #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def enable_doctor_data(request, doctor_id=None):
    try:
        if doctor_id is not None:
            Doctor.objects.filter(id=doctor_id).update(is_disable=False)
            messages.success(request, 'Successfully Enable')
        else:
            messages.error(request, 'Try again')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - enable_nopublish_doctor_data                              #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def enable_nopublish_doctor_data(request, doctor_id=None):
    try:
        if doctor_id is not None:
            Doctor.objects.filter(id=doctor_id).update(is_disable=False)
            messages.success(request, 'Successfully EnableD')
        else:
            messages.error(request, 'Try again')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - disable_organisation_data                                 #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def disable_organisation_data(request, organisation_id=None):
    try:
        if organisation_id is not None:
            OrganisationName.objects.filter(id=organisation_id).update(is_disable=True)
            messages.success(request, 'Successfully Disable')
        else:
            messages.error(request, 'Try again')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - enable_organisation_data                                  #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def enable_organisation_data(request, organisation_id=None):
    try:
        if organisation_id is not None:
            OrganisationName.objects.filter(id=organisation_id).update(is_disable=False)
            messages.success(request, 'Successfully Enable')
        else:
            messages.error(request, 'Try again')
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - deactivate_any_type                                       #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def deactivate_any_master_type(request, object_id=None, object_type=None):
    model = None
    if object_id and object_type:

        if object_type == '1':
            model = Country
            url_part = 'country'
            response = master_SingleRecord_elastic_update(request,action='un-publish', master_type='country',id=object_id,edit=None)
        elif object_type == '2':
            model = State
            url_part = 'state'
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='state',
                                                          id=object_id, edit=None)
        elif object_type == '3':
            model = City
            url_part = 'city'
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='city',
                                                          id=object_id, edit=None)
        elif object_type == '4':
            model = Locality
            url_part = 'locality'
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='locality',
                                                          id=object_id, edit=None)
        elif object_type == '5':
            model = Category
            url_part = 'category'
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='category',
                                                          id=object_id, edit=None)
        elif object_type == '6':
            model = Speciality
            url_part = 'speciality'
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='speciality',
                                                          id=object_id, edit=None)
        elif object_type == '7':
            model = Service_Offred
            url_part = 'service-offered'
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='service_offered',
                                                          id=object_id, edit=None)
        elif object_type == '8':
            model = Zone
            url_part = 'zone'
        elif object_type == '9':
            model = ZoneLocation
            url_part = 'zone-location'

        elif object_type == '10':
            model = Disease
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, "Successfully Deactivated Disease")
            return redirect(reverse('disease-by-users'))

        elif object_type == '14':
            model = ServicePlan
            object = model.objects.get(id=object_id)
            object.activation_status = False
            object.save()
            messages.success(request, " Successfully Deactivated Home Plan")
            return redirect(reverse('home-plan-management'))

        elif object_type == '15':
            model = ServicePlan
            object = model.objects.get(id=object_id)
            object.activation_status = False
            object.save()
            messages.success(request, " Successfully Deactivated Life Plan ")
            return redirect(reverse('life-plan-management'))

        elif object_type == '16':
            model = ServicePlan
            object = model.objects.get(id=object_id)
            object.activation_status = False
            object.save()
            messages.success(request, " Successfully Deactivated Enterprise Plan")
            return redirect(reverse('enterprise-plan-management'))

        elif object_type == '17':
            model = Labs
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, " Successfully De-Activated Lab")
            return redirect(reverse('lab-assignment'))

        elif object_type == '18':
            model = BloodBank
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, " Successfully De-Activated Blood Bank")
            return redirect(reverse('bloodbank-assignment'))

        elif object_type == '19':
            model = Ambulance
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, " Successfully De-Activated Ambulance")
            return redirect(reverse('ambulance-assignment'))

        elif object_type == '20':
            model = MedicalPharmacyStore
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, " Successfully De-Activated Pharmacy")
            return redirect(reverse('pharmacy-assignment'))

        elif object_type == '21':
            model = Disease
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, " Successfully De-Activated Disease")
            return redirect(reverse('disease-assignment'))

        elif object_type == '22':
            model = Drug
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, " Successfully De-Activated Drug")
            return redirect(reverse('drug-assignment'))

        elif object_type == '23':
            model = Symptoms
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, " Successfully De-Activated Symptom")
            return redirect(reverse('symptoms-assignment'))

        elif object_type == '24':
            model = Organisation_types
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, " Successfully De-Activated Organisation Type")
            return redirect(reverse('organisation_types_data_page'))

        elif object_type == '25':
            model = Organisation_categories
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, " Successfully De-Activated Organisation Category")
            return redirect(reverse('organisation_categories_data_page'))

        elif object_type == '26':
            model = Facility
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, " Successfully De-Activated Organisation Facility")
            return redirect(reverse('organisation_facilities_data_page'))

        elif object_type == '27':
            model = Disease_Category_search_mapping
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, " Successfully De-Activated Disease Category Mapping")
            return redirect(reverse('disease_category_data_page'))

        elif object_type == '28':
            model = MedicalPharmacyStoreType
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='pharmacytype',
                                                          id=object_id, edit=None)
            messages.success(request, " Successfully De-Activated Pharmacy Type")
            return redirect(reverse('pharmacy_type_data_page'))

        elif object_type == '29':
            model = MedicalPharmacyStoreServices
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='pharmacyServices',
                                                          id=object_id, edit=None)
            messages.success(request, "Successfully De-Activated Pharmacy Service")
            return redirect(reverse('pharmacy_services_data_page'))

        elif object_type == '30':
            model = NewsTypeMaster
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated News Type Master")
            return redirect(reverse('newstype_master_data_page'))

        elif object_type == '31':
            model = Lab_accreditation_body_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Lab Accredition Master")
            return redirect(reverse('lab_accreditation_master_data_page'))

        elif object_type == '32':
            model = Lab_type_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Lab Type Master")
            return redirect(reverse('lab_type_master_data_page'))

        elif object_type == '33':
            model = Lab_test_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='labtest',
                                                          id=object_id, edit=None)
            messages.success(request, "Successfully De-Activated Lab Type Master")
            return redirect(reverse('lab_test_master_data_page'))

        elif object_type == '34':
            model = Lab_services_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='labservices',
                                                          id=object_id, edit=None)
            messages.success(request, "Successfully De-Activated Lab Service Master")
            return redirect(reverse('lab_services_master_data_page'))

        elif object_type == '35':
            model = Lab_department_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Lab Department Master")
            return redirect(reverse('lab_department_master_data_page'))

        elif object_type == '36':
            model = BloodBankServices
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Bloodbank Service Master")
            return redirect(reverse('bloodbank_services_master_data_page'))

        elif object_type == '37':
            model = RehabServices
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Rehab Service Master")
            return redirect(reverse('rehab_services_master_data_page'))

        elif object_type == '38':
            model = Rehab_type_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Rehab Type Master")
            return redirect(reverse('rehab_type_master_data_page'))

        elif object_type == '39':
            model = Rehab_speciality_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Rehab Speciality Master")
            return redirect(reverse('rehab_speciality_master_data_page'))

        elif object_type == '40':
            model = Ambulance_type_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Ambulance Type Master")
            return redirect(reverse('ambulance_type_master_data_page'))

        elif object_type == '41':
            model = AmbulanceServices
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Ambulance Service Master")
            return redirect(reverse('ambulance_services_master_data_page'))

        elif object_type == '42':
            model = RehabCenter
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, "Successfully De-Activated Rehab ")
            return redirect(reverse('rehab-assignment'))

        elif object_type == '43':
            model = Nurse_bureauServices
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Nurse Bureau Service ")
            return redirect(reverse('nurse_bureau_services_master_data_page'))

        elif object_type == '44':
            model = Nurse_bureau_speciality_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Nurse Bureau Speciality")
            return redirect(reverse('nurse_bureau_speciality_master_data_page'))

        elif object_type == '45':
            model = Nurse_Bureau
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, "Successfully De-Activated Nurse Bureau")
            return redirect(reverse('nurse_bureau-assignment'))

        elif object_type == '46':
            model = DietitianServices
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Dietitian Service")
            return redirect(reverse('dietitian_services_master_data_page'))

        elif object_type == '47':
            model = Dietitian_type_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Dietitian Type")
            return redirect(reverse('dietitian_type_master_data_page'))

        elif object_type == '48':
            model = Dietitian
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, "Successfully De-Activated Dietitian ")
            return redirect(reverse('dietitian-assignment'))

        elif object_type == '49':
            model = TherapistServices
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Therapist Service")
            return redirect(reverse('therapist_services_master_data_page'))

        elif object_type == '50':
            model = Therapist_type_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Therapist Type")
            return redirect(reverse('therapist_type_master_data_page'))

        elif object_type == '51':
            model = Therapist_speciality_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Therapist Speciality")
            return redirect(reverse('therapist_speciality_master_data_page'))

        elif object_type == '52':
            model = Therapist
            object = model.objects.get(id=object_id)
            object.is_disable = True
            object.save()
            messages.success(request, "Successfully De-Activated Therapist ")
            return redirect(reverse('therapist-assignment'))

        elif object_type == '53':
            model = Disease_type_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Disease Type")
            return redirect(reverse('disease_type_master_data_page'))

        elif object_type == '54':
            model = Kurable_subtype_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated kurables Sub Type")
            return redirect(reverse('kurables_type_master_data_page'))

        elif object_type == '55':
            model = Healthoholic_subtype_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Healthoholic Sub Type")
            return redirect(reverse('healthoholic_type_master_data_page'))

        elif object_type == '56':
            model = CaResidense_subtype_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated CaResidense Sub Type")
            return redirect(reverse('caresidense_type_master_data_page'))

        elif object_type == '57':
            model = Facility
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='facility',
                                                          id=object_id, edit=None)
            messages.success(request, "Successfully De-Activated Facility")
            return redirect(reverse('facility_data_page'))

        elif object_type == '58':
            model = Department
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='department',
                                                          id=object_id, edit=None)
            messages.success(request, "Successfully De-Activated Department")
            return redirect(reverse('department_data_page'))

        elif object_type == '59':
            model = Doc_Care_services_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            #response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='',
            #                                              id=object_id, edit=None)
            messages.success(request, "Successfully De-Activated Doc Home Care Type")
            return redirect(reverse('doc_care_services_master_data_page'))

        elif object_type == '60':
            model = Disease_search_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            #response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='',
            #                                              id=object_id, edit=None)
            messages.success(request, "Successfully De-Activated Disease")
            return redirect(reverse('disease_search_master_data_page'))

        elif object_type == '61':
            model = Symptoms_search_master
            object = model.objects.get(id=object_id)
            object.delete = True
            object.save()
            #response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='',
            #                                              id=object_id, edit=None)
            messages.success(request, "Successfully De-Activated Symptom")
            return redirect(reverse('symptoms_search_master_data_page'))

        elif object_type == '63':
            model = Doctor_ServiceOffered_New
            object = model.objects.get(id=object_id)
            object.deleete = True
            object.save()
            #response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='',
            #                                              id=object_id, edit=None)
            messages.success(request, "Successfully De-Activated Service Offered")
            return redirect(reverse('new_service_offered_data_page'))

        elif object_type == '64':
            model = Doctor_Speciality_New
            object = model.objects.get(id=object_id)
            object.deleete = True
            object.save()
            #response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='',
            #                                              id=object_id, edit=None)
            messages.success(request, "Successfully De-Activated Speciality")
            return redirect(reverse('new_speciality_data_page'))

        elif object_type == '65':
            model = PlanCat
            object = model.objects.get(id=object_id)
            pl_obj = PlanNew.objects.all()
            for i in pl_obj:
                if i.plan_category == object:
                    messages.error(request, "Plan Category Associated with a Plan")
                    return redirect(reverse('category_listing'))
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Plan Category")
            return redirect(reverse('category_listing'))

        elif object_type == '66':
            model = PlanSubCat
            object = model.objects.get(id=object_id)
            pl_obj = PlanNew.objects.all()
            for i in pl_obj:
                if i.plan_sub_category == object:
                    messages.error(request, "Plan Sub Category Associated with a Plan")
                    return redirect(reverse('sub_category_listing'))
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Plan Sub Category")
            return redirect(reverse('sub_category_listing'))

        elif object_type == '67':
            model = PlanDetails
            object = model.objects.get(id=object_id)
            detail = object.name
            pl_obj = PlanNew.objects.all()
            for p in pl_obj:
                test_list = p.test_details
                for i in test_list:
                    if i['d_name'] == detail:
                        messages.error(request, "Plan Detail Associated with a plan")
                        return redirect(reverse('plan_details_listing'))
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Plan Detail")
            return redirect(reverse('plan_details_listing'))

        elif object_type == '68':
            model = PlanComponent
            object = model.objects.get(id=object_id)
            component = object.name
            pl_obj = PlanNew.objects.all()
            for p in pl_obj:
                test_list = p.test_details
                for i in test_list:
                    for j in i['d_comp']:
                        if j['c_name'] == component:
                            messages.error(request, "Plan Component Associated with a plan")
                            return redirect(reverse('component_listing'))
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Plan Component")
            return redirect(reverse('component_listing'))

        elif object_type == '69':
            model = PlanSubComponent
            object = model.objects.get(id=object_id)
            sub_component = object.name
            pl_obj = PlanNew.objects.all()
            for p in pl_obj:
                test_list = p.test_details
                for i in test_list:
                    for j in i['d_comp']:
                        for k in j['c_subcomp']:
                            if k['s_name'] == sub_component:
                                messages.error(request, "Plan Component Associated with a plan")
                                return redirect(reverse('sub_component_listing'))
            object.delete = True
            object.save()
            messages.success(request, "Successfully De-Activated Plan Sub Component")
            return redirect(reverse('sub_component_listing'))

        try:

            object = model.objects.get(id=object_id)
            if object.delete:
                messages.success(request, " Already Deactivated")
            else:
                object.delete = True
                object.save()
                messages.success(request, " Successfully Deactivated")
            return_url = '/master/manage/' + url_part + '/'
            return redirect(return_url)
        except Exception as e:
            messages.error(request, 'Something Bad Happened')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    else:
        messages.error(request, 'Something bad happened')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


####################################################################
# Name - Activate_any_type                                         #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def activate_any_master_type(request, object_id=None, object_type=None):
    if object_id and object_type:

        if object_type == '1':
            model = Country
            url_part = 'country'
            # response = master_SingleRecord_elastic_update(request,action='publish', master_type='country', id=object_id,edit=None)

        elif object_type == '2':
            model = State
            url_part = 'state'
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='state',
            #                                               id=object_id, edit=None)
        elif object_type == '3':
            model = City
            url_part = 'city'
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='city',
            #                                               id=object_id, edit=None)
        elif object_type == '4':
            model = Locality
            url_part = 'locality'
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='locality',
            #                                               id=object_id, edit=None)
        elif object_type == '5':
            model = Category
            url_part = 'category'
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='category',
            #                                               id=object_id, edit=None)
        elif object_type == '6':
            model = Speciality
            url_part = 'speciality'
            response = master_SingleRecord_elastic_update(request, action='publish', master_type='speciality',
                                                          id=object_id, edit=None)
        elif object_type == '7':
            model = Service_Offred
            url_part = 'service-offered'
            response = master_SingleRecord_elastic_update(request, action='publish', master_type='service_offered',
                                                          id=object_id, edit=None)
        elif object_type == '8':
            model = Zone
            url_part = 'zone'
        elif object_type == '9':
            model = ZoneLocation
            url_part = 'zone-location'
        elif object_type == '10':
            model = Disease
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, " Successfully Activated Disease")
            return redirect(reverse('disease-by-users'))


        elif object_type == '14':
            model = ServicePlan
            object = model.objects.get(id=object_id)
            object.activation_status = True
            object.save()
            messages.success(request, " Successfully Activated Home Plan")
            return redirect(reverse('home-plan-management'))

        elif object_type == '15':
            model = ServicePlan
            object = model.objects.get(id=object_id)
            object.activation_status = True
            object.save()
            messages.success(request, " Successfully Activated Life Plan")
            return redirect(reverse('life-plan-management'))

        elif object_type == '16':
            model = ServicePlan
            object = model.objects.get(id=object_id)
            object.activation_status = True
            object.save()
            messages.success(request, " Successfully Activated Enterprise Plan")
            return redirect(reverse('enterprise-plan-management'))

        elif object_type == '17':
            model = Labs
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, " Successfully Activated Lab")
            return redirect(reverse('lab-assignment'))

        elif object_type == '18':
            model = BloodBank
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, " Successfully Activated Blood Bank")
            return redirect(reverse('bloodbank-assignment'))

        elif object_type == '19':
            model = Ambulance
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, " Successfully Activated Ambulance")
            return redirect(reverse('ambulance-assignment'))


        elif object_type == '20':
            model = MedicalPharmacyStore
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, " Successfully Activated Pharmacy")
            return redirect(reverse('pharmacy-assignment'))

        elif object_type == '21':
            model = Disease
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, " Successfully Activated Disease")
            return redirect(reverse('disease-assignment'))

        elif object_type == '22':
            model = Drug
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, " Successfully Activated Drug")
            return redirect(reverse('drug-assignment'))

        elif object_type == '23':
            model = Symptoms
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, " Successfully Activated Symptom")
            return redirect(reverse('symptoms-assignment'))

        elif object_type == '24':
            model = Organisation_types
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, " Successfully Activated Organisation Type")
            return redirect(reverse('organisation_types_data_page'))

        elif object_type == '25':
            model = Organisation_categories
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, " Successfully Activated Organisation Category")
            return redirect(reverse('organisation_categories_data_page'))

        elif object_type == '26':
            model = Facility
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, " Successfully Activated Organisation Facility")
            return redirect(reverse('organisation_facilities_data_page'))



        elif object_type == '27':
            model = Disease_Category_search_mapping
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Disease Category Mapping")
            return redirect(reverse('disease_category_data_page'))


        elif object_type == '28':
            model = MedicalPharmacyStoreType
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='pharmacytype',
            #                                               id=object_id, edit=None)
            messages.success(request, " Successfully Activated Pharmacy Type")
            return redirect(reverse('pharmacy_type_data_page'))


        elif object_type == '29':
            model = MedicalPharmacyStoreServices
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='pharmacyServices',
            #                                               id=object_id, edit=None)
            messages.success(request, "Successfully Activated Pharmacy Service")
            return redirect(reverse('pharmacy_services_data_page'))

        elif object_type == '30':
            model = NewsTypeMaster
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated News Type Master")
            return redirect(reverse('newstype_master_data_page'))

        elif object_type == '31':
            model = Lab_accreditation_body_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Lab Accredition Master")
            return redirect(reverse('lab_accreditation_master_data_page'))

        elif object_type == '32':
            model = Lab_type_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Lab Type Master")
            return redirect(reverse('lab_type_master_data_page'))

        elif object_type == '33':
            model = Lab_test_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='labtest',
            #                                               id=object_id, edit=None)
            messages.success(request, "Successfully Activated Lab Type Master")
            return redirect(reverse('lab_test_master_data_page'))

        elif object_type == '34':
            model = Lab_services_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='labservices',
            #                                               id=object_id, edit=None)
            messages.success(request, "Successfully Activated Lab Service Master")
            return redirect(reverse('lab_services_master_data_page'))


        elif object_type == '35':
            model = Lab_department_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Lab Department Master")
            return redirect(reverse('lab_department_master_data_page'))

        elif object_type == '36':
            model = BloodBankServices
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Bloodbank Service Master")
            return redirect(reverse('bloodbank_services_master_data_page'))

        elif object_type == '37':
            model = RehabServices
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Rehab Service Master")
            return redirect(reverse('rehab_services_master_data_page'))

        elif object_type == '38':
            model = Rehab_type_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Rehab Type Master")
            return redirect(reverse('rehab_type_master_data_page'))


        elif object_type == '39':
            model = Rehab_speciality_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Rehab Speciality Master")
            return redirect(reverse('rehab_speciality_master_data_page'))

        elif object_type == '40':
            model = Ambulance_type_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Ambulance Type Master")
            return redirect(reverse('ambulance_type_master_data_page'))

        elif object_type == '41':
            model = AmbulanceServices
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Ambulance Service Master")
            return redirect(reverse('ambulance_services_master_data_page'))

        elif object_type == '42':
            model = RehabCenter
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, "Successfully Activated Rehab ")
            return redirect(reverse('rehab-assignment'))

        elif object_type == '43':
            model = Nurse_bureauServices
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Nurse Bureau Service ")
            return redirect(reverse('nurse_bureau_services_master_data_page'))

        elif object_type == '44':
            model = Nurse_bureau_speciality_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Nurse Bureau Speciality")
            return redirect(reverse('nurse_bureau_speciality_master_data_page'))

        elif object_type == '45':
            model = Nurse_Bureau
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, "Successfully Activated Nurse Bureau")
            return redirect(reverse('nurse_bureau-assignment'))

        elif object_type == '46':
            model = DietitianServices
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Dietitian Service")
            return redirect(reverse('dietitian_services_master_data_page'))

        elif object_type == '47':
            model = Dietitian_type_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Dietitian Type")
            return redirect(reverse('dietitian_type_master_data_page'))

        elif object_type == '48':
            model = Dietitian
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, "Successfully Activated Dietitian ")
            return redirect(reverse('dietitian-assignment'))

        elif object_type == '49':
            model = TherapistServices
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Therapist Service")
            return redirect(reverse('therapist_services_master_data_page'))

        elif object_type == '50':
            model = Therapist_type_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Therapist Type")
            return redirect(reverse('therapist_type_master_data_page'))

        elif object_type == '51':
            model = Therapist_speciality_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Therapist Speciality")
            return redirect(reverse('therapist_speciality_master_data_page'))

        elif object_type == '52':
            model = Therapist
            object = model.objects.get(id=object_id)
            object.is_disable = False
            object.save()
            messages.success(request, "Successfully Activated Therapist ")
            return redirect(reverse('therapist-assignment'))

        elif object_type == '53':
            model = Disease_type_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully De-Activated Disease Type")
            return redirect(reverse('disease_type_master_data_page'))

        elif object_type == '54':
            model = Kurable_subtype_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated kurables Sub Type")
            return redirect(reverse('kurables_type_master_data_page'))

        elif object_type == '55':
            model = Healthoholic_subtype_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Healthoholic Sub Type")
            return redirect(reverse('healthoholic_type_master_data_page'))

        elif object_type == '56':
            model = CaResidense_subtype_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated CaResidense Sub Type")
            return redirect(reverse('caresidense_type_master_data_page'))

        elif object_type == '57':
            model = Facility
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='facility',
            #                                               id=object_id, edit=None)
            messages.success(request, "Successfully Activated Facility")
            return redirect(reverse('facility_data_page'))

        elif object_type == '58':
            model = Department
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='department',
            #                                               id=object_id, edit=None)
            messages.success(request, "Successfully Activated Department")
            return redirect(reverse('department_data_page'))

        elif object_type == '59':
            model = Doc_Care_services_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            #response = master_SingleRecord_elastic_update(request, action='publish', master_type='',
            #                                              id=object_id, edit=None)
            messages.success(request, "Successfully Activated Doc Home Care Type")
            return redirect(reverse('doc_care_services_master_data_page'))

        elif object_type == '60':
            model = Disease_search_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            #response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='',
            #                                              id=object_id, edit=None)
            messages.success(request, "Successfully Activated Disease")
            return redirect(reverse('disease_search_master_data_page'))

        elif object_type == '61':
            model = Symptoms_search_master
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            #response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='',
            #                                              id=object_id, edit=None)
            messages.success(request, "Successfully Activated Symptom")
            return redirect(reverse('symptoms_search_master_data_page'))

        elif object_type == '63':
            model = Doctor_ServiceOffered_New
            object = model.objects.get(id=object_id)
            object.deleete = False
            object.save()
            #response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='',
            #                                              id=object_id, edit=None)
            messages.success(request, "Successfully Activated Service Offered")
            return redirect(reverse('new_service_offered_data_page'))

        elif object_type == '64':
            model = Doctor_Speciality_New
            object = model.objects.get(id=object_id)
            object.deleete = False
            object.save()
            #response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='',
            #                                              id=object_id, edit=None)
            messages.success(request, "Successfully Activated Speciality")
            return redirect(reverse('new_speciality_data_page'))
        
        elif object_type == '65':
            model = PlanCat
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Plan Category")
            return redirect(reverse('category_listing'))

        elif object_type == '66':
            model = PlanSubCat
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Plan Sub Category")
            return redirect(reverse('sub_category_listing'))

        elif object_type == '67':
            model = PlanDetails
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Plan Detail")
            return redirect(reverse('plan_details_listing'))

        elif object_type == '68':
            model = PlanComponent
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Plan Component")
            return redirect(reverse('component_listing'))

        elif object_type == '69':
            model = PlanSubComponent
            object = model.objects.get(id=object_id)
            object.delete = False
            object.save()
            messages.success(request, "Successfully Activated Plan Sub Component")
            return redirect(reverse('sub_component_listing'))

        try:
            object = model.objects.get(id=object_id)
            if object.delete:
                object.delete = False
                object.save()
                messages.success(request, "Successfully Activated")
            else:
                messages.success(request, " Already Activated")
            return_url = '/master/manage/' + url_part + '/'
            return redirect(return_url)
        except Exception as e:
            messages.error(request, 'Something Bad Happened')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    else:
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

"""All Delete Function here """
####################################################################
# Name - delete_reward                                             #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_reward(request, reward_id=None):
    try:
        if request.method == "GET" and reward_id is not None:
            reward_data = RewardRecognisation.objects.get(pk=reward_id)
            reward_data.delete()
            messages.error(request, 'Deleted')
        else:
            messages.error(request, 'Something Bad happened')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        raise Http404

####################################################################
# Name - delete_membership                                         #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_membership(request, member_id=None):
    try:
        if request.method == "GET" and member_id is not None:
            member_data = Membership.objects.get(pk=member_id)
            member_data.delete()
            messages.error(request, 'Deleted')
        else:
            messages.error(request, 'Something Bad happened')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        raise Http404

####################################################################
# Name - delete_education                                          #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_education(request, education_id=None):
    try:
        if request.method == "GET" and education_id is not None:
            education_data = Doctor_Education.objects.get(pk=education_id)
            education_data.delete()
            messages.error(request, 'Deleted')
        else:
            messages.error(request, 'Something Bad happened')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        raise Http404

####################################################################
# Name - delete_experience                                         #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_experience(request, experience_id=None):
    try:
        if request.method == "GET" and experience_id is not None:
            experience_data = Doctor_Experience.objects.get(pk=experience_id)
            experience_data.delete()
            messages.error(request, 'Deleted')
        else:
            messages.error(request, 'Something Bad happened')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        raise Http404

####################################################################
# Name - delete_experience                                         #
# Owner - Visnu Badal                                              #
####################################################################
# def make_cond(name, value):
#     cond = json.dumps({name:value})[1:-1] # remove '{' and '}'
#     return ' ' + cond
@login_required(login_url='/')
@csrf_exempt
def delete_schedule(request, doctor_id=None, organisation_id=None):
    try:
        if request.method == "GET" and organisation_id and doctor_id is not None:
            id_data = request.GET['id']
            if id_data:
                schedule_data_obj = Schedule.objects.filter(schedule_data__contains=[{'id': id_data}])
                # commented by Nishank on 14Nov 2016
                #update_data = list(schedule_data_obj[0].schedule_data)
                exp_data = schedule_data_obj[0].schedule_data
                #update_data = _.without(update_data, _.findWhere(update_data, {'id': id_data}))
                for i in exp_data:
                    if i['id'] == id_data:
                        exp_data.remove(i)
                schedule_data_obj.update(schedule_data=exp_data)
                messages.success(request, 'Deleted')
            else:
                messages.error(request, 'Something Bad happened')
            #messages.error(request, 'Deleted')
        else:
            messages.error(request, 'Something Bad happened')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        raise Http404

####################################################################
# Name - delete_schedule_organisation                              #
# Owner - Jitendra Dixit                                           #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_schedule_organisation(request, organisation_id=None):
    try:
        if request.method == "GET" and organisation_id:
            id_data = request.GET['id']
            if id_data:
                schedule_data_obj = OrganisationName.objects.filter(schedule_data__contains=[{'id': id_data}])
                update_data = list(schedule_data_obj[0].schedule_data)
                update_data = _.without(update_data, _.findWhere(update_data, {'id': id_data}))
                schedule_data_obj.update(schedule_data=update_data)
                messages.success(request, 'Deleted')
            else:
                messages.error(request, 'Something Bad happened')
            messages.error(request, 'Deleted')
        else:
            messages.error(request, 'Something Bad happened')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        raise Http404

####################################################################
# Name - delete_consultancy_schedule                               #
# Owner - Jitendra Dixit                                           #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_consultancy_schedule(request, doctor_id=None):
    try:
        if request.method == "GET" and doctor_id:
            id_data = request.GET['id']
            indeex = None
            if id_data:
                asso_obj = Live_Doctor_Associated_Data.objects.filter(doctor_id = doctor_id)
                sch = asso_obj[0].consultancy_schedule
                for i in range(0,len(sch)):
                    if id_data in sch[i].values():
                        indeex = i
                        break
                if indeex != None:
                    del sch[indeex]
                    asso_obj.update(consultancy_schedule=sch)
                    messages.success(request, 'Deleted')
                else:
                    messages.success(request, 'Schedule Object Not Found')
            else:
                messages.error(request, 'Schedule Object Not Found')
        else:
            messages.error(request, 'Wrong Access Method and/or Missing Doctor ID')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        raise Http404


####################################################################
# Name - delete_experience                                         #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_organisation(request, attach_id=None, organisation_id=None):
    try:
        if request.method == "GET" and attach_id is not None:
            attach_data = AttachWithDoctor.objects.get(id=attach_id)
            if attach_data:
                schedule_data = Schedule.objects.filter(organisation_id=organisation_id,
                                                        doctor_id=attach_data.doctor_id)
                if schedule_data:
                    schedule_data.delete()
            attach_data.delete()
            messages.error(request, 'Deleted')
        else:
            messages.error(request, 'Something Bad happened')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        raise Http404

@login_required(login_url='/')
@csrf_exempt
def association_doctor_delete(request, organisation_id, id):
    try:
        if request.method == "GET" and id and organisation_id:
            AssociateDoctorWithOrganization_obj = AssociateDoctorWithOrganization.objects.get(id=id)
            if AssociateDoctorWithOrganization_obj:
                AssociateDoctorWithOrganization_obj.delete()
            messages.error(request, 'Deleted')
        else:
            messages.error(request, 'Something Bad happened')
        return HttpResponseRedirect('/organisation/edit/' + str(organisation_id) + '/?tab=2')
    except Exception as e:
        raise Http404

""" Lab Functions here """
####################################################################
# Name - get city list                                             #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def zone_location(request):
    data = []
    try:
        if request.method == "POST":
            zone_id = request.POST.get('zone_id')
            zone_location_obj = ZoneLocation.objects.filter(zone_id=zone_id,delete=False)
            for i in zone_location_obj:
                data_json = {}
                data_json['id'] = i.id
                data_json['name'] = i.name
                data.append(data_json)
            if data:
                data = json.dumps(data)
    except Exception as e:
        raise Http404
    return HttpResponse(data)

####################################################################
# Name - lab_data_manage                                           #
# Owner - Jaydeep                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def lab_data_manage(request):
    try:
        return render(request, 'admin/lab_management/lab_management.html',
                      {'tab': 'data', 'crosal': 'labmanage'})
    except Exception as e:
        raise Http404

####################################################################
# Name - Lab_data_by_users                                         #
# Owner - Jaydeep Verma                                            #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def lab_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            lab_all_data = Labs.objects.filter(current_user_id=search_data).order_by('name')
            paginator = Paginator(lab_all_data, 100)
            page = request.GET.get('page')
            try:
                lab_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/lab_management/lab_by_user.html',
                      {'tab': 'data', 'crosal': 'labbymanage', 'lab_all_data': lab_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            lab_all_data = Labs.objects.filter(name__icontains=search_data_two).order_by('name')
            paginator = Paginator(lab_all_data, 3)
            page = request.GET.get('page')
            try:
                lab_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/lab_management/lab_by_user.html',
                          {'tab': 'data', 'crosal': 'labbymanage', 'lab_all_data': lab_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})

        lab_all_data = Labs.objects.all().order_by('name')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(lab_all_data, 100)
        page = request.GET.get('page')
        try:
            lab_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            lab_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            lab_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/lab_management/lab_by_user.html',
                      {'tab': 'data', 'crosal': 'labbymanage', 'lab_all_data': lab_all_data,
                       'user_data_obj': user_data_obj})
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - Lab_data_by_stages                                        #
# Owner - Jaydeep Verma                                            #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def lab_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            lab_all_data = Labs.objects.filter(stage_id=stage_id).order_by('name')
        else:
            lab_all_data = Labs.objects.all().order_by('name')
            stage_id=None
        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(lab_all_data, 100)
        page = request.GET.get('page')
        try:
            lab_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            lab_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            lab_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/lab_management/lab_by_stages.html',
                      {'tab': 'data', 'crosal': 'labbymanage', 'lab_all_data': lab_all_data,
                       'stage_data': stage_data,'stage_no':stage_id})
    except:
        raise Http404

""" Assign Function Here """
####################################################################
# Name - lab_assignment                                            #
#  Owner - Jaydeep verma                                           #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def lab_assignment(request):
    try:
        stage_filter = False
        user_filter = False
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all().order_by('name')
        city_list = City.objects.all().order_by('name')
        locality_list = Locality.objects.all().order_by('name')
        user_data = User.objects.all().order_by('username')
        locality_obj = None
        city_obj = None
        current_user_id = None
        user_id_data = None
        stage_id = None
        stage_id_data = None
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            lab_obj = Labs.objects.filter(name__icontains=search_data).order_by('name')
            paginator = Paginator(lab_obj, 100)
            page = request.GET.get('page')
            try:
                lab_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/lab_management/lab_assign.html',
                    {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                    'lab': lab_obj, 'state_data_obj': state_data_obj,'search_data':search_data,
                     'city_list':city_list,'locality_list':locality_list,
                     'stage_filter':stage_filter,'user_filter':user_filter,
                     'stage_data':stage_data,'user_data':user_data,'city_filter':city_filter
                     })

        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'filter':
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = None
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = None
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')

                    if user_id_data or stage_id_data:
                        if user_id_data and  stage_id_data :
                            lab_obj = Labs.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            lab_obj = Labs.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            lab_obj = Labs.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          stage_id=stage_id_data).order_by('name')

                    else:
                        lab_obj = Labs.objects.filter(state_id=state_filter,
                                                      city_id=city_data,
                                                      locality_id=locality_data).order_by('name')

                    paginator = Paginator(lab_obj, 100)
                    page = request.GET.get('page')
                    try:
                        lab_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        lab_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        lab_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/lab_management/lab_assign.html',
                                  {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                                   'lab': lab_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_list,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,
                                   'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                   'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                elif city_data:
                    if user_id_data or stage_id_data:
                        if user_id_data and  stage_id_data :
                            lab_obj = Labs.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            lab_obj = Labs.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            lab_obj = Labs.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          stage_id=stage_id_data).order_by('name')


                    else:
                        lab_obj = Labs.objects.filter(state=state_data, city=city_data).order_by(
                        'name')

                    paginator = Paginator(lab_obj, 100)
                    page = request.GET.get('page')
                    try:
                        lab_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        lab_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        lab_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/lab_management/lab_assign.html',
                                  {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                                   'lab': lab_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_list,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,
                                   'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                   'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                else:
                    if user_id_data or stage_id_data:
                        if user_id_data and  stage_id_data :
                            lab_obj = Labs.objects.filter(state_id=state_filter,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            lab_obj = Labs.objects.filter(state_id=state_filter,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            lab_obj = Labs.objects.filter(state_id=state_filter,
                                                          stage_id=stage_id_data).order_by('name')

                    else:
                        lab_obj = Labs.objects.filter(state=state_data).order_by('name')

                    paginator = Paginator(lab_obj, 100)
                    page = request.GET.get('page')
                    try:
                        lab_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        lab_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        lab_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/lab_management/lab_assign.html',
                                  {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                                   'lab': lab_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_list,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,
                                   'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                   'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })

            elif not state_data and user_id_data or stage_id_data :
                if user_id_data or stage_id_data:
                    if user_id_data and stage_id_data:
                        lab_obj = Labs.objects.filter(current_user_id=user_id_data,
                                                      stage_id=stage_id_data).order_by('name')

                    elif user_id_data:
                        lab_obj = Labs.objects.filter(current_user_id=user_id_data).order_by('name')
                    elif stage_id_data:
                        lab_obj = Labs.objects.filter(stage_id=stage_id_data).order_by('name')

                else:
                    lab_obj = None
                paginator = Paginator(lab_obj, 100)
                page = request.GET.get('page')
                try:
                    lab_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    lab_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    lab_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/lab_management/lab_assign.html',
                              {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                               'lab': lab_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_list,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'city_list': city_list, 'locality_list': locality_list,
                               'stage_filter': stage_filter, 'user_filter': user_filter,
                               'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                               'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                               })
            else:
                lab_obj = Labs.objects.all().order_by('name')

                paginator = Paginator(lab_obj, 100)
                page = request.GET.get('page')
                try:
                    lab_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    lab_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    lab_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/lab_management/lab_assign.html',
                              {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                               'lab': lab_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_list,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'city_list': city_list, 'locality_list': locality_list,
                               'stage_filter': stage_filter, 'user_filter': user_filter,
                               'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                               'locality_obj': locality_obj, 'current_user_id': user_id_data, 'stage_id': stage_id_data
                               })

        else:
            filter_name = None
            state_data = None
            city_data = None
            locality_data = None

            lab_obj = Labs.objects.all().order_by('name')

            paginator = Paginator(lab_obj, 100)
            page = request.GET.get('page')
            try:
                lab_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/lab_management/lab_assign.html',
                          {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                           'lab': lab_obj, 'state_data_obj': state_data_obj,
                           'city_obj': city_obj, 'locality_obj': locality_list,
                           'locality_filter': locality_filter, 'city_filter': city_filter,
                           'state_filter': state_filter,
                           'filter_name': filter_name, 'state_data': state_data,
                           'city_data': city_data, 'locality_data': locality_data,
                           'city_list': city_list, 'locality_list': locality_list,
                           'stage_filter': stage_filter, 'user_filter': user_filter,
                           'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                           'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                           })
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - Lab_listing                                               #
# Owner - Jaydeep Verma                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def lab_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        state_data_obj = State.objects.all().order_by('name')
        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            lab_obj = Labs.objects.filter(current_user_id=telecaller_id,is_disable=False ).order_by('name')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            lab_obj = Labs.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
        else:
            reviewer_id = 0

        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            lab_obj = Labs.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('name')

        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:
            # lab_obj = Labs.objects.filter(current_user_id=telecaller_id).order_by(
            #    'name')  # current_user_id=telecaller_id
            if len(lab_obj) == 0:
                messages.error(request, "No Lab found")

                return render(request, 'data_management/lab_data/lab_listing.html',
                              {'tab_listing': 'lab_listing'})
            elif len(lab_obj) > 0:
                paginator = Paginator(lab_obj, 50)
                page = request.GET.get('page')
                try:
                    lab_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    lab_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    lab_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/lab_data/lab_listing.html',
                              dict(lab=lab_obj, tab_listing='lab_listing', state_data_obj=state_data_obj))
        elif reviewer_id:
            lab_obj = Labs.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
            if len(lab_obj) == 0:
                messages.error(request, "No Lab found")
                return render(request, 'data_management/lab_data/lab_listing.html',
                              {'tab_listing': 'lab_listing'})
            elif len(lab_obj) > 0:
                paginator = Paginator(lab_obj, 50)
                page = request.GET.get('page')
                try:
                    lab_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    lab_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    lab_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/lab_data/lab_listing.html',
                              dict(lab=lab_obj, tab_listing='lab_listing', state_data_obj=state_data_obj))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        raise Http404

####################################################################
# Name - add_lab                                                   #
# Owner - Jaydeep                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_lab(request):
    try:
        if request.method == "GET":
            country_obj = Country.objects.all()
            state_obj = State.objects.all()
            lab_accreditation_body = Lab_accreditation_body_master.objects.filter(delete=False)
            lab_type_obj = Lab_type_master.objects.filter(delete=False)
            lab_services = Lab_services_master.objects.filter(delete=False)
            lab_departments = Lab_department_master.objects.filter(delete=False)

            return render(request, 'data_management/lab_data/add_lab.html',
                          {'lab_add': 'add', 'tab_listing': 'lab_listing', 'country_obj': country_obj,
                           'state_obj': state_obj,'lab_accreditation_body':lab_accreditation_body,'lab_type_obj':lab_type_obj,
                           'lab_services':lab_services,'lab_departments':lab_departments})
        elif request.method == "POST":
            lab_name = request.POST['lab_name'].strip()
            address = request.POST['address'].strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip(),
            city =  city[0]
            location = request.POST['locality_id'].strip()
            #rate = request.POST['rate'].strip()
            #pathology_doctor_name = request.POST['pathology_doctor_name'].strip()
            telephone = request.POST['telephone'].strip()
            email = request.POST['email'].strip()
            lab_collection_timing = request.POST['lab_collection_timing'].strip()
            ratings = request.POST['ratings'].strip()
            home_sample_collection = False
            e_reporting_dispatch = False
            lab_authorised_person_name  =  request.POST['lab_authorised_person_name'].strip()
            lab_authorised_person_designation = request.POST['lab_authorised_person_designation'].strip()
            lab_authorised_person_contact_no = request.POST['lab_authorised_person_contact_no'].strip()
            lab_authorised_person_contact_emailid = request.POST['lab_authorised_person_contact_emailid'].strip()
            lab_website = request.POST['lab_website'].strip()
            pincode = request.POST.get('apincode').strip()
            lab_type = request.POST['lab_type'].strip()
            lab_body = request.POST.getlist('lab_body')
            lab_departments  = request.POST.getlist('lab_departments')
            tempstr  = ''
            cc= 0
            if lab_body :
                for i in  lab_body:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' +i.strip()
            else:
                tempstr =''
            lab_body = tempstr

            lab_services = request.POST.getlist('lab_services')

            tempstr = ''
            cc = 0
            if lab_services:
                for i in lab_services:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            lab_services = tempstr



            tempstr = ''
            cc = 0
            if lab_departments:
                for i in lab_departments:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            lab_departments = tempstr

            lab_locality_coverage_from = request.POST['locality_idfrom'].strip()
            lab_locality_coverage_to = request.POST['locality_idto'].strip()

            try:
                is_emergency = request.POST['is_emergency'].strip()
            except:
                is_emergency = 0
            if is_emergency == '1':
                is_emergency= True
            else:
                is_emergency = False

            lab_mobile = request.POST['lab_mobile'].strip()

            # try:
            #     home_sample_collection_flag = request.POST['home_sample_collection'].strip()
            #     if home_sample_collection_flag == 'yes':
            #         home_sample_collection = True
            #     else:
            #         home_sample_collection = False
            # except:
            #     pass
            # try:
            #     e_reporting_dispatch_flag = request.POST['e_reporting_dispatch'].strip()
            #     if e_reporting_dispatch_flag == 'yes':
            #         e_reporting_dispatch = True
            #     else:
            #         e_reporting_dispatch = False
            # except:
            #     pass

            lab_doctors_on_board = request.POST.getlist('lab_doctors_on_board')

            if lab_doctors_on_board:
                str1 = ''
                c = 0
                for i in lab_doctors_on_board:
                    if  i!= '':
                        c = c + 1
                        if c == 1:
                            str1 = str1 + i.strip()
                        else:
                            str1 = str1 + ',' + i.strip()


            #usermanagement_objects_list = request.user.usermanagement_set.all()

            #for i in usermanagement_objects_list:
            #    if i.is_reviewer:
            #        stage = 2
            #    elif i.is_publisher:
            #        stage = 3
            #    else:
            #        stage = 1
            did = request.POST['did'].strip()
            extension = request.POST['extension'].strip()

            lab_obj = Labs(name=lab_name, address=address, country_id=country, state_id=state, city_id=city,
                           locality_id=location,
                           rate='', pathology_doctor_name='', telephone=telephone,
                           pathology_email=email, lab_collection_timing=lab_collection_timing, ratings=ratings,
                           home_sample_collection=home_sample_collection, e_reporting_dispatch=e_reporting_dispatch,
                           stage_id=2,current_user_id=request.user.id,free_text='',
                           lab_doctors_on_board=str1,lab_type_id=lab_type,lab_accreditation_body=lab_body,
                           lab_authorised_person_name=lab_authorised_person_name,
                           lab_authorised_person_designation=lab_authorised_person_designation,
                           lab_authorised_person_contact_no=lab_authorised_person_contact_no,
                           lab_authorised_person_emailid=lab_authorised_person_contact_emailid,
                           lab_website=lab_website,lab_locality_coverage_from_id = lab_locality_coverage_from,
                           lab_locality_coverage_to_id=lab_locality_coverage_to,is_emergency=is_emergency,
                           lab_mobile=lab_mobile,lab_services=lab_services,lab_departments=lab_departments,pincode = pincode,
                           did=did,extension=extension)

            lab_obj.save()
            messages.success(request,"New Lab added successfully")
            #return HttpResponseRedirect('/lab/listing/?tab=1')
            return HttpResponseRedirect(reverse('lab-listing'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - lab_listing_edit                                          #
# Owner - jaydeep                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def lab_listing_edit(request, lab_id=None):
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_path_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_path_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    lab_accreditation_body =  Lab_accreditation_body_master.objects.filter(delete=False)
    lab_type_obj =  Lab_type_master.objects.filter(delete=False)
    country_obj = Country.objects.filter(delete=False)
    state_obj = State.objects.filter(delete=False)
    city = City.objects.filter(delete=False)
    locality = Locality.objects.filter(delete=False)
    lab_services = Lab_services_master.objects.filter(delete=False)
    lab_departments = Lab_department_master.objects.filter(delete=False)
    try:
        tab = request.GET.get('tab')
    except:
        tab = None
    try:
        if lab_id is not None:
            lab = Labs.objects.get(id=lab_id)
            if (lab.current_user_id == request.user.id) or request.user.is_superuser :

                if tab == '1' and request.method == "GET":

                    if lab.lab_doctors_on_board :
                        lab_doctors_list = lab.lab_doctors_on_board.split(',')
                    else:
                        lab_doctors_list = None
                    alist = []
                    accre = ''
                    acrredition_list = []
                    if lab:
                        accre = lab.lab_accreditation_body
                        if accre :
                            alist = accre.split(',')
                            for i in alist :
                                acrredition_list.append(int(i.strip()))
                        else:
                            acrredition_list =[]
                    slist = []
                    serv = ''
                    service_list = []
                    if lab:
                        serv = lab.lab_services
                        if serv:
                            slist = serv.split(',')
                            for i in slist:
                                service_list.append(int(i.strip()))
                        else:
                            service_list = []
                        dlist = []
                        dep = ''
                        department_list = []
                        if lab:
                            dep = lab.lab_departments
                            if dep:
                                dlist = dep.split(',')
                                for i in dlist:
                                    department_list.append(int(i.strip()))
                            else:
                                department_list = []

                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True

                        return render(request, 'data_management/lab_data/edit_lab_data.html',
                                      {'tab': 'basic', 'tab_listing': 'lab_listing', 'lab': lab,
                                       'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'valid_choice': valid_choice, 'tab':'1','doctors_on_board':lab_doctors_list,
                                       'lab_accreditation_body':lab_accreditation_body,'lab_type_obj':lab_type_obj,
                                       'city':city,'locality':locality,'acrredition_list':acrredition_list,
                                       'service_list':service_list,'lab_services':lab_services,
                                       'lab_departments':lab_departments,'department_list':department_list,
                                       'user_is_publisher': user_is_publisher})
                    else:
                        messages.error(request,'Lab could not be found')
                        return HttpResponseRedirect('/lab/listing/')
                if tab == '1' and request.method == "POST":
                    lab_name = request.POST['lab_name'].strip()
                    address = request.POST['address'].strip()
                    country = request.POST['country_id'].strip()
                    state = request.POST['state_id'].strip()
                    city = request.POST['city_id'].strip()
                    location = request.POST['locality_id'].strip()
                    #rate = request.POST['rate'].strip()
                    #pathology_doctor_name = request.POST['pathology_doctor_name'].strip()
                    telephone = request.POST['telephone'].strip()
                    email = request.POST['email'].strip()
                    lab_collection_timing = request.POST['lab_collection_timing'].strip()
                    ratings = request.POST['ratings'].strip()
                    home_sample_collection = False
                    e_reporting_dispatch = False
                    lab_doctors_on_board = request.POST.getlist('lab_doctors_on_board')
                    lab_authorised_person_name = request.POST['lab_authorised_person_name'].strip()
                    lab_authorised_person_designation = request.POST['lab_authorised_person_designation'].strip()
                    lab_authorised_person_contact_no = request.POST['lab_authorised_person_contact_no'].strip()
                    lab_authorised_person_contact_emailid = request.POST['lab_authorised_person_contact_emailid'].strip()
                    lab_website = request.POST['lab_website'].strip()
                    pincode = request.POST.get('apincode').strip()

                    lab_type = request.POST['lab_type'].strip()
                    try :
                        lab_body = request.POST.getlist('lab_body')
                    except:
                        lab_body = ''
                    try :
                        lab_services = request.POST.getlist('lab_services')
                    except:
                        lab_services = ''
                    try :
                        lab_departments = request.POST.getlist('lab_departments')
                    except:
                        lab_departments = ''

                    tempstr = ''
                    cc = 0
                    if lab_body:
                        for i in lab_body:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    lab_body = tempstr

                    tempstr = ''
                    cc = 0
                    if lab_services:
                        for i in lab_services :
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    lab_services = tempstr

                    tempstr = ''
                    cc = 0
                    if lab_departments:
                        for i in lab_departments:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    lab_departments = tempstr

                    lab_locality_coverage_from = request.POST['locality_idfrom'].strip()
                    lab_locality_coverage_to = request.POST['locality_idto'].strip()

                    try:
                        is_emergency = request.POST['is_emergency'].strip()
                    except:
                        is_emergency = 0
                    if is_emergency == '1':
                        is_emergency= True
                    else:
                        is_emergency = False

                    lab_mobile = request.POST['lab_mobile'].strip()

                    if lab_doctors_on_board :
                        str1 = ''
                        c = 0
                        for i in lab_doctors_on_board :
                            if i != '':
                                c = c+1
                                if c == 1:
                                    str1 = str1 + i.strip()
                                else:
                                    str1 = str1 + ','+ i.strip()
                    try:
                        home_sample_collection_flag = request.POST['home_sample_collection'].strip()
                        if home_sample_collection_flag == 'yes':
                            home_sample_collection = True
                        else:
                            home_sample_collection = False
                    except:
                        pass
                    try:
                        e_reporting_dispatch_flag = request.POST['e_reporting_dispatch'].strip()
                        if e_reporting_dispatch_flag == 'yes':
                            e_reporting_dispatch = True
                        else:
                            e_reporting_dispatch = False
                    except:
                        pass

                    did = request.POST['did'].strip()
                    extension = request.POST['extension'].strip()

                    lab_obj = Labs.objects.get(pk=lab_id)
                    if lab_obj:
                        lab_obj.name = lab_name
                        lab_obj.address = address
                        lab_obj.country_id = country
                        lab_obj.state_id = state
                        lab_obj.city_id = city
                        lab_obj.locality_id = location
                        lab_obj.rate = ''
                        lab_obj.ratings = ratings
                        lab_obj.home_sample_collection = home_sample_collection
                        lab_obj.e_reporting_dispatch = e_reporting_dispatch
                        lab_obj.pathology_doctor_name = ''
                        lab_obj.telephone = telephone
                        lab_obj.pathology_email = email
                        lab_obj.lab_collection_timing = lab_collection_timing
                        if lab_doctors_on_board :
                            lab_obj.lab_doctors_on_board = str1
                        lab_obj.lab_type_id = lab_type
                        lab_obj.lab_accreditation_body = lab_body
                        lab_obj.lab_authorised_person_name  =  lab_authorised_person_name
                        lab_obj.lab_authorised_person_designation  =  lab_authorised_person_designation
                        lab_obj.lab_authorised_person_contact_no  =  lab_authorised_person_contact_no
                        lab_obj.lab_authorised_person_emailid  =  lab_authorised_person_contact_emailid
                        lab_obj.lab_website  =  lab_website
                        if lab_locality_coverage_to != 'msg':
                            lab_obj.lab_locality_coverage_to_id = lab_locality_coverage_to
                        else:
                            lab_obj.lab_locality_coverage_to = None
                        if lab_locality_coverage_from != 'msg':
                            lab_obj.lab_locality_coverage_from_id = lab_locality_coverage_from
                        else:
                            lab_obj.lab_locality_coverage_from = None
                        lab_obj.is_emergency = is_emergency
                        lab_obj.lab_mobile = lab_mobile
                        lab_obj.lab_services = lab_services
                        lab_obj.lab_departments = lab_departments
                        lab_obj.pincode = pincode
                        lab_obj.did = did
                        lab_obj.extension = extension
                        lab_obj.save()
                        messages.success(request, 'Lab Data Successfully Updated')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect((reverse('publisher-lab-listing'))+'?tab=1')
                    return HttpResponseRedirect('/lab/edit/' + lab_id + '/?tab=1')

                elif lab_id is not None and tab == '2' and request.method == "GET":
                    delete = None
                    test_name = None
                    test_name2 = None
                    edit = None
                    test_price = None
                    lab = Labs.objects.get(id=lab_id)
                    try:
                        delete = request.GET.get('delete')
                        test_name = request.GET.get('test_name')
                    except:
                        delete = None
                        test_name2 = None
                    try:
                        edit = request.GET.get('edit')
                        test_name2 = request.GET.get('test_name2')
                        test_price =  request.POST.get('test_price')
                    except:
                        delete = None
                        test_name = None
                        test_price = None
                    if delete  and  test_name  and lab :
                        try:
                            tests = lab.tests
                            try:
                                del tests['test_details'][test_name]
                            except:
                                messages.success(request, "Plan Name Key not found")
                                return redirect(reverse('lab-listing-edit', args=[lab_id, ]) + '?tab=2')
                        except:
                            tests = {'lab_id': lab_id, 'test_details': {}}
                            try:
                                del tests['test_details'][test_name]
                            except:
                                messages.success(request, "Plan Name Key not found")
                                return redirect(reverse('lab-listing-edit', args=[lab_id, ]) + '?tab=2')

                        lab.tests = tests
                        lab.save()
                        messages.success(request, "Successfully Deleted Test")
                        return redirect (reverse('lab-listing-edit', args =[lab_id,]) +'?tab=2')

                    if edit and test_name2 and test_price and lab :
                        try:
                            tests = lab.tests
                            if tests :
                                try:
                                    tests['test_details'][test_name2] = test_price
                                    lab.tests = tests
                                    lab.save()
                                    messages.success(request, "Lab Test Successfully updated")
                                    return redirect(reverse('lab-listing-edit', args=[lab_id, ]) + '?tab=2')
                                except:
                                    tests['test_details'].update({test_name2:test_price})
                                    lab.tests = tests
                                    lab.save()
                                    messages.success(request, "Lab Test Successfully added")
                                    return redirect(reverse('lab-listing-edit', args=[lab_id, ]) + '?tab=2')
                            else:
                                tests = {'lab_id': lab_id, 'test_details': {}}
                                tests['test_details'].update({test_name2: test_price})
                                lab.tests = tests
                                lab.save()
                                messages.success(request, "Lab Test Successfully added")
                                return redirect(reverse('lab-listing-edit', args=[lab_id, ]) + '?tab=2')

                        except:
                            tests = {'lab_id': lab_id, 'test_details': {}}
                            tests['test_details'].update({test_name2: test_price})
                            lab.tests = tests
                            lab.save()
                            messages.success(request, "Lab Test Successfully added")
                            return redirect(reverse('lab-listing-edit', args=[lab_id, ]) + '?tab=2')

                    elif lab:
                        try:
                            tests = lab.tests
                            if tests :
                                pass
                            else :
                                tests = {'lab_id': lab_id, 'test_details': {}}
                        except:
                            tests = {'lab_id': lab_id, 'test_details': {}}

                        if len(tests['test_details'].keys()) < 1:
                            tests = {'lab_id': lab_id, 'test_details': {}}

                        lab_tests_all = Lab_test_master.objects.filter(delete=False)
                        return render(request, 'data_management/lab_data/edit_lab_data.html',
                                      {'tab': '2', 'tab_listing': 'lab_listing', 'lab': lab,
                                       'tests':tests['test_details'],'lab_tests_all':lab_tests_all
                                       })
                    else:
                        messages.error(request,'Something Bad Happened')
                        return HttpResponseRedirect('/lab/listing/')

                if tab == '2' and request.method == "POST":
                    lab = Labs.objects.get(id=lab_id)

                    testnames = None
                    testprices = None
                    edit = None
                    test_name2 = None
                    test_price = None

                    try:
                        testnames  = request.POST.getlist('test_name')
                        testprices = request.POST.getlist('test_price')
                    except:
                        testnames = None
                        testprices = None


                    try:
                        edit = request.POST.get('edit')
                        test_name2  = request.POST.get('test_name2')
                        test_price = request.POST.get('test_price')
                    except:
                        edit = None
                        test_name2 = None
                        test_price = None


                    if edit and test_name2 and test_price and lab:
                        try:
                            tests = lab.tests
                            if tests:
                                try:
                                    tests['test_details'][test_name2] = test_price
                                    lab.tests = tests
                                    lab.save()
                                    messages.success(request, "Lab Test Successfully updated")
                                    return redirect(reverse('lab-listing-edit', args=[lab_id, ]) + '?tab=2')
                                except:
                                    tests['test_details'].update({test_name2: test_price})
                                    lab.tests = tests
                                    lab.save()
                                    messages.success(request, "Lab Test Successfully added")
                                    return redirect(reverse('lab-listing-edit', args=[lab_id, ]) + '?tab=2')
                            else:
                                tests = {'lab_id': lab_id, 'test_details': {}}
                                tests['test_details'].update({test_name2: test_price})
                                lab.tests = tests
                                lab.save()
                                messages.success(request, "Lab Test Successfully added")
                                return redirect(reverse('lab-listing-edit', args=[lab_id, ]) + '?tab=2')

                        except:
                            tests = {'lab_id': lab_id, 'test_details': {}}
                            tests['test_details'].update({test_name2: test_price})
                            lab.tests = tests
                            lab.save()
                            messages.success(request, "Lab Test Successfully added")
                            return redirect(reverse('lab-listing-edit', args=[lab_id, ]) + '?tab=2')

                    if testnames and testprices and lab:
                        try:
                            tests = lab.tests
                            if tests :
                                pass
                            else:
                                tests = {'lab_id': lab_id, 'test_details': {}}
                        except:
                            tests = {'lab_id':lab_id, 'test_details':{}}

                        if len(tests['test_details'].keys())  < 1 :
                            tests = {'lab_id': lab_id, 'test_details': {}}
                        for i in  range(0,len(testnames)):
                            tests['test_details'].update({testnames[i]:testprices[i]})

                        lab_tests_all = Lab_test_master.objects.filter(delete=False)
                        lab.tests = tests
                        lab.save()
                        messages.success(request,'Test Details Successfully Updated' )
                        return render(request, 'data_management/lab_data/edit_lab_data.html',
                                      {'tab': '2', 'tab_listing': 'lab_listing', 'lab': lab,
                                       'tests':tests['test_details'],'lab_tests_all':lab_tests_all
                                       })
                    else:
                        messages.error(request, 'Required data not received')

                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)

                        if len(is_publisher):
                            return HttpResponseRedirect(reverse('publisher-lab-listing'))
                        return HttpResponseRedirect(reverse('lab-listing'))

                elif tab == '3':
                    lab = None
                    delete = None
                    branchid = None
                    update = None
                    update_branch = None

                    try:
                        lab =Labs.objects.get(id=lab_id)
                    except:
                        lab = None
                    if request.method == 'POST' and lab:
                        try:
                            #print request.GET
                            update_branch = address = request.GET['update'].strip()
                            branchid = address = request.GET['branchid'].strip()
                        except:
                            update_branch = None

                        address = request.POST.get('aaddress').strip()
                        telephone1 = request.POST.get('atelephone1').strip()
                        #telephone2 = request.POST.get('atelephone2').strip()
                        #telephone3 = request.POST.get('atelephone3').strip()
                        mobile = request.POST.get('amobile').strip()
                        country_name = request.POST.get('acountry_id').strip()
                        state_name = request.POST.get('astate_id').strip()
                        city_name = request.POST.get('acity_id').strip()
                        locality_name = request.POST.get('alocality_id').strip()
                        pincode = request.POST.get('apincode').strip()
                        type_name = request.POST.get('lab_type').strip()
                        dict_d = {'lab_id': lab_id, 'branch_details': {}}
                        try:
                            branch_obj = Lab_branches.objects.get(lab_id=lab_id)
                        except:
                            branch_obj = None

                        if update_branch == 'true500' and branchid:
                            try:
                                branch_obj_full = Lab_branches.objects.get(lab_id=lab_id)
                                branch_obj = branch_obj_full.branches
                            except:
                                branch_obj = {'lab_id': lab_id, 'branch_details': {}}
                            try:
                                if branchid in list(branch_obj['branch_details'].keys()):
                                    branch_obj['branch_details'][branchid]['address'] = address
                                    branch_obj['branch_details'][branchid]['telephone1'] = telephone1
                                    #branch_obj['branch_details'][branchid]['telephone2'] = telephone2
                                    #branch_obj['branch_details'][branchid]['telephone3'] = telephone3
                                    branch_obj['branch_details'][branchid]['mobile'] = mobile
                                    branch_obj['branch_details'][branchid]['country_name']=country_name
                                    branch_obj['branch_details'][branchid]['state_name']=state_name
                                    branch_obj['branch_details'][branchid]['city_name']=city_name
                                    branch_obj['branch_details'][branchid]['locality_name']=locality_name
                                    branch_obj['branch_details'][branchid]['type_name']=type_name
                                    branch_obj['branch_details'][branchid]['pincode']=pincode
                                    branch_obj['branch_details'][branchid]['mobile']=mobile
                                    branch_obj_full.branches = branch_obj
                                    branch_obj_full.save()
                                    messages.success(request, "Branch Successfully Updated")
                                    return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=3')
                            except:
                                messages.success(request, 'Something Bad Happened')
                                return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=3')

                        if branch_obj and update_branch == None:
                            try:
                                try:
                                    dict_d = branch_obj.branches
                                except:
                                    dict_d = {'lab_id': lab_id, 'branch_details': {}}

                                dict_dtemp = dict_d['branch_details']
                                temp = len(dict_dtemp.keys())
                                if temp > 0:
                                    index = int(temp)
                                else:
                                    index = 0

                                # index = int(dict_d['branch_details'].keys()[-1])
                                index += 1
                            except Exception as e:
                                #print e
                                dict_d = {'lab_id': lab_id, 'branch_details': {}}
                                index = 1

                            dict_d['branch_details'].update(
                                {index: {'address': address, 'telephone1': telephone1,'mobile': mobile, 'country_name': country_name,
                                         'state_name': state_name, 'city_name': city_name,
                                         'locality_name': locality_name, 'pincode': pincode,'type_name':type_name}})
                            branch_obj.branches = dict_d
                            branch_obj.save()
                            messages.success(request, 'Branch Successfully Added')

                            return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=3')

                        else:
                            branch_obj = Lab_branches(lab_id=lab_id, branches={})
                            dict_d = {'lab_id': lab_id, 'branch_details': {}}
                            dict_d['branch_details'].update(
                                {1: {'address': address, 'telephone1': telephone1, 'mobile': mobile, 'country_name': country_name,
                                         'state_name': state_name, 'city_name': city_name,
                                         'locality_name': locality_name, 'pincode': pincode,'type_name':type_name}})
                            branch_obj.branches = dict_d
                            branch_obj.save()
                            messages.success(request, 'Branch Successfully Added')
                            return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=3')

                    elif request.method == 'GET' and lab:
                        try:
                            delete = request.GET.get('delete')
                            branchid = request.GET.get('branchid')
                        except:
                            delete = None
                            branchid = None

                        try:
                            update = request.GET.get('update')
                            branchid = request.GET.get('branchid')
                        except:
                            update = None
                            branchid = None

                        if delete and branchid:
                            try:
                                branch_obj_full = Lab_branches.objects.get(lab_id=lab_id)
                                branch_obj = branch_obj_full.branches
                            except:
                                branch_obj = {'lab_id': lab_id, 'branch_details': {}}
                            try:
                                if branchid in list(branch_obj['branch_details'].keys()):
                                    del branch_obj['branch_details'][branchid]
                                    branch_obj_full.branches = branch_obj
                                    branch_obj_full.save()
                                    messages.success(request, 'Branch Successfully Deleted')
                                    return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=3')
                            except:
                                messages.success(request, 'Something Bad Happened')
                                return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=3')

                        try:
                            branch_obj_full = Lab_branches.objects.get(lab_id=lab_id)
                            branch_obj = branch_obj_full.branches['branch_details']
                        except:
                            branch_obj = None
                        country = Country.objects.filter(delete=False)
                        state = State.objects.filter(delete=False)
                        city = City.objects.filter(delete=False)
                        locality = Locality.objects.filter(delete=False)
                        return render(request, 'data_management/lab_data/edit_lab_data.html',
                                      {
                                       'tab': tab,
                                       'reviewer_user_data': reviewer_user_data,
                                       'publisher_user_data': publisher_user_data,
                                       'valid_choice': valid_choice,
                                       'country': country, 'city': city, 'state': state, 'locality': locality,
                                       'branch_obj': branch_obj,
                                       'lab_id': lab_id,
                                       'lab': lab, 'back_to_url': back_to_url,'lab_type_obj':lab_type_obj})

                        try:
                            branch_obj_full = Lab_branches.objects.get(lab_id=lab_id)
                            branch_obj = branch_obj_full.branches['branch_details']
                        except:
                            branch_obj = None
                        country = Country.objects.all()
                        state = State.objects.all()
                        city = City.objects.all()
                        locality = Locality.objects.all()
                        return render(request, 'data_management/lab_data/edit_lab_data.html',
                                      {
                                       'tab': tab,
                                       'reviewer_user_data': reviewer_user_data,
                                       'publisher_user_data': publisher_user_data,
                                       'valid_choice': valid_choice,
                                       'country': country, 'city': city, 'state': state, 'locality': locality,
                                       'branch_obj': branch_obj,
                                       'lab_id': lab_id,
                                       'lab': lab, 'back_to_url': back_to_url,'lab_type_obj':lab_type_obj})

                    else:
                        messages.error(request, "Method Not Allowed")
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            return HttpResponseRedirect(reverse('publisher-lab-listing'))

                        return HttpResponseRedirect(reverse('lab-listing'))

                elif tab == '4':
                    lab = None
                    delete = None
                    planid = None
                    try:
                        lab = Labs.objects.get(id=lab_id)
                    except:
                        lab = None
                    if request.method == 'GET' and lab:

                        try:
                            delete = request.GET.get('delete')
                            planid = request.GET.get('planid')
                        except:
                            delete = None
                            planid = None
                        if delete and planid:
                            try:
                                plan_obj_full = Labs_plan.objects.get(lab_id=lab_id)
                                plan_obj = plan_obj_full.package_details
                            except:
                                plan_obj = {}
                            try:
                                if planid in list(plan_obj['plan_details'].keys()):
                                    del plan_obj['plan_details'][planid]
                                    plan_obj_full.package_details = plan_obj
                                    plan_obj_full.save()
                                    messages.success(request, 'Plan Successfully Deleted')
                                    return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=4')
                            except:
                                messages.success(request, 'Something Bad Happened')
                                return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=4')

                        plan_category_list = PlanCategory.objects.all()
                        provider_list = ServiceProvider.objects.all()
                        try:
                            plan_obj = Labs_plan.objects.get(lab_id=lab_id)
                            plan = plan_obj.package_details
                            plan_list = plan['plan_details']
                        except:
                            plan_obj = None
                            plan_list = None
                        return render(request, 'data_management/lab_data/edit_lab_data.html',
                                      {
                                        'tab': tab,
                                       'reviewer_user_data': reviewer_user_data,
                                       'publisher_user_data': publisher_user_data,
                                        'valid_choice': valid_choice,
                                       'lab_id': lab_id,
                                       'lab': lab,
                                       'provider_list': provider_list, 'plan_list': plan_list,
                                       'plan_category_list': plan_category_list, 'back_to_url': back_to_url})

                    elif request.method == 'POST' and lab:
                        plan_name = request.POST['package_name']
                        provider_id = request.POST['provider_name']
                        instructions = request.POST['instructions']
                        package_description = request.POST['package_description']
                        investigation = request.POST.getlist('investigations')
                        blood_bank = request.POST.getlist('blood_tests')
                        consultation = request.POST.getlist('consultations')
                        imaging = request.POST.getlist('diabetes_evaluation')
                        plan_price = float(request.POST['package_rates'])
                        timings = request.POST['timings']
                        plan_validity = request.POST['validity']
                        dict_in = {}
                        if (len(investigation) > 0) and investigation[0] != '':
                            for i in range(1, (len(investigation) + 1)):
                                dict_in.update({str(i): investigation[i - 1]})
                        else:
                            dict_in = {}

                        dict_co = {}
                        if ((len(consultation) > 0) and consultation[0] != ''):
                            for i in range(1, (len(consultation) + 1)):
                                dict_co.update({str(i): consultation[i - 1]})
                        else:
                            dict_co = {}

                        dict_im = {}
                        if (len(imaging) > 0) and imaging[0] != '':
                            for i in range(1, (len(imaging) + 1)):
                                dict_im.update({str(i): imaging[i - 1]})
                        else:
                            dict_im = {}

                        dict_bb = {}
                        if (len(blood_bank) > 0) and blood_bank[0] != '':
                            for i in range(1, (len(blood_bank) + 1)):
                                dict_bb.update({str(i): blood_bank[i - 1]})
                        else:
                            dict_bb = {}

                        dict_description = {}
                        dict_description.update({'investigation': dict_in, 'consultation': dict_co,
                                                 'imaging': dict_im, 'blood_bank': dict_bb, })
                        try:
                            plan_obj = Labs_plan.objects.get(lab_id=lab_id)
                            try:
                                plan_list = plan_obj.package_details
                            except:
                                plan_list = {'lab_id': lab_id, 'plan_details': {}}
                        except:
                            plan_obj = Labs_plan(lab_id=lab_id)
                            plan_list = {'lab_id': lab_id, 'plan_details': {}}

                        try:
                            if len(plan_list['plan_details']) > 0:
                                no_of_plans = int(len(plan_list['plan_details'].keys()))
                                new_plan_index = str(no_of_plans + 1)
                            else:
                                new_plan_index = '1'
                        except:
                            new_plan_index = '1'
                            # plan_list['plan_details']= {}
                            plan_list = {'lab_id': lab_id, 'plan_details': {}}
                            # print 'type = ',type(plan_list['plan_details'])

                        if plan_name and provider_id:
                            plan_list['plan_details'].update({new_plan_index: {'plan_name': plan_name,
                                                                               'provider_id': provider_id,
                                                                               'instructions': instructions,
                                                                               'package_description': package_description,
                                                                               'plan_price': plan_price,
                                                                               'timings': timings,
                                                                               'plan_validity': plan_validity,
                                                                               'description': dict_description}
                                                              })
                            if plan_obj:
                                plan_obj.package_details = plan_list
                                plan_obj.save()
                            else:
                                plan_obj = Labs_plan(lab_id=lab_id, package_details=plan_list)
                                plan_obj.save()

                            messages.success(request, "Plan Successfully Added")
                            return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=4')

                        else:
                            messages.error(request, "Please provide Provider and Plan name")
                            return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=4')

                elif tab == '5':
                    if request.method =='GET':
                        lab = Labs.objects.get(id=lab_id)
                        fields_json = lab.verified_fields

                        full_list = []
                        verified_list = []
                        for i in fields_json:
                            for k, v in i.items():
                                full_list.append(k)
                                if v == True:
                                    verified_list.append(k)
                        return render(request, 'data_management/lab_data/edit_lab_data.html',
                                      {
                                          'tab': tab,
                                          'reviewer_user_data': reviewer_user_data,
                                          'publisher_user_data': publisher_user_data,
                                          'valid_choice': valid_choice,
                                          'lab_id': lab_id,
                                          'lab': lab,
                                          'back_to_url': back_to_url,
                                          'full_list':full_list,
                                          'verified_list':verified_list
                                      })

                    if request.method == 'POST':
                        field_names = request.POST.getlist('vfields')
                        lab_object = Labs.objects.filter(id=lab_id)
                        fields_json = lab_object[0].verified_fields
                        full_list = []
                        for i in fields_json:
                            for k, v in i.items():
                                full_list.append(k)
                        for i in full_list:
                            if i in field_names:
                                c = -1
                                for x in fields_json:
                                    c += 1
                                    for k, v in x.items():
                                        if k == i:
                                            fields_json[c] = {k: True}
                            else:
                                c = -1
                                for x in fields_json:
                                    c += 1
                                    for k, v in x.items():
                                        if k == i:
                                            fields_json[c] = {k: False}

                        checkj = json.dumps(fields_json)
                        lab_object.update(verified_fields=fields_json)
                        messages.success(request, "Successfully Updated Lab Field Meta Data")
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                else:
                    messages.error(request, "No method available")
                    is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-lab-listing'))
                    return HttpResponseRedirect(reverse('lab-listing'))

            else:
                messages.error(request, "Access Denied")
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-lab-listing'))
                return HttpResponseRedirect(reverse('lab-listing'))

        else:
            messages.error(request, "Lab Not Found")
            is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-lab-listing'))
            return HttpResponseRedirect(reverse('lab-listing'))
    except Exception as e:
        #print e
        raise Http404

""" Blood Bank  Functions Start here """
####################################################################
# Name - mark_as_complete_caller_bloodbank                         #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_bloodbank(request):
    try:
        if request.method == 'POST':
            bloodbank_id = request.POST['bloodbank_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            bloodbank_obj = BloodBank.objects.get(id=bloodbank_id)
            if bloodbank_obj and reviewer_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    bloodbank_obj.current_user = User.objects.get(id=reviewer_data_id)

                    bloodbank_obj.previous_user = request.user.id
                    bloodbank_obj.stage = Stage.objects.get(pk=3)
                    bloodbank_obj.free_text = ''
                    bloodbank_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    bloodbank_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('bloodbank-listing'))
                except:
                    raise Http404
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('bloodbank-listing'))
    except Exception as e:
        return HttpResponse("Something Bad Happened")

####################################################################
# Name - bloodbank_data_manage                                     #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def bloodbank_data_manage(request):
    try:
        return render(request, 'admin/bloodbank_management/bloodbank_management.html',
                      {'tab': 'data', 'crosal': 'labmanage'})
    except Exception as e:
        raise Http404

####################################################################
# Name - bloodbank_data_by_users                                   #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def bloodbank_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            bloodbank_all_data = BloodBank.objects.filter(current_user_id=search_data).order_by('name')
            paginator = Paginator(bloodbank_all_data, 100)
            page = request.GET.get('page')
            try:
                bloodbank_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                bloodbank_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                bloodbank_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/bloodbank_management/bloodbank_by_user.html',
                      {'tab': 'data', 'crosal': 'labbymanage', 'bloodbank_all_data': bloodbank_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            bloodbank_all_data = BloodBank.objects.filter(name__icontains=search_data_two).order_by('name')
            paginator = Paginator(bloodbank_all_data, 100)
            page = request.GET.get('page')
            try:
                bloodbank_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                bloodbank_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                bloodbank_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/bloodbank_management/bloodbank_by_user.html',
                          {'tab': 'data', 'crosal': 'labbymanage', 'bloodbank_all_data': bloodbank_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})

        bloodbank_all_data = BloodBank.objects.all().order_by('name')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(bloodbank_all_data, 100)
        page = request.GET.get('page')
        try:
            bloodbank_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            bloodbank_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            bloodbank_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/bloodbank_management/bloodbank_by_user.html',
                      {'tab': 'data', 'crosal': 'labbymanage', 'bloodbank_all_data': bloodbank_all_data,
                       'user_data_obj': user_data_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - bloodbank_data_by_stages                                  #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def bloodbank_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            bloodbank_all_data = BloodBank.objects.filter(stage_id=stage_id).order_by('name')
        else:
            bloodbank_all_data = BloodBank.objects.all().order_by('name')
            stage_id=None

        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(bloodbank_all_data, 100)
        page = request.GET.get('page')
        try:
            bloodbank_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            bloodbank_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            bloodbank_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/bloodbank_management/bloodbank_by_stages.html',
                      {'tab': 'data', 'crosal': 'bloodbankbymanage', 'bloodbank_all_data': bloodbank_all_data,
                       'stage_data': stage_data,'stage_no':stage_id })
    except:
        raise Http404

####################################################################
# Name - Blood Bank Assignment                                     #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def bloodbank_assignment(request):
    try:
        stage_filter = False
        user_filter = False
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all().order_by('name')
        city_list = City.objects.all().order_by('name')
        locality_list = Locality.objects.all().order_by('name')
        user_data = User.objects.all().order_by('username')
        locality_obj = None
        current_user_id = None
        user_id_data = None
        stage_id = None
        stage_id_data = None
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            bbank =  BloodBank.objects.filter(name__icontains=search_data).order_by('name')
            paginator = Paginator(bbank, 100)
            page = request.GET.get('page')
            try:
                bbank = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                bbank = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                bbank = paginator.page(paginator.num_pages)
            return render(request, 'admin/bloodbank_management/bloodbank_assign.html',
                {'tab': 'data', 'crosal': 'bloodbankbymanage', 'stage_data': stage_data,
                'bbank': bbank, 'state_data_obj': state_data_obj,'search_data':search_data,
                 'city_list':city_list})
        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'bloodbank_filter':
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = None
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = None
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
                state= State.objects.get(id = state_filter)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')

                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                 city=city_data,
                                                                 locality=locality_data,
                                                                 current_user_id=user_id_data,
                                                                 stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                     city=city_data,
                                                                     locality=locality_data,
                                                                     current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                     city=city_data,
                                                                     locality=locality_data,
                                                                     stage_id=stage_id_data).order_by('name')
                    else:
                        bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                 city=city_data,
                                                                 locality=locality_data).order_by('name')


                    paginator = Paginator(bloodbank_obj, 100)
                    page = request.GET.get('page')
                    try:
                        bloodbank_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        bloodbank_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        bloodbank_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/bloodbank_management/bloodbank_assign.html',
                                  {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                                   'bbank': bloodbank_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_filter': locality_filter,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,'filter_name':filter_name,'state_data':state_data,
                                    'city_data':city_data,'locality_data':locality_data,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,
                                   'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,'city_list':city_list,
                                   'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                elif city_data:
                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                 city=city_data,
                                                                 current_user_id=user_id_data,
                                                                 stage_id=stage_id_data).order_by('name')
                        elif user_id_data:
                            bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                     city=city_data,
                                                                     current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                     city=city_data,
                                                                     stage_id=stage_id_data).order_by('name')
                    else:
                        bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                 city=city_data).order_by('name')
                    paginator = Paginator(bloodbank_obj, 100)
                    page = request.GET.get('page')
                    try:
                        bloodbank_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        bloodbank_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        bloodbank_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/bloodbank_management/bloodbank_assign.html',
                                  {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                                   'bbank': bloodbank_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_filter': locality_filter,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,'filter_name':filter_name,'state_data':state_data,
                                    'city_data':city_data,'locality_data':locality_data,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,
                                   'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,'city_list':city_list, \
                                   'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data})
                else:
                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                 current_user_id=user_id_data,
                                                                 stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                     current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            bloodbank_obj = BloodBank.objects.filter(state=state,
                                                                     stage_id=stage_id_data).order_by('name')
                    else:
                        bloodbank_obj = BloodBank.objects.filter(state=state).order_by('name')

                    paginator = Paginator(bloodbank_obj, 100)
                    page = request.GET.get('page')
                    try:
                        bloodbank_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        bloodbank_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        bloodbank_obj = paginator.page(paginator.num_pages)

                    return render(request, 'admin/bloodbank_management/bloodbank_assign.html',
                                  {'tab': 'data', 'crosal': 'bloodbankbymanage', 'stage_data': stage_data,
                                   'bbank': bloodbank_obj, 'state_data_obj': state_data_obj,
                                   'state_filter': state_filter, 'locality_filter': locality_filter,
                                   'city_filter': city_filter, 'city_obj': None,'filter_name':filter_name,'state_data':state_data,
                                    'city_data':city_data,'locality_data':None,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,
                                   'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,'city_list':city_list,
                                   'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
            elif not state_data and user_id_data or stage_id_data :
                if user_id_data or stage_id_data:
                    if user_id_data and stage_id_data:
                        bloodbank_obj = BloodBank.objects.filter(current_user_id=user_id_data,
                                                                 stage_id=stage_id_data).order_by('name')
                    elif user_id_data:
                        bloodbank_obj = BloodBank.objects.filter(current_user_id=user_id_data).order_by('name')

                    elif stage_id_data:
                        bloodbank_obj = BloodBank.objects.filter(stage_id=stage_id_data).order_by('name')
                else:
                    bloodbank_obj = None
                paginator = Paginator(bloodbank_obj, 100)
                page = request.GET.get('page')
                try:
                    bloodbank_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    bloodbank_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    bloodbank_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/bloodbank_management/bloodbank_assign.html',
                              {'tab': 'data', 'crosal': 'bloodbankbymanage', 'stage_data': stage_data,
                               'bbank': bloodbank_obj, 'state_data_obj': state_data_obj,
                               'filter_name':filter_name,'state_data':state_data,
                                'city_data':city_data,'locality_data':locality_data,
                               'stage_filter': stage_filter, 'user_filter': user_filter,
                               'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,'city_list':city_list,
                               'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                               })
            else:
                bloodbank_obj = BloodBank.objects.all().order_by('name')
                paginator = Paginator(bloodbank_obj, 100)
                page = request.GET.get('page')
                try:
                    bloodbank_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    bloodbank_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    bloodbank_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/bloodbank_management/bloodbank_assign.html',
                              {'tab': 'data', 'crosal': 'bloodbankbymanage', 'stage_data': stage_data,
                               'bbank': bloodbank_obj, 'state_data_obj': state_data_obj,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'stage_filter': stage_filter, 'user_filter': user_filter,
                               'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                               'city_list': city_list,
                               'locality_obj': locality_obj, 'current_user_id': user_id_data, 'stage_id': stage_id_data
                               })
        else:
            filter_name = None
            state_data = None
            city_data = None
            locality_data = None
            bloodbank_obj = BloodBank.objects.all().order_by('name')
            paginator = Paginator(bloodbank_obj, 100)
            page = request.GET.get('page')
            try:
                bloodbank_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                bloodbank_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                bloodbank_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/bloodbank_management/bloodbank_assign.html',
                          {'tab': 'data', 'crosal': 'bloodbankbymanage', 'stage_data': stage_data,
                           'bbank': bloodbank_obj, 'state_data_obj': state_data_obj,
                           'filter_name':filter_name,'state_data':state_data,
                            'city_data':city_data,'locality_data':locality_data,
                           'stage_filter': stage_filter, 'user_filter': user_filter,
                           'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,'city_list':city_list,
                           'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                           })
    except Exception as e:
        raise Http404

####################################################################
# Name - bloodbank_listing                                         #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def bloodbank_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        state_data_obj = State.objects.all().order_by('name')
        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            bloodbank_obj = BloodBank.objects.filter(current_user_id=telecaller_id,is_disable=False ).order_by('name')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            bloodbank_obj = BloodBank.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
        else:
            reviewer_id = 0
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            bloodbank_obj = BloodBank.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('name')
        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:
            # lab_obj = Labs.objects.filter(current_user_id=telecaller_id).order_by(
            #    'name')  # current_user_id=telecaller_id
            if len(bloodbank_obj) == 0:
                messages.error(request, "No Bloodbank found")

                return render(request, 'data_management/bloodbank_data/bloodbank_listing.html',
                              {'tab_listing': 'bloodbank_listing'})
            elif len(bloodbank_obj) > 0:
                paginator = Paginator(bloodbank_obj, 50)
                page = request.GET.get('page')
                try:
                    bloodbank_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    bloodbank_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    bloodbank_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/bloodbank_data/bloodbank_listing.html',
                              dict(bloodbank=bloodbank_obj, tab_listing='bloodbank_listing',
                                   state_data_obj=state_data_obj))
        elif reviewer_id:
            bloodbank_obj = BloodBank.objects.filter(current_user_id=reviewer_id,is_disable=False).order_by('name')
            if len(bloodbank_obj) == 0:
                messages.error(request, "No Bloodbank found")
                return render(request, 'data_management/bloodbank_data/bloodbank_listing.html',
                              {'tab_listing': 'bloodbank_listing'})
            elif len(bloodbank_obj) > 0:
                paginator = Paginator(bloodbank_obj, 50)
                page = request.GET.get('page')
                try:
                    bloodbank_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    bloodbank_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    bloodbank_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/bloodbank_data/bloodbank_listing.html',
                              dict(bloodbank=bloodbank_obj, tab_listing='bloodbank_listing',
                                   state_data_obj=state_data_obj))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - assign Bloodbank                                          #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_bloodbank(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                nbslist = []
                nbflist = []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = BloodBank.objects.filter(id=checkedValues[i]).update(
                            current_user_id=assign_user,
                            stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue

                my_send_mail(request, 'bloodbank', nbslist, nbflist, 'Blood Bank Assignment', 'Assigned')
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/blood-bank/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - add_bloodbank                                             #
# Owner - NIshank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_bloodbank(request):
    try:
        if request.method == "GET":
            country_obj = Country.objects.filter(delete=False)
            state_obj = State.objects.filter(delete=False)
            services = BloodBankServices.objects.filter(delete=False)
            return render(request, 'data_management/bloodbank_data/add_bloodbank.html',
                          {'bloodbank_add': 'add', 'tab_listing': 'bloodbank_listing', 'country_obj': country_obj,
                           'state_obj': state_obj,'services':services})
        elif request.method == "POST":
            bloodbank_name = request.POST['bloodbank_name'].strip()
            address_1 = request.POST['address1'].strip()
            address_2 = request.POST['address2'].strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip()
            location = request.POST['locality_id'].strip()
            pincode = request.POST['pincode'].strip()
            blood_bank_doctor = request.POST['blood_bank_doctor'].strip()
            education = request.POST['education'].strip()
            telephone = request.POST['telephone'].strip()
            #telephone_2 = request.POST['telephone2'].strip()
            #telephone_3 = request.POST['telephone3'].strip()
            license = request.POST['license'].strip()
            mobile = request.POST['mobile'].strip()
            stars = request.POST['stars'].strip()
            #usermanagement_objects_list = request.user.usermanagement_set.all()
            try:
                is_emergency = request.POST['is_emergency'].strip()
            except:
                is_emergency = 0
            if is_emergency == '1':
                is_emergency= True
            else:
                is_emergency = False
            pricing = request.POST['pricing'].strip()
            services = request.POST.getlist('services')
            tempstr = ''
            cc = 0
            if services:
                for i in services:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            services = tempstr
            #for i in usermanagement_objects_list:
            #    if i.is_reviewer:
            #        stage = 2
            #    elif i.is_publisher:
            #        stage = 3
            #    else:
            #        stage = 1

            bloodbank_obj = BloodBank(name=bloodbank_name, address_1=address_1, address_2=address_2,
                                      country_id=country, state_id=state, city_id=city, locality_id=location,
                                      pincode=pincode, blood_bank_doctor=blood_bank_doctor, education=education,
                                      telephone=telephone, #telephone_2=telephone_2, telephone_3=telephone_3,
                                      license=license, mobile=mobile, stars=stars, stage_id=2,
                                      current_user_id=request.user.id,is_emergency=is_emergency,pricing=pricing,services=services)

            bloodbank_obj.save()
            messages.success(request, "New Blood Bank Successfully added")
            return HttpResponseRedirect('/blood-bank/listing/')
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - bloodbank_listing_edit                                    #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def bloodbank_listing_edit(request, bloodbank_id=None):
    tab_bb = '1'
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_blood_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_blood_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    services = BloodBankServices.objects.filter(delete=False)
    try:
        if bloodbank_id is not None:
            bloodbank = BloodBank.objects.get(id=bloodbank_id)
            if (bloodbank.current_user_id == request.user.id) or request.user.is_superuser:

                if bloodbank_id is not None and request.method == "GET":
                    bloodbank = BloodBank.objects.get(id=bloodbank_id)
                    bloodbank_current_services = bloodbank.services
                    if bloodbank_current_services :
                        bloodbank_current_services = bloodbank_current_services.split(',')
                    if bloodbank_current_services:
                        bsl=[]
                        for i in bloodbank_current_services:
                            if i != '' and  i !=  ' ':
                                bsl.append(int(i.strip()))
                        bloodbank_current_services = bsl
                    country_obj = Country.objects.all()
                    state_obj = State.objects.all()
                    if bloodbank:
                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        return render(request, 'data_management/bloodbank_data/edit_bloodbank_data.html',
                                      {'tab': 'basic', 'tab_listing': 'bloodbank_listing', 'bloodbank': bloodbank,
                                       'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'valid_choice': valid_choice,'services':services,'bloodbank_current_services':bloodbank_current_services,
                                       'user_is_publisher': user_is_publisher,'tab_bb':tab_bb})
                    else:
                        messages.error('Bloood Bank Not Found')
                        return HttpResponseRedirect('/blood-bank/listing/')
                elif request.method == "POST" and bloodbank_id is not None:
                    bloodbank_name = request.POST['bloodbank_name'].strip()
                    address_1 = request.POST['address1'].strip()
                    address_2 = request.POST['address2'].strip()
                    country = request.POST['country_id'].strip()
                    state = request.POST['state_id'].strip()
                    city = request.POST['city_id'].strip()
                    location = request.POST['locality_id'].strip()
                    pincode = request.POST['pincode'].strip()
                    blood_bank_doctor = request.POST['blood_bank_doctor'].strip()
                    education = request.POST['education'].strip()
                    telephone = request.POST['telephone'].strip()
                    #telephone_2 = request.POST['telephone2'].strip()
                    #telephone_3 = request.POST['telephone3'].strip()
                    license = request.POST['license'].strip()
                    mobile = request.POST['mobile'].strip()
                    stars = request.POST['stars'].strip()
                    try:
                        is_emergency = request.POST['is_emergency'].strip()
                    except:
                        is_emergency = 0
                    if is_emergency == '1':
                        is_emergency= True
                    else:
                        is_emergency = False
                    pricing = request.POST['pricing'].strip()
                    services = request.POST.getlist('services')
                    tempstr = ''
                    cc = 0
                    if services:
                        for i in services:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    services = tempstr
                    bloodbank_obj = BloodBank.objects.get(pk=bloodbank_id)
                    if bloodbank_obj:
                        bloodbank_obj.name = bloodbank_name
                        bloodbank_obj.address_1 = address_1
                        bloodbank_obj.address_2 = address_2
                        bloodbank_obj.country_id = country
                        bloodbank_obj.state_id = state
                        bloodbank_obj.city_id = city
                        bloodbank_obj.locality_id = location
                        bloodbank_obj.pincode = pincode
                        bloodbank_obj.blood_bank_doctor = blood_bank_doctor
                        bloodbank_obj.education = education
                        bloodbank_obj.telephone = telephone
                        #bloodbank_obj.telephone_2 = telephone_2
                        #bloodbank_obj.telephone_3 = telephone_3
                        bloodbank_obj.license = license
                        bloodbank_obj.mobile = mobile
                        bloodbank_obj.stars = stars
                        bloodbank_obj.is_emergency = is_emergency
                        bloodbank_obj.pricing = pricing
                        bloodbank_obj.services = services
                        bloodbank_obj.save()
                        messages.success(request, 'Blood Bank Data Successfully Updated')
                        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                        if len(is_publisher):
                            return HttpResponseRedirect(reverse('publisher-bloodbank-listing'))
                        return HttpResponseRedirect('/blood-bank/edit/' + bloodbank_id + '/')

            else:
                messages.error(request, 'Access Denied')
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-bloodbank-listing'))
                return HttpResponseRedirect(reverse('bloodbank-listing'))

        else:
            messages.error(request, 'Blood Bank Not Found')
            is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-bloodbank-listing'))
            return HttpResponseRedirect(reverse('bloodbank-listing'))

    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - mark_as_reverse_caller_bloodbank                          #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_bloodbank(request):
    try:
        if request.method == 'POST':
            bloodbank_id = request.POST['bloodbank_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            bloodbank_obj = BloodBank.objects.get(id=bloodbank_id)
            if bloodbank_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    bloodbank_obj.current_user = User.objects.get(id=caller_data_id)
                    bloodbank_obj.previous_user = request.user.id
                    bloodbank_obj.stage = Stage.objects.get(pk=2)
                    bloodbank_obj.free_text = free_text
                    bloodbank_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-bloodbank-listing'))
                    return HttpResponseRedirect(reverse('bloodbank-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-bloodbank-listing'))
        return HttpResponseRedirect(reverse('bloodbank-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_complete_reviewer_bloodbank                       #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_bloodbank(request):
    try:
        if request.method == 'POST':
            bloodbank_id = request.POST['bloodbank_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            bloodbank_obj = BloodBank.objects.get(id=bloodbank_id)
            if bloodbank_obj and publisher_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    bloodbank_obj.current_user = User.objects.get(id=publisher_data_id)
                    bloodbank_obj.previous_user = request.user.id
                    bloodbank_obj.stage = Stage.objects.get(pk=4)
                    bloodbank_obj.free_text = ''
                    bloodbank_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    bloodbank_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('bloodbank-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('bloodbank-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_reverse_reviewer_bloodbank                         #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_bloodbank(request):
    try:
        if request.method == 'POST':
            bloodbank_id = request.POST['bloodbank_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            bloodbank_obj = BloodBank.objects.get(id=bloodbank_id)
            if bloodbank_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    bloodbank_obj.current_user = User.objects.get(id=reviewer_data_id)
                    bloodbank_obj.previous_user = request.user.id
                    bloodbank_obj.stage = Stage.objects.get(pk=3)
                    bloodbank_obj.free_text = free_text
                    bloodbank_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    return HttpResponseRedirect(reverse('publisher-bloodbank-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('publisher-bloodbank-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_complete_publisher_bloodbank                       #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_bloodbank(request):
    try:
        if request.method == 'POST':
            bloodbank_id = request.POST['bloodbank_id']
            bloodbank_obj = BloodBank.objects.get(id=bloodbank_id)
            if bloodbank_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    bloodbank_obj.stage = Stage.objects.get(pk=5)
                    bloodbank_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    return HttpResponseRedirect(reverse('bloodbank-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('bloodbank-listing'))
    except Exception as e:
        raise Http404

"""Ambulance functions start"""
####################################################################
# Name - Ambulance_assignment                                      #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def ambulance_assignment(request):
    try:
        stage_filter = False
        user_filter = False
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all().order_by('name')
        city_list = City.objects.all().order_by('name')
        locality_list = Locality.objects.all().order_by('name')
        user_data = User.objects.all().order_by('username')
        locality_obj = None
        city_obj = None
        current_user_id = None
        user_id_data = None
        stage_id = None
        stage_id_data = None
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            ambulance_obj =  Ambulance.objects.filter(name__icontains=search_data).order_by('name')
            paginator = Paginator(ambulance_obj, 100)
            page = request.GET.get('page')
            try:
                ambulance_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                ambulance_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                ambulance_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/ambulance_management/ambulance_assign.html',
                  {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                  'ambulance': ambulance_obj, 'state_data_obj': state_data_obj,
                  'search_data':search_data})
        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'ambulance_filter':
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = None
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = None
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')

                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            ambulance_obj = Ambulance.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            ambulance_obj = Ambulance.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            ambulance_obj = Ambulance.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          stage_id=stage_id_data).order_by('name')

                        paginator = Paginator(ambulance_obj, 100)
                        page = request.GET.get('page')
                        try:
                            ambulance_obj = paginator.page(page)
                        except PageNotAnInteger:
                            # If page is not an integer, deliver first page.
                            ambulance_obj = paginator.page(1)
                        except EmptyPage:
                            # If page is out of range (e.g. 9999), deliver last page of results.
                            ambulance_obj = paginator.page(paginator.num_pages)
                        return render(request, 'admin/ambulance_management/ambulance_assign.html',
                                      {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                                       'ambulance': ambulance_obj, 'state_data_obj': state_data_obj,
                                       'city_obj': city_obj, 'locality_obj': locality_obj,
                                       'locality_filter': locality_filter, 'city_filter': city_filter,
                                       'state_filter': state_filter,
                                       'filter_name': filter_name, 'state_data': state_data,
                                       'city_data': city_data, 'locality_data': locality_data,
                                       'stage_filter': stage_filter, 'user_filter': user_filter,
                                       'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                       'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                       })
                    else:
                        ambulance_obj = Ambulance.objects.filter(state=state_data_obj,
                                                                 city=city_data,
                                                                 locality=locality_data).order_by('name')
                        paginator = Paginator(ambulance_obj, 100)
                        page = request.GET.get('page')
                        try:
                            ambulance_obj = paginator.page(page)
                        except PageNotAnInteger:
                            # If page is not an integer, deliver first page.
                            ambulance_obj = paginator.page(1)
                        except EmptyPage:
                            # If page is out of range (e.g. 9999), deliver last page of results.
                            ambulance_obj = paginator.page(paginator.num_pages)
                        return render(request, 'admin/ambulance_management/ambulance_assign.html',
                                      {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                                       'ambulance': ambulance_obj, 'state_data_obj': state_data_obj,
                                       'city_obj': city_obj, 'locality_obj': locality_obj,
                                       'locality_filter': locality_filter, 'city_filter': city_filter,
                                       'state_filter': state_filter,
                                       'filter_name': filter_name, 'state_data': state_data,
                                       'city_data': city_data, 'locality_data': locality_data,
                                       'stage_filter': stage_filter, 'user_filter': user_filter,
                                       'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                       'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                       })
                elif city_data:
                    if user_id_data or stage_id_data:
                        if user_id_data and  stage_id_data :
                            ambulance_obj = Ambulance.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')
                        elif user_id_data:
                            ambulance_obj = Ambulance.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            ambulance_obj = Ambulance.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          stage_id=stage_id_data).order_by('name')
                        paginator = Paginator(ambulance_obj, 100)
                        page = request.GET.get('page')
                        try:
                            ambulance_obj = paginator.page(page)
                        except PageNotAnInteger:
                            # If page is not an integer, deliver first page.
                            ambulance_obj = paginator.page(1)
                        except EmptyPage:
                            # If page is out of range (e.g. 9999), deliver last page of results.
                            ambulance_obj = paginator.page(paginator.num_pages)
                        return render(request, 'admin/ambulance_management/ambulance_assign.html',
                                      {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                                       'ambulance': ambulance_obj, 'state_data_obj': state_data_obj,
                                       'city_obj': city_obj, 'locality_obj': locality_obj,
                                       'locality_filter': locality_filter, 'city_filter': city_filter,
                                       'state_filter': state_filter,
                                       'filter_name': filter_name, 'state_data': state_data,
                                       'city_data': city_data, 'locality_data': locality_data,
                                       'stage_filter': stage_filter, 'user_filter': user_filter,
                                       'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                       'current_user_id':user_id_data, 'stage_id':stage_id_data
                                       })
                    else:
                        ambulance_obj = Ambulance.objects.filter(state=state_data, city=city_data).order_by(
                            'name')
                        paginator = Paginator(ambulance_obj, 100)
                        page = request.GET.get('page')
                        try:
                            ambulance_obj = paginator.page(page)
                        except PageNotAnInteger:
                            # If page is not an integer, deliver first page.
                            ambulance_obj = paginator.page(1)
                        except EmptyPage:
                            # If page is out of range (e.g. 9999), deliver last page of results.
                            ambulance_obj = paginator.page(paginator.num_pages)
                        return render(request, 'admin/ambulance_management/ambulance_assign.html',
                                      {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                                       'ambulance': ambulance_obj, 'state_data_obj': state_data_obj,
                                       'city_obj': city_obj, 'locality_obj': locality_obj,
                                       'locality_filter': locality_filter, 'city_filter': city_filter,
                                       'state_filter': state_filter,
                                       'filter_name': filter_name, 'state_data': state_data,
                                       'city_data': city_data, 'locality_data': locality_data,
                                       'stage_filter': stage_filter, 'user_filter': user_filter,
                                       'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                       'current_user_id':user_id_data, 'stage_id':stage_id_data
                                       })
                else:
                    if user_id_data or stage_id_data:
                        if user_id_data and  stage_id_data :
                            ambulance_obj = Ambulance.objects.filter(state_id=state_filter,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')
                        elif user_id_data:
                            ambulance_obj = Ambulance.objects.filter(state_id=state_filter,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            ambulance_obj = Ambulance.objects.filter(state_id=state_filter,
                                                          stage_id=stage_id_data).order_by('name')
                    else:
                        ambulance_obj = Ambulance.objects.filter(state=state_data).order_by('name')
                    paginator = Paginator(ambulance_obj, 100)
                    page = request.GET.get('page')
                    try:
                        ambulance_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        ambulance_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        ambulance_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/ambulance_management/ambulance_assign.html',
                                  {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                                   'ambulance': ambulance_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,
                                   'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                   'current_user_id':user_id_data, 'stage_id':stage_id_data
                                   })
            elif not state_data and user_id_data or stage_id_data :

                if user_id_data or stage_id_data:
                    if user_id_data and stage_id_data:
                        ambulance_obj = Ambulance.objects.filter(current_user_id=user_id_data,
                                                               stage_id=stage_id_data).order_by('name')
                    elif user_id_data:
                        ambulance_obj = Ambulance.objects.filter(current_user_id=user_id_data).order_by('name')
                    elif stage_id_data:
                        ambulance_obj = Ambulance.objects.filter(stage_id=stage_id_data).order_by('name')
                else:
                    ambulance_obj = None
                paginator = Paginator(ambulance_obj, 100)
                page = request.GET.get('page')
                try:
                    ambulance_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    ambulance_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    ambulance_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/ambulance_management/ambulance_assign.html',
                              {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                               'ambulance': ambulance_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'stage_filter': stage_filter, 'user_filter': user_filter,
                               'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                               'current_user_id':user_id_data, 'stage_id':stage_id_data
                               })
            else:
                ambulance_obj = Ambulance.objects.all().order_by('name')
                paginator = Paginator(ambulance_obj, 100)
                page = request.GET.get('page')
                try:
                    ambulance_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    ambulance_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    ambulance_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/ambulance_management/ambulance_assign.html',
                              {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                               'ambulance': ambulance_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'stage_filter': stage_filter, 'user_filter': user_filter,
                               'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                               'current_user_id': user_id_data, 'stage_id': stage_id_data
                               })

        else:
            filter_name = None
            state_data = None
            city_data = None
            locality_data = None
            ambulance_obj = Ambulance.objects.all().order_by('name')
            paginator = Paginator(ambulance_obj, 100)
            page = request.GET.get('page')
            try:
                ambulance_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                ambulance_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                ambulance_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/ambulance_management/ambulance_assign.html',
                          {'tab': 'data', 'crosal': 'labbymanage', 'stage_data': stage_data,
                           'ambulance': ambulance_obj, 'state_data_obj': state_data_obj,
                           'city_obj': city_obj, 'locality_obj': locality_obj,
                           'locality_filter': locality_filter, 'city_filter': city_filter,
                           'state_filter': state_filter,
                           'filter_name': filter_name, 'state_data': state_data,
                           'city_data': city_data, 'locality_data': locality_data,
                           'stage_filter': stage_filter, 'user_filter': user_filter,
                           'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                           'current_user_id':user_id_data, 'stage_id':stage_id_data
                           })
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - assign Ambulance                                          #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_ambulance(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                nbslist = []
                nbflist = []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = Ambulance.objects.filter(id=checkedValues[i]).update(
                            current_user_id=assign_user,
                            stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue

                my_send_mail(request, 'ambulance', nbslist, nbflist, 'Ambulance Assignment', 'Assigned')
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/ambulance/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - Ambulance_data_manage                                     #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def ambulance_data_manage(request):
    try:
        return render(request, 'admin/ambulance_management/ambulance_management.html',
                      {'tab': 'data', 'crosal': 'labmanage'})
    except Exception as e:
        raise Http404

####################################################################
# Name - Ambulance_data_by_users                                   #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def ambulance_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            ambulance_all_data = Ambulance.objects.filter(current_user_id=search_data).order_by('name')
            paginator = Paginator(ambulance_all_data, 100)
            page = request.GET.get('page')
            try:
                ambulance_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                ambulance_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                ambulance_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/ambulance_management/ambulance_by_user.html',
                      {'tab': 'data', 'crosal': 'labbymanage', 'ambulance_all_data': ambulance_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            ambulance_all_data = Ambulance.objects.filter(name__icontains=search_data_two).order_by('name')
            paginator = Paginator(ambulance_all_data, 100)
            page = request.GET.get('page')
            try:
                ambulance_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                ambulance_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                ambulance_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/ambulance_management/ambulance_by_user.html',
                          {'tab': 'data', 'crosal': 'labbymanage', 'ambulance_all_data': ambulance_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})

        ambulance_all_data = Ambulance.objects.all().order_by('name')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(ambulance_all_data, 100)
        page = request.GET.get('page')
        try:
            ambulance_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            ambulance_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            ambulance_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/ambulance_management/ambulance_by_user.html',
                      {'tab': 'data', 'crosal': 'labbymanage', 'ambulance_all_data': ambulance_all_data,
                       'user_data_obj': user_data_obj})
    except:
        raise Http404

####################################################################
# Name - Ambulance_data_by_stages                                  #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def ambulance_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            ambulance_all_data = Ambulance.objects.filter(stage_id=stage_id).order_by('name')
        else:
            ambulance_all_data = Ambulance.objects.all().order_by('name')
            stage_id=None
        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(ambulance_all_data, 100)
        page = request.GET.get('page')
        try:
            ambulance_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            ambulance_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            ambulance_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/ambulance_management/ambulance_by_stages.html',
                      {'tab': 'data', 'crosal': 'labbymanage', 'ambulance_all_data': ambulance_all_data,
                       'stage_data': stage_data,'stage_no':stage_id })
    except:
        raise Http404

####################################################################
# Name -ambulance_listing                                          #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def ambulance_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        state_data_obj = State.objects.all().order_by('name')
        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            ambulance_obj = Ambulance.objects.filter(current_user_id=telecaller_id,is_disable=False ).order_by('name')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            ambulance_obj = Ambulance.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
        else:
            reviewer_id = 0

        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            ambulance_obj = Ambulance.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('name')

        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:
            # lab_obj = Labs.objects.filter(current_user_id=telecaller_id).order_by(
            #    'name')  # current_user_id=telecaller_id
            if len(ambulance_obj) == 0:
                messages.error(request, "No Ambulance found")

                return render(request, 'data_management/ambulance_data/ambulance_listing.html',
                              {'tab_listing': 'ambulance_listing'})
            elif len(ambulance_obj) > 0:
                paginator = Paginator(ambulance_obj, 50)
                page = request.GET.get('page')
                try:
                    ambulance_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    ambulance_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    ambulance_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/ambulance_data/ambulance_listing.html',
                              dict(ambulance=ambulance_obj, tab_listing='ambulance_listing',
                                   state_data_obj=state_data_obj))
        elif reviewer_id:
            ambulance_obj = Ambulance.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
            if len(ambulance_obj) == 0:
                messages.error(request, "No Ambulance found")
                return render(request, 'data_management/ambulance_data/ambulance_listing.html',
                              {'tab_listing': 'ambulance_listing'})
            elif len(ambulance_obj) > 0:
                paginator = Paginator(ambulance_obj, 50)
                page = request.GET.get('page')
                try:
                    ambulance_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    ambulance_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    ambulance_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/ambulance_data/ambulance_listing.html',
                              dict(ambulance=ambulance_obj, tab_listing='ambulance_listing',
                                   state_data_obj=state_data_obj))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        raise Http404

####################################################################
# Name - add_ambulance                                             #
# Owner - NIshank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_ambulance(request):
    try:
        if request.method == "GET":
            country_obj = Country.objects.filter(delete=False)
            state_obj = State.objects.filter(delete=False)
            ambulance_service_master = AmbulanceServices.objects.filter(delete=False)
            ambulance_type_master = Ambulance_type_master.objects.filter(delete=False)
            return render(request, 'data_management/ambulance_data/add_ambulance.html',
                          {'ambulance_add': 'add', 'tab_listing': 'ambulance_listing', 'country_obj': country_obj,
                           'state_obj': state_obj,'ambulance_service_master': ambulance_service_master,'ambulance_type_master':ambulance_type_master})
        elif request.method == "POST":
            name = request.POST['ambulance_name'].strip()
            address = request.POST['address'].strip()
            #address_2 = request.POST['address2'].strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip()
            location = request.POST['locality_id'].strip()
            pincode = request.POST['pincode'].strip()
            contact_person = request.POST['contact-person'].strip()
            telephone = request.POST['telephone'].strip()
            #telephone_2 = request.POST['telephone2'].strip()
            #telephone_3 = request.POST['telephone3'].strip()
            mobile = request.POST['mobile'].strip()
            #type = request.POST['ambulance-type'].strip()
            #service = request.POST['service'].strip()
            #area_covered = request.POST['area-covered'].strip()
            remarks = request.POST['remarks'].strip()
            rates = request.POST['rates'].strip()
            free_text = ''
            usermanagement_objects_list = request.user.usermanagement_set.all()
            #for i in usermanagement_objects_list:
            #    if i.is_reviewer:
            #        stage = 2
            #    elif i.is_publisher:
            #        stage = 3
            #    else:
            #        stage = 1
            service = request.POST.getlist('services')
            tempstr = ''
            cc = 0
            if service:
                for i in service:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            service = tempstr
            type = request.POST.getlist('ambulance-type')
            tempstr = ''
            cc = 0
            if type:
                for i in type:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            type = tempstr

            try:
                is_emergency = request.POST['is_emergency'].strip()
            except:
                is_emergency = 0
            if is_emergency == '1':
                is_emergency= True
            else:
                is_emergency = False
            ambulance_locality_coverage_from = request.POST['locality_idfrom'].strip()
            ambulance_locality_coverage_to = request.POST['locality_idto'].strip()
            ambulance_obj = Ambulance(name=name, address=address, country_id=country,
                                      state_id=state, city_id=city, locality_id=location,
                                      pincode=pincode, service_contact_person=contact_person, telephone=telephone,
                                      mobile=mobile,
                                      type=type, service=service, remarks=remarks,
                                      stage_id=2, current_user_id=request.user.id, free_text=free_text,
                                      ambulance_locality_coverage_from_id=ambulance_locality_coverage_from,
                                      ambulance_locality_coverage_to_id =ambulance_locality_coverage_to,rates=rates,
                                      is_emergency=is_emergency)

            ambulance_obj.save()
            messages.success(request, "New Ambulance Successfully Added")
            return HttpResponseRedirect('/ambulance/listing/')
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - Ambulance_listing_edit                                    #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def ambulance_listing_edit(request, ambulance_id=None):
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_ambulance_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_ambulance_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    try:
        if ambulance_id is not None:
            ambulance = Ambulance.objects.get(id=ambulance_id)
            if(ambulance.current_user_id == request.user.id)or request.user.is_superuser:
                if request.method == "GET":
                    ambulance = Ambulance.objects.get(id=ambulance_id)
                    country_obj = Country.objects.filter(delete=False)
                    state_obj = State.objects.filter(delete=False)
                    city = City.objects.filter(delete=False)
                    locality = Locality.objects.filter(delete=False)
                    if ambulance:
                        ambulance_service_master =  AmbulanceServices.objects.filter(delete =False)
                        ambulance_current_services = ambulance.service
                        if ambulance_current_services:
                            ambulance_current_services = ambulance_current_services.split(',')
                        if ambulance_current_services:
                            bsl = []
                            for i in ambulance_current_services:
                                bsl.append(int(i.strip()))
                            ambulance_current_services = bsl
                        ambulance_type_master = Ambulance_type_master.objects.filter(delete=False)
                        ambulance_current_type = ambulance.type
                        if ambulance_current_type:
                            ambulance_current_type= ambulance_current_type.split(',')
                        if ambulance_current_type:
                            bsl = []
                            for i in ambulance_current_type:
                                bsl.append(int(i.strip()))
                            ambulance_current_type = bsl
                        locality = Locality.objects.filter(delete=False)
                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        return render(request, 'data_management/ambulance_data/edit_ambulance_data.html',
                                      {'tab': 'basic', 'tab_listing': 'ambulance_listing', 'ambulance': ambulance,
                                       'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'valid_choice': valid_choice,'ambulance_current_services':ambulance_current_services,
                                       'ambulance_service_master': ambulance_service_master,'ambulance_type_master':ambulance_type_master,
                                       'ambulance_current_services':ambulance_current_services,'ambulance_current_type':ambulance_current_type,'locality':locality,
                                       'user_is_publisher': user_is_publisher,'city':city,'locality':locality})
                    else:
                        return HttpResponseRedirect('/ambulance/listing/')
                if request.method == "POST":
                    name = request.POST['ambulance_name'].strip()
                    address = request.POST['address'].strip()
                    #address_2 = request.POST['address2'].strip()
                    country = request.POST['country_id'].strip()
                    state = request.POST['state_id'].strip()
                    try :
                        city = request.POST['city_id'].strip()
                    except:
                        #print request.POST
                        city = request.POST['city_id'][0]
                    location = request.POST['locality_id'].strip()
                    pincode = request.POST['pincode'].strip()
                    contact_person = request.POST['contact-person'].strip()
                    telephone = request.POST['telephone'].strip()
                    #telephone_2 = request.POST['telephone2'].strip()
                    #telephone_3 = request.POST['telephone3'].strip()
                    mobile = request.POST['mobile'].strip()
                    type = request.POST.getlist('ambulance-type')
                    service = request.POST.getlist('services')
                    #area_covered = request.POST['area-covered'].strip()
                    remarks = request.POST['remarks'].strip()
                    rates = request.POST['rates'].strip()
                    cc=0
                    str1 = ''
                    if type:
                        for i in type:
                            cc += 1
                            if cc == 1:
                                str1 = i.strip() +str1
                            else:
                                str1 =  str1 + ',' + i.strip()
                        type =  str1
                    else:
                        type=''

                    cc = 0
                    str1 = ''
                    if service:
                        for i in service:
                            cc += 1
                            if cc == 1:
                                str1 = i.strip() + str1
                            else:
                                str1 = str1 + ',' + i.strip()
                        service = str1
                    else:
                        service=''

                    try:
                        is_emergency = request.POST['is_emergency'].strip()
                    except:
                        is_emergency = 0
                    if is_emergency == '1':
                        is_emergency= True
                    else:
                        is_emergency = False

                    ambulance_locality_coverage_from = request.POST['locality_idfrom'].strip()
                    ambulance_locality_coverage_to = request.POST['locality_idto'].strip()
                    ambulance_obj = Ambulance.objects.get(pk=ambulance_id)
                    if ambulance_obj:
                        ambulance_obj.name = name
                        ambulance_obj.address = address
                        #ambulance_obj.address_2 = address_2
                        ambulance_obj.country_id = country
                        ambulance_obj.state_id = state
                        ambulance_obj.city_id = city
                        ambulance_obj.locality_id = location
                        ambulance_obj.pincode = pincode
                        ambulance_obj.service_contact_person = contact_person
                        ambulance_obj.telephone = telephone
                        #ambulance_obj.telephone_2 = telephone_2
                        #ambulance_obj.telephone_3 = telephone_3
                        ambulance_obj.type = type
                        ambulance_obj.mobile = mobile
                        ambulance_obj.service = service
                        #ambulance_obj.area_covered = area_covered
                        ambulance_obj.remarks = remarks
                        ambulance_obj.is_emergency = is_emergency

                        if ambulance_locality_coverage_to != 'msg':
                            ambulance_obj.ambulance_locality_coverage_to_id = ambulance_locality_coverage_to
                        else:
                            ambulance_obj.ambulance_locality_coverage_to = None

                        if ambulance_locality_coverage_from != 'msg':
                            ambulance_obj.ambulance_locality_coverage_from_id = ambulance_locality_coverage_from
                        else:
                            ambulance_obj.ambulance_locality_coverage_from = None
                        ambulance_obj.rates =rates
                        ambulance_obj.save()
                        messages.success(request, 'Ambulance Data Successfully Updated')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)

                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-ambulance-listing'))
                    return HttpResponseRedirect('/ambulance/edit/' + ambulance_id + '/')
            else:
                messages.error(request, "Access Denied")
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-ambulance-listing'))
                return HttpResponseRedirect(reverse('ambulance-listing'))

        else:
            messages.error(request,"Ambulance Not Found")
            is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-ambulance-listing'))
            return HttpResponseRedirect(reverse('ambulance-listing'))

    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - mark_as_complete_caller_ambulance                         #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_ambulance(request):
    try:
        if request.method == 'POST':
            ambulance_id = request.POST['ambulance_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            ambulance_obj = Ambulance.objects.get(id=ambulance_id)

            if ambulance_obj and reviewer_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    ambulance_obj.current_user = User.objects.get(id=reviewer_data_id)
                    ambulance_obj.previous_user = request.user.id
                    ambulance_obj.stage = Stage.objects.get(pk=3)
                    ambulance_obj.free_text = ''
                    ambulance_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    ambulance_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('ambulance-listing'))
                except:
                    raise Http404
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('ambulance-listing'))
    except Exception as e:
        return HttpResponse("Something Bad Happened")

####################################################################
# Name - mark_as_reverse_caller_ambulance                          #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_ambulance(request):
    try:
        if request.method == 'POST':
            ambulance_id = request.POST['ambulance_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            ambulance_obj = Ambulance.objects.get(id=ambulance_id)

            if ambulance_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    ambulance_obj.current_user = User.objects.get(id=caller_data_id)
                    ambulance_obj.previous_user = request.user.id
                    ambulance_obj.stage = Stage.objects.get(pk=2)
                    ambulance_obj.free_text = free_text

                    ambulance_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-ambulance-listing'))
                    return HttpResponseRedirect(reverse('ambulance-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')

        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-ambulance-listing'))
        return HttpResponseRedirect(reverse('ambulance-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_reverse_reviewer_ambulance                         #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_ambulance(request):
    try:
        if request.method == 'POST':
            ambulance_id = request.POST['ambulance_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            ambulance_obj = Ambulance.objects.get(id=ambulance_id)

            if ambulance_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    ambulance_obj.current_user = User.objects.get(id=reviewer_data_id)
                    ambulance_obj.previous_user = request.user.id
                    ambulance_obj.stage = Stage.objects.get(pk=3)
                    ambulance_obj.free_text = free_text
                    ambulance_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-ambulance-listing'))
                    return HttpResponseRedirect(reverse('ambulance-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-ambulance-listing'))
        return HttpResponseRedirect(reverse('ambulance-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_complete_reviewer_ambulance                       #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_ambulance(request):
    try:
        if request.method == 'POST':
            ambulance_id = request.POST['ambulance_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            ambulance_obj = Ambulance.objects.get(id=ambulance_id)
            if ambulance_obj and publisher_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    ambulance_obj.current_user = User.objects.get(id=publisher_data_id)
                    ambulance_obj.previous_user = request.user.id
                    ambulance_obj.stage = Stage.objects.get(pk=4)
                    ambulance_obj.free_text = ''
                    ambulance_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    ambulance_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('ambulance-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('ambulance-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_complete_publisher_ambulance                       #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_ambulance(request):
    try:
        if request.method == 'POST':
            ambulance_id = request.POST['ambulance_id']
            ambulance_obj = Ambulance.objects.get(id=ambulance_id)

            if ambulance_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    ambulance_obj.stage = Stage.objects.get(pk=5)
                    ambulance_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    return HttpResponseRedirect(reverse('ambulance-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('ambulance-listing'))
    except Exception as e:
        raise Http404

"""PHARMACY FUNCTIONS START"""
####################################################################
# Name - Pharmacy_data_manage                                      #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def pharmacy_data_manage(request):
    try:
        return render(request, 'admin/pharmacy_management/pharmacy_management.html',
                      {'tab': 'data', 'crosal': 'pharmacymanage'})
    except Exception as e:
        raise Http404

####################################################################
# Name - Pharmacy_data_by_users                                    #
# Owner - Jaydeep Verma                                            #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def pharmacy_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            pharmacy_all_data = MedicalPharmacyStore.objects.filter(current_user_id=search_data).order_by('name')
            paginator = Paginator(pharmacy_all_data, 100)
            page = request.GET.get('page')
            try:
                pharmacy_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                pharmacy_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                pharmacy_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/pharmacy_management/pharmacy_by_user.html',
                      {'tab': 'data', 'crosal': 'pharmacybymanage', 'pharmacy_all_data': pharmacy_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data })

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            pharmacy_all_data = MedicalPharmacyStore.objects.filter(name__icontains=search_data_two).order_by('name')
            paginator = Paginator(pharmacy_all_data, 100)
            page = request.GET.get('page')
            try:
                pharmacy_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                pharmacy_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                pharmacy_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/pharmacy_management/pharmacy_by_user.html',
                          {'tab': 'data', 'crosal': 'pharmacybymanage', 'pharmacy_all_data': pharmacy_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})

        pharmacy_all_data = MedicalPharmacyStore.objects.all().order_by('name')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(pharmacy_all_data, 100)
        page = request.GET.get('page')
        try:
            pharmacy_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            pharmacy_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            pharmacy_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/pharmacy_management/pharmacy_by_user.html',
                      {'tab': 'data', 'crosal': 'pharmacybymanage', 'pharmacy_all_data': pharmacy_all_data,
                       'user_data_obj': user_data_obj})
    except:
        raise Http404

####################################################################
# Name - pharmacy_assignment                                       #
#  Owner - Jaydeep verma                                           #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def pharmacy_assignment(request):
    try:
        stage_filter = False
        user_filter = False
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all().order_by('name')
        city_list = City.objects.all().order_by('name')
        locality_list = Locality.objects.all().order_by('name')
        user_data = User.objects.all().order_by('username')
        locality_obj = None
        city_obj = None
        locality_data = None
        current_user_id = None
        user_id_data = None
        stage_id = None
        stage_id_data = None
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            pharmacy_obj =  MedicalPharmacyStore.objects.filter(name__icontains=search_data).order_by('name')
            paginator = Paginator(pharmacy_obj, 100)
            page = request.GET.get('page')
            try:
                pharmacy_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                pharmacy_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                pharmacy_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/pharmacy_management/pharmacy_assign.html',
                          {'tab': 'data', 'crosal': 'pharmacybymanage', 'stage_data': stage_data,
                           'pharmacy': pharmacy_obj, 'state_data_obj': state_data_obj,'search_data':search_data})
        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'pharmacy_filter':
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = None
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = None
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')

                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            pharmacy_obj = MedicalPharmacyStore.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            pharmacy_obj = MedicalPharmacyStore.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            pharmacy_obj = MedicalPharmacyStore.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          stage_id=stage_id_data).order_by('name')

                        paginator = Paginator(pharmacy_obj, 100)
                        page = request.GET.get('page')
                        try:
                            pharmacy_obj = paginator.page(page)
                        except PageNotAnInteger:
                            # If page is not an integer, deliver first page.
                            pharmacy_obj = paginator.page(1)
                        except EmptyPage:
                            # If page is out of range (e.g. 9999), deliver last page of results.
                            pharmacy_obj = paginator.page(paginator.num_pages)
                        return render(request, 'admin/pharmacy_management/pharmacy_assign.html',
                                      {'tab': 'data', 'crosal': 'pharmacybymanage', 'stage_data': stage_data,
                                       'pharmacy': pharmacy_obj, 'state_data_obj': state_data_obj,
                                       'city_obj': city_obj, 'locality_obj': locality_obj,
                                       'locality_filter': locality_filter, 'city_filter': city_filter,
                                       'state_filter': state_filter, 'filter_name': filter_name,
                                       'state_data': state_data,
                                       'city_data': city_data, 'locality_data': locality_data,
                                       'stage_filter': stage_filter, 'user_filter': user_filter,
                                       'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                       'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                       })

                    else:

                        pharmacy_obj = MedicalPharmacyStore.objects.filter(state_id=state_filter,
                                                                           city=city_filter,
                                                                           locality=locality_filter).order_by('name')
                        paginator = Paginator(pharmacy_obj, 100)
                        page = request.GET.get('page')
                        try:
                            pharmacy_obj = paginator.page(page)
                        except PageNotAnInteger:
                            # If page is not an integer, deliver first page.
                            pharmacy_obj = paginator.page(1)
                        except EmptyPage:
                            # If page is out of range (e.g. 9999), deliver last page of results.
                            pharmacy_obj = paginator.page(paginator.num_pages)
                        return render(request, 'admin/pharmacy_management/pharmacy_assign.html',
                                      {'tab': 'data', 'crosal': 'pharmacybymanage', 'stage_data': stage_data,
                                       'pharmacy': pharmacy_obj, 'state_data_obj': state_data_obj,
                                       'city_obj': city_obj, 'locality_obj': locality_obj,
                                       'locality_filter': locality_filter, 'city_filter': city_filter,
                                       'state_filter': state_filter, 'filter_name': filter_name,
                                       'state_data': state_data,
                                       'city_data': city_data, 'locality_data': locality_data,
                                       'stage_filter': stage_filter, 'user_filter': user_filter,
                                       'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                       'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                       })

                elif city_data:
                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            pharmacy_obj = MedicalPharmacyStore.objects.filter(state_id=state_filter,
                                                                     city_id=city_data,
                                                                     current_user_id=user_id_data,
                                                                     stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            pharmacy_obj = MedicalPharmacyStore.objects.filter(state_id=state_filter,
                                                                     city_id=city_data,
                                                                     current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            pharmacy_obj = MedicalPharmacyStore.objects.filter(state_id=state_filter,
                                                                     city_id=city_data,
                                                                     stage_id=stage_id_data).order_by('name')
                    else:
                        pharmacy_obj = MedicalPharmacyStore.objects.filter(state=state_data, city=city_data).order_by(
                        'name')
                    paginator = Paginator(pharmacy_obj, 100)
                    page = request.GET.get('page')
                    try:
                        pharmacy_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        pharmacy_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        pharmacy_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/pharmacy_management/pharmacy_assign.html',
                                  {'tab': 'data', 'crosal': 'pharmacybymanage', 'stage_data': stage_data,
                                   'pharmacy': pharmacy_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter, 'filter_name': filter_name,
                                   'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,
                                   'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                   'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                else:
                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            pharmacy_obj = MedicalPharmacyStore.objects.filter(state_id=state_filter,
                                                                     current_user_id=user_id_data,
                                                                     stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            pharmacy_obj = MedicalPharmacyStore.objects.filter(state_id=state_filter,
                                                                     current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            pharmacy_obj = MedicalPharmacyStore.objects.filter(state_id=state_filter,
                                                                     stage_id=stage_id_data).order_by('name')
                    else:
                        pharmacy_obj = MedicalPharmacyStore.objects.filter(state=state_data).order_by('name')

                    paginator = Paginator(pharmacy_obj, 100)
                    page = request.GET.get('page')
                    try:
                        pharmacy_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        pharmacy_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        pharmacy_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/pharmacy_management/pharmacy_assign.html',
                                  {'tab': 'data', 'crosal': 'pharmacybymanage', 'stage_data': stage_data,
                                   'pharmacy': pharmacy_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter, 'filter_name': filter_name,
                                   'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,
                                   'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                                   'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })

            elif not state_data and user_id_data or stage_id_data :
                if user_id_data or stage_id_data:
                    if user_id_data and stage_id_data:
                        pharmacy_obj = MedicalPharmacyStore.objects.filter(current_user_id=user_id_data,
                                                               stage_id=stage_id_data).order_by('name')
                    elif user_id_data:
                        pharmacy_obj = MedicalPharmacyStore.objects.filter(current_user_id=user_id_data).order_by('name')
                    elif stage_id_data:
                        pharmacy_obj = MedicalPharmacyStore.objects.filter(stage_id=stage_id_data).order_by('name')
                else:
                    pharmacy_obj = None
                paginator = Paginator(pharmacy_obj, 100)
                page = request.GET.get('page')
                try:
                    pharmacy_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    pharmacy_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    pharmacy_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/pharmacy_management/pharmacy_assign.html',
                              {'tab': 'data', 'crosal': 'pharmacybymanage', 'stage_data': stage_data,
                               'pharmacy': pharmacy_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter, 'filter_name': filter_name,
                               'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'stage_filter': stage_filter, 'user_filter': user_filter,
                               'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                               'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                               })
            else:
                pharmacy_obj = MedicalPharmacyStore.objects.all().order_by('name')
                paginator = Paginator(pharmacy_obj, 100)
                page = request.GET.get('page')
                try:
                    pharmacy_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    pharmacy_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    pharmacy_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/pharmacy_management/pharmacy_assign.html',
                              {'tab': 'data', 'crosal': 'pharmacybymanage', 'stage_data': stage_data,
                               'pharmacy': pharmacy_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter, 'filter_name': filter_name,
                               'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'stage_filter': stage_filter, 'user_filter': user_filter,
                               'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                               'locality_obj': locality_obj, 'current_user_id': user_id_data, 'stage_id': stage_id_data
                               })

        else:
            filter_name = None
            state_data = None
            city_data = None
            locality_data = None
            pharmacy_obj = MedicalPharmacyStore.objects.all().order_by('name')
            paginator = Paginator(pharmacy_obj, 100)
            page = request.GET.get('page')
            try:
                pharmacy_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                pharmacy_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                pharmacy_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/pharmacy_management/pharmacy_assign.html',
                          {'tab': 'data', 'crosal': 'pharmacybymanage', 'stage_data': stage_data,
                           'pharmacy': pharmacy_obj, 'state_data_obj': state_data_obj,
                           'city_obj': city_obj, 'locality_obj': locality_obj,
                           'locality_filter': locality_filter, 'city_filter': city_filter,
                           'state_filter': state_filter, 'filter_name': filter_name,
                           'state_data': state_data,
                           'city_data': city_data, 'locality_data': locality_data,
                           'stage_filter': stage_filter, 'user_filter': user_filter,
                           'stage_data': stage_data, 'user_data': user_data, 'city_filter': city_filter,
                           'locality_obj': locality_obj,'current_user_id':user_id_data,'stage_id':stage_id_data
                           })
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - assign Pharmacy                                           #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_pharmacy(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                nbslist = []
                nbflist = []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = MedicalPharmacyStore.objects.filter(id=checkedValues[i]).update(
                                current_user_id=assign_user,
                                stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue
                my_send_mail(request, 'pharmacy', nbslist, nbflist, 'Pharmacy Assignment', 'Assigned')
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/pharmacy/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - pharmacy_data_by_stages                                   #
# Owner - Jaydeep Verma                                            #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def pharmacy_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            pharmacy_all_data = MedicalPharmacyStore.objects.filter(stage_id=stage_id).order_by('name')
        else:
            pharmacy_all_data = MedicalPharmacyStore.objects.all().order_by('name')
            stage_id=None

        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(pharmacy_all_data, 100)
        page = request.GET.get('page')
        try:
            pharmacy_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            pharmacy_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            pharmacy_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/pharmacy_management/pharmacy_by_stages.html',
                      {'tab': 'data', 'crosal': 'pharmacybymanage', 'pharmacy_all_data': pharmacy_all_data,
                       'stage_data': stage_data,'stage_no':stage_id })
    except Exception as e:
        raise Http404

####################################################################
# Name -Pharmacy _listing                                          #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def pharmacy_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        state_data_obj = State.objects.all().order_by('name')
        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            pharmacy_obj = MedicalPharmacyStore.objects.filter(current_user_id=telecaller_id,is_disable=False ).order_by('name')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            pharmacy_obj = MedicalPharmacyStore.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
        else:
            reviewer_id = 0

        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            pharmacy_obj = MedicalPharmacyStore.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('name')
        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:
            # lab_obj = Labs.objects.filter(current_user_id=telecaller_id).order_by(
            #    'name')  # current_user_id=telecaller_id
            if len(pharmacy_obj) == 0:
                messages.error(request, "No Pharmacy found")

                return render(request, 'data_management/pharmacy_data/pharmacy_listing.html',
                              {'tab_listing': 'pharmacy_listing'})
            elif len(pharmacy_obj) > 0:
                paginator = Paginator(pharmacy_obj, 50)
                page = request.GET.get('page')
                try:
                    pharmacy_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    pharmacy_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    pharmacy_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/pharmacy_data/pharmacy_listing.html',
                              dict(pharmacy=pharmacy_obj, tab_listing='pharmacy_listing',
                                   state_data_obj=state_data_obj))
        elif reviewer_id:
            pharmacy_obj = MedicalPharmacyStore.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
            if len(pharmacy_obj) == 0:
                messages.error(request, "No Pharmacy found")
                return render(request, 'data_management/pharmacy_data/pharmacy_listing.html',
                              {'tab_listing': 'pharmacy_listing'})
            elif len(pharmacy_obj) > 0:
                paginator = Paginator(pharmacy_obj, 50)
                page = request.GET.get('page')
                try:
                    pharmacy_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    pharmacy_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    pharmacy_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/pharmacy_data/pharmacy_listing.html',
                              dict(pharmacy=pharmacy_obj, tab_listing='pharmacy_listing',
                                   state_data_obj=state_data_obj))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - add_pharmacy                                              #
# Owner - NIshank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_pharmacy(request):
    try:
        if request.method == "GET":
            country_obj = Country.objects.all()
            state_obj = State.objects.all()
            type_obj = MedicalPharmacyStoreType.objects.filter(delete=False)
            service_obj = MedicalPharmacyStoreServices.objects.filter(delete=False)
            return render(request, 'data_management/pharmacy_data/add_pharmacy.html',
                          {'pharmacy_add': 'add', 'tab_listing': 'pharmacy_listing', 'country_obj': country_obj,
                           'state_obj': state_obj, 'type_obj': type_obj, 'service_obj': service_obj})
        elif request.method == "POST":
            name = request.POST['pharmacy_name'].strip()
            address = request.POST['address'].strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip()
            location = request.POST['locality_id'].strip()
            pincode = request.POST['pincode'].strip()
            contact_person = request.POST['contact-person'].strip()
            telephone = request.POST['telephone'].strip()
            mobile = request.POST['mobile'].strip()
            try:
                is_emergency = request.POST['is_emergency'].strip()
            except:
                is_emergency = 0
            if is_emergency == '1':
                is_emergency= True
            else:
                is_emergency = False
            type = request.POST.getlist('type')
            tempstr = ''
            cc = 0
            if type:
                for i in type:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            type = tempstr
            service = request.POST.getlist('service')
            tempstr = ''
            cc = 0
            if service:
                for i in service:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            service = tempstr
            timings = request.POST['timings'].strip()
            free_text = ''
            usermanagement_objects_list = request.user.usermanagement_set.all()
            #for i in usermanagement_objects_list:
            #    if i.is_reviewer:
            #        stage = 2
            #    elif i.is_publisher:
            #        stage = 3
            #    else:
            #        stage = 1
            if name and state and country and city and location :
                pharmacy_obj = MedicalPharmacyStore(name=name, address=address, country_id=country, state_id=state,
                                                    city_id=city, locality_id=location,
                                                    pincode=pincode, contact_person=contact_person, telephone=telephone,
                                                    mobile=mobile,
                                                    type=type, services=service,
                                                    stage_id=2, current_user_id=request.user.id,
                                                    free_text=free_text,timings=timings,is_emergency=is_emergency)

                pharmacy_obj.save()
                messages.success(request, "New Pharmacy Successfully Added")
                return HttpResponseRedirect('/pharmacy/listing/')
            else:
                messages.error(request, "Pleaqse provide name and location details")
                return HttpResponseRedirect('/pharmacy/listing/')
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - Pharmacy_listing_edit                                     #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def pharmacy_listing_edit(request, pharmacy_id=None):
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_phar_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_phar_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    type_obj = MedicalPharmacyStoreType.objects.filter(delete=False)
    service_obj = MedicalPharmacyStoreServices.objects.filter(delete=False)
    try:
        if pharmacy_id is not None:
            pharmacy = MedicalPharmacyStore.objects.get(id=pharmacy_id)
            if(pharmacy.current_user_id == request.user.id)or request.user.is_superuser:

                if pharmacy_id is not None and request.method == "GET":
                    pharmacy = MedicalPharmacyStore.objects.get(id=pharmacy_id)
                    country_obj = Country.objects.all()
                    state_obj = State.objects.all()
                    if pharmacy:
                        if pharmacy.services :
                            pharmacy_services_list = pharmacy.services.split(',')
                        else:
                            pharmacy_services_list = None

                        if pharmacy.type :
                            pharmacy_type_list = pharmacy.type.split(',')
                        else:
                            pharmacy_type_list = None

                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        city = City.objects.filter(delete=False)
                        locality = Locality.objects.filter(delete=False)
                        return render(request, 'data_management/pharmacy_data/edit_pharmacy_data.html',
                                      {'tab': 'basic', 'tab_listing': 'pharmacy_listing', 'pharmacy': pharmacy,
                                       'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'valid_choice': valid_choice, 'type_obj': type_obj,
                                       'service_obj': service_obj,'pharmacy_services_list':pharmacy_services_list,
                                       'pharmacy_type_list':pharmacy_type_list,'user_is_publisher':user_is_publisher,
                                       'city':city,'locality':locality})
                    else:
                        return HttpResponseRedirect('/pharmacy/listing/')
                if request.method == "POST":
                    pharmacy_name = request.POST['name'].strip()
                    address = request.POST['address'].strip()
                    country = request.POST['country_id'].strip()
                    state = request.POST['state_id'].strip()
                    city = request.POST['city_id'].strip()
                    location = request.POST['locality_id'].strip()
                    pincode = request.POST['pincode'].strip()
                    contact_person = request.POST['contact-person'].strip()
                    telephone = request.POST['telephone'].strip()
                    mobile = request.POST['mobile'].strip()
                    try:
                        is_emergency = request.POST['is_emergency'].strip()
                    except:
                        is_emergency = 0
                    if is_emergency == '1':
                        is_emergency= True
                    else:
                        is_emergency = False
                    type = request.POST.getlist('type')
                    tempstr = ''
                    cc = 0
                    if type:
                        for i in type:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    type = tempstr

                    service = request.POST.getlist('service')

                    tempstr = ''
                    cc = 0
                    if service:
                        for i in service:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    service = tempstr
                    timings = request.POST['timings'].strip()
                    pharmacy_obj = MedicalPharmacyStore.objects.get(pk=pharmacy_id)
                    if pharmacy_obj:
                        pharmacy_obj.name = pharmacy_name
                        pharmacy_obj.address = address
                        pharmacy_obj.country_id = country
                        pharmacy_obj.state_id = state
                        pharmacy_obj.city_id = city
                        pharmacy_obj.locality_id = location
                        pharmacy_obj.pincode = pincode
                        pharmacy_obj.contact_person = contact_person
                        pharmacy_obj.telephone = telephone
                        pharmacy_obj.type = type
                        pharmacy_obj.mobile = mobile
                        pharmacy_obj.services = service
                        pharmacy_obj.timings=timings
                        pharmacy_obj.is_emergency=is_emergency
                        pharmacy_obj.save()
                        messages.success(request, 'Pharmacy Data Successfully Updated')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-pharmacy-listing'))
                    return HttpResponseRedirect('/pharmacy/edit/' + pharmacy_id + '/')
            else:
                messages.error(request, "Access Denied")
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-pharmacy-listing'))
                return HttpResponseRedirect(reverse('pharmacy-listing'))


        else:
            messages.error(request, "Pharmacy Not Found")
            is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-pharmacy-listing'))
            return HttpResponseRedirect(reverse('pharmacy-listing'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - mark_as_complete_caller_pharmacy                          #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_pharmacy(request):
    try:
        if request.method == 'POST':
            pharmacy_id = request.POST['pharmacy_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            pharmacy_obj = MedicalPharmacyStore.objects.get(id=pharmacy_id)

            if pharmacy_obj and reviewer_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    pharmacy_obj.current_user = User.objects.get(id=reviewer_data_id)

                    pharmacy_obj.previous_user = request.user.id
                    pharmacy_obj.stage = Stage.objects.get(pk=3)
                    pharmacy_obj.free_text = ''
                    pharmacy_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    pharmacy_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('pharmacy-listing'))
                except:
                    raise Http404

            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('pharmacy-listing'))
    except Exception as e:

        return HttpResponse("Something Bad Happened")


####################################################################
# Name - mark_as_reverse_caller_pharmacy                           #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_pharmacy(request):
    try:
        if request.method == 'POST':
            pharmacy_id = request.POST['pharmacy_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            pharmacy_obj = MedicalPharmacyStore.objects.get(id=pharmacy_id)

            if pharmacy_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    pharmacy_obj.current_user = User.objects.get(id=caller_data_id)
                    pharmacy_obj.previous_user = request.user.id
                    pharmacy_obj.stage = Stage.objects.get(pk=2)
                    pharmacy_obj.free_text = free_text

                    pharmacy_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-pharmacy-listing'))
                    return HttpResponseRedirect(reverse('pharmacy-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-pharmacy-listing'))
        return HttpResponseRedirect(reverse('pharmacy-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_reverse_reviewer_pharmacy                          #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_pharmacy(request):
    try:
        if request.method == 'POST':
            pharmacy_id = request.POST['pharmacy_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            pharmacy_obj = MedicalPharmacyStore.objects.get(id=pharmacy_id)

            if pharmacy_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    pharmacy_obj.current_user = User.objects.get(id=reviewer_data_id)
                    pharmacy_obj.previous_user = request.user.id
                    pharmacy_obj.stage = Stage.objects.get(pk=3)
                    pharmacy_obj.free_text = free_text
                    pharmacy_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')

                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-pharmacy-listing'))
                    return HttpResponseRedirect(reverse('pharmacy-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-pharmacy-listing'))
        return HttpResponseRedirect(reverse('pharmacy-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name - mark_as_complete_reviewer_pharmacy                        #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_pharmacy(request):
    try:
        if request.method == 'POST':
            pharmacy_id = request.POST['pharmacy_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            pharmacy_obj = MedicalPharmacyStore.objects.get(id=pharmacy_id)

            if pharmacy_obj and publisher_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    pharmacy_obj.current_user = User.objects.get(id=publisher_data_id)

                    pharmacy_obj.previous_user = request.user.id
                    pharmacy_obj.stage = Stage.objects.get(pk=4)
                    pharmacy_obj.free_text = ''
                    pharmacy_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    pharmacy_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('pharmacy-listing'))

                except:

                    pass
            else:

                messages.error(request, 'Select Reviewer and Validation Choice')

        else:

            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('pharmacy-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_complete_publisher_pharmacy                        #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_pharmacy(request):
    try:
        if request.method == 'POST':
            pharmacy_id = request.POST['pharmacy_id']
            pharmacy_obj = MedicalPharmacyStore.objects.get(id=pharmacy_id)

            if pharmacy_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    pharmacy_obj.stage = Stage.objects.get(pk=5)

                    pharmacy_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    return HttpResponseRedirect(reverse('pharmacy-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('pharmacy-listing'))
    except Exception as e:
        raise Http404


@login_required(login_url='/')
# Disabled by Nishank to enable the use of single view and single template to server both admin and non admion users
# @user_passes_test(lambda u: u.is_superuser)
@require_GET
def disease_symptom_drug_home(request):
    return render(request, 'admin/disease_symptom_drug/disease_symptom_drug_dashboard.html',
                  {'tab': 'disease_symptom_drug_data'})



@login_required(login_url='/')
# Disabled by Nishank to enable the use of single view and single template to server both admin and non admion users
# @user_passes_test(lambda u: u.is_superuser)
@require_GET
def care_residence_home(request):
    return render(request, 'admin/care_residence/care_residence_dashboard.html',
                  {'tab': 'care_residence','tab_listing': 'care_residence'})


####################################################################
# Name - doctor_care_listing                                       #
# By- Nishank                                                      #
####################################################################
@login_required(login_url='/')
@csrf_exempt
#@require_GET
def doctor_care_listing(request):
    try:
        search_data = None
        try:
            search_data = request.POST['search_data']
        except:
            search_data = None

        if search_data:
            results = Doctor.objects.filter(is_disable=False, provides_home_care=True, name__icontains=search_data).order_by('name')
        else:
            doctor_obj = Doctor.objects.filter(is_disable=False,provides_home_care=True).order_by('name')
        if len(doctor_obj) == 0:
            doctor_obj = []
            messages.error(request, "No Doctor found in care at home")

        paginator = Paginator(doctor_obj, 50)
        page = request.GET.get('page')
        try:
            doctor_obj = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            doctor_obj = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            doctor_obj = paginator.page(paginator.num_pages)
        return render(request, 'data_management/doctor_data/doctor_care_listing.html',
                      dict(doctor=doctor_obj, tab ='care_residence',tab_listing = 'care_residence',
                           search_data=search_data))
    except Exception as e:
        #print e
        raise Http404


"""Disease Functions Start"""

####################################################################
# Name - disease_data_by_users                                     #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def disease_data_manage(request):
    try:
        return render(request, 'admin/disease_management/disease_management.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'diseasemanage'})
    except Exception as e:
        raise Http404


####################################################################
# Name - disease_data_by_users                                     #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def disease_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            disease_all_data = Disease.objects.filter(current_user_id=search_data).order_by('topic_title')
            paginator = Paginator(disease_all_data, 100)
            page = request.GET.get('page')
            try:
                disease_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                disease_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                disease_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/disease_management/disease_by_user.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'diseasebymanage',
                       'disease_all_data': disease_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            disease_all_data = Disease.objects.filter(topic_title__icontains=search_data_two).order_by('topic_title')
            paginator = Paginator(disease_all_data, 100)
            page = request.GET.get('page')
            try:
                disease_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                disease_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                disease_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/disease_management/disease_by_user.html',
                          {'tab': 'disease_symptom_drug_data', 'crosal': 'diseasebymanage',
                           'disease_all_data': disease_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})

        disease_all_data = Disease.objects.all().order_by('topic_title')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(disease_all_data, 100)
        page = request.GET.get('page')
        try:
            disease_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            disease_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            disease_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/disease_management/disease_by_user.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'diseasebymanage',
                       'disease_all_data': disease_all_data,
                       'user_data_obj': user_data_obj})
    except Exception as e:
        #print e
        raise Http404


####################################################################
# Name - disease_data_by_stages                                    #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def disease_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            disease_all_data = Disease.objects.filter(stage_id=stage_id).order_by('topic_title')
        else:
            disease_all_data = Disease.objects.all().order_by('topic_title')
            stage_id=None

        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(disease_all_data, 100)
        page = request.GET.get('page')
        try:
            disease_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            disease_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            disease_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/disease_management/disease_by_stages.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'diseasebymanage',
                       'disease_all_data': disease_all_data,
                       'stage_data': stage_data,'stage_no':stage_id})
    except Exception as e:

        raise Http404


####################################################################
# Name - Disease Assignment                                        #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def disease_assignment(request):
    try:
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all()

        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            disease_obj =  Disease.objects.filter(topic_title__icontains=search_data).order_by('topic_title')
            paginator = Paginator(disease_obj, 100)
            page = request.GET.get('page')
            try:
                disease_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                disease_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                disease_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/disease_management/disease_assign.html',
                          {'tab': 'disease_symptom_drug_data', 'crosal': 'diseasebymanage', 'stage_data': stage_data,
                           'disease_all_data': disease_obj, 'state_data_obj': state_data_obj,'search_data':search_data})


        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'disease_filter':
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter)
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    disease_obj = Disease.objects.filter(state=state_data_obj,
                                                         city=city_data,
                                                         locality=locality_data).order_by('topic_title')
                    locality_obj = Locality.objects.filter(city_id=city_filter)
                    paginator = Paginator(disease_obj, 100)
                    page = request.GET.get('page')
                    try:
                        disease_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        disease_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        disease_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/disease_management/disease_assign.html',
                                  {'tab': 'disease_symptom_drug_data', 'crosal': 'diseasebymanage',
                                   'stage_data': stage_data,
                                   'disease_all_data': disease_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter})
                elif city_data:
                    disease_obj = Disease.objects.filter(state=state_data, city=city_data).order_by(
                        'topic_title')
                else:
                    disease_obj = Disease.objects.filter(state=state_data).order_by('topic_title')
                paginator = Paginator(disease_obj, 100)
                page = request.GET.get('page')
                try:
                    disease_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    disease_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    disease_obj = paginator.page(paginator.num_pages)

                return render(request, 'admin/disease_management/disease_assign.html',
                              {'tab': 'disease_symptom_drug_data', 'crosal': 'diseasebymanage',
                               'stage_data': stage_data,
                               'disease_all_data': disease_obj, 'state_data_obj': state_data_obj,
                               'state_filter': state_filter, 'locality_filter': locality_filter,
                               'city_filter': city_filter, 'city_obj': city_obj})

            else:
                disease_obj = Disease.objects.all().order_by('topic_title')
            paginator = Paginator(disease_obj, 100)
            page = request.GET.get('page')
            try:
                disease_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                disease_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                disease_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/disease_management/disease_assign.html',
                          {'tab': 'disease_symptom_drug_data', 'crosal': 'diseasebymanage', 'stage_data': stage_data,
                           'disease_all_data': disease_obj, 'state_data_obj': state_data_obj
                           })
        else:
            disease_obj = Disease.objects.all().order_by('topic_title')
            paginator = Paginator(disease_obj, 100)
            page = request.GET.get('page')
            try:
                disease_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                disease_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                disease_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/disease_management/disease_assign.html',
                          {'tab': 'disease_symptom_drug_data', 'crosal': 'diseasebymanage', 'stage_data': stage_data,
                           'disease_all_data': disease_obj, 'state_data_obj': state_data_obj})
    except Exception as e:

        raise Http404


####################################################################
# Name - assign disease                                            #
# Owner - Nishank                                                  #
# Review by -                                                      #
#                                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_disease(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                for i in range(0, len(checkedValues)):
                    assign_obj = Disease.objects.filter(id=checkedValues[i]).update(
                        current_user_id=assign_user,
                        stage_id=change_stage)
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/disease/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:

        raise Http404


####################################################################
# Name - disease_listing_edit                                      #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def disease_listing_edit(request, disease_id=None):
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_disease_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_disease_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    disease_articles = Disease.objects.filter(~Q(id=disease_id)).filter(is_disable=False).order_by('topic_title')
    #disease_type = Disease_type_master.objects.filter(delete=False)
    try:

        if disease_id is not None and request.method == "GET":
            disease_obj = Disease.objects.get(pk=disease_id)
            if disease_obj:

                category_obj = Category.objects.filter(delete=False).order_by('name')
                current_cats = disease_obj.doctors_category
                if current_cats and current_cats != '' or current_cats != ' ':
                    current_cats = current_cats.strip()
                    current_cats = current_cats.split(',')
                else:
                    current_cats =[]
                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True

                # list_empty =[]
                # if disease_obj.type and disease_obj.type != '' and disease_obj.type != []:
                #     type = disease_obj.type.split(',')
                #     current_type_list = type
                # else:
                #     current_type_list  = list_empty
                #
                list_empty = []
                if disease_obj.related_topics and disease_obj.related_topics != '' and disease_obj.related_topics != []:
                    links = disease_obj.related_topics.split(",")
                    current_article_list = links
                else:
                    current_article_list = list_empty
                if disease_obj.publish_date :
                    pub_date = disease_obj.publish_date.strftime('%d-%m-%Y')
                else:
                    pub_date = '01-01-2000'
                return render(request, 'data_management/disease_data/edit_disease_data.html',
                              {'tab': 'disease_symptom_drug_data', 'tab_listing': 'disease_listing',
                               'disease': disease_obj,
                               'publisher_user_data': publisher_user_data, 'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data, 'valid_choice': valid_choice,'user_is_publisher':user_is_publisher,
                               'disease_articles':disease_articles,'current_article_list':current_article_list,
                               'pub_date':pub_date,'current_cats':current_cats,'category_obj':category_obj})
            else:
                return HttpResponseRedirect('/disease/listing/')

        if request.method == "POST":

            try:
                small_description = request.POST['small_description'].strip()
            except:
                small_description = ''

            try:
                publish_date = request.POST['publish_date'].strip()
            except Exception as e:
                #print e
                publish_date = None
            if publish_date:
                import datetime
                #publish_date = datetime.strptime('02/11/2010', '%d/%m/%Y').strftime('%d-%m-%Y')

                day, month, year = publish_date.split('-')
                publish_date = datetime.date(int(year),int(month),int(day) )
            else:
                import datetime
                publish_date = datetime.date(int(2000), int(01), int(01))


            related_topics = request.POST.getlist('related_topics')
            tag_string = request.POST['tag_string'].strip()
            disease_html_refined = request.POST['disease_html_refined'].strip()
            topic_title = request.POST['topic_title'].strip()
            #doctors_category = request.POST['doctors_category'].strip()
            doctors_category = request.POST.getlist('category')
            page_title = request.POST['page_title']
            page_keywords = request.POST['page_keywords']
            page_description = request.POST['page_description']

            tmpstr1 = ''
            counter = 0
            if doctors_category and doctors_category != []:
                counter += 1
                for i in doctors_category:
                    if counter == 1:
                        tmpstr1 = tmpstr1 + i
                        counter += 1
                    else:
                        tmpstr1 = tmpstr1 + ',' + i
                        counter += 1
                doctors_category = tmpstr1
            else:
                doctors_category = ''

            tmpstr1 = ''
            counter = 0
            if related_topics and related_topics != []:
                counter += 1
                for i in related_topics:
                    if counter == 1:
                        tmpstr1 = tmpstr1 + i
                        counter += 1
                    else:
                        tmpstr1 = tmpstr1 + ',' + i
                        counter += 1
                related_topics = tmpstr1
            else:
                related_topics = ''

            disease_obj = Disease.objects.get(pk=disease_id)

            if disease_obj:

                #disease_obj.link_article_with = link_article_with
                #disease_obj.types = type
                disease_obj.topic_title = topic_title
                disease_obj.doctors_category = doctors_category
                disease_obj.tag_string = tag_string
                disease_obj.related_topics = related_topics
                disease_obj.disease_html_refined = disease_html_refined
                disease_obj.publish_date = publish_date
                disease_obj.small_description = small_description
                disease_obj.page_title = page_title
                disease_obj.page_keywords = page_keywords
                disease_obj.page_description = page_description

                disease_obj.save()
                messages.success(request, 'Disease Data Successfully Updated')

            is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)

            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-disease-listing'))

            return HttpResponseRedirect('/disease/edit/' + disease_id + '/')
    except Exception as e:
        #print e
        raise Http404


####################################################################
# Name - disease_listing                                           #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@csrf_exempt
@require_GET
def disease_listing(request):
    try:

        assign_id = UserManagement.objects.get(user_id=request.user.id)

        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            disease_obj = Disease.objects.filter(current_user_id=telecaller_id,is_disable=False ).order_by('topic_title')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            disease_obj = Disease.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('topic_title')
        else:
            reviewer_id = 0

        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            disease_obj = Disease.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('topic_title')
        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:

            if len(disease_obj) == 0:
                messages.error(request, "No disease found")

                return render(request, 'data_management/disease_data/disease_listing.html',
                              {'tab': 'disease_listing'})
            elif len(disease_obj) > 0:
                paginator = Paginator(disease_obj, 50)
                page = request.GET.get('page')
                try:
                    disease_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    disease_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    disease_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/disease_data/disease_listing.html',
                              dict(disease=disease_obj, tab='disease_symptom_drug_data', ))
        elif reviewer_id:
            disease_obj = Disease.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('topic_title')
            if len(disease_obj) == 0:
                messages.error(request, "No disease found")
                return render(request, 'data_management/disease_data/disease_listing.html',
                              {'tab': 'disease_symptom_drug_data'})
            elif len(disease_obj) > 0:
                paginator = Paginator(disease_obj, 50)
                page = request.GET.get('page')
                try:
                    disease_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    disease_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    disease_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/disease_data/disease_listing.html',
                              dict(disease=disease_obj, tab='disease_symptom_drug_data'))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        messages.error(request,e)
        #print e
        return HttpResponse(e)
        raise Http404



####################################################################
# Name - add_disease                                               #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_disease(request):
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_disease_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_disease_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    disease_articles = Disease.objects.filter(is_disable=False).order_by('topic_title')
    #disease_type = Disease_type_master.objects.filter(delete=False)
    try:
        if request.method == "GET":
            category_obj = Category.objects.filter(delete=False).order_by('name')
            return render(request, 'data_management/disease_data/add_disease.html',
                          {'tab': 'disease_symptom_drug_data', 'tab_listing': 'disease_listing',
                           'caller_user_data':caller_user_data,
                           'reviewer_user_data':reviewer_user_data,
                           'publisher_user_data':publisher_user_data,
                           'disease_articles':disease_articles,
                           'category_obj':category_obj
                           })

        elif request.method == "POST":

            global image_iterator
            image_iterator = 0
            related_topics = request.POST.getlist('related_topics')
            tag_string = request.POST['tag_string'].strip()
            topic_title = request.POST['topic_title'].strip()
            #doctors_category = request.POST['doctors_category'].strip()
            doctors_category = request.POST.getlist('category')
            page_title = request.POST['page_title']
            page_keywords = request.POST['page_keywords']
            page_description = request.POST['page_description']

            tmpstr1 = ''
            counter = 0
            if doctors_category and doctors_category != []:
                counter += 1
                for i in doctors_category:
                    if counter == 1:
                        tmpstr1 = tmpstr1 + i
                        counter += 1
                    else:
                        tmpstr1 = tmpstr1 + ',' + i
                        counter += 1
                doctors_category = tmpstr1
            else:
                doctors_category = ''

            try:
                small_description = request.POST['small_description'].strip()
            except:
                small_description = ''
            try:
                publish_date = request.POST['publish_date'].strip()
            except Exception as e:
                #print e
                publish_date = None
            if publish_date:
                import datetime
                #publish_date = datetime.strptime('02/11/2010', '%d/%m/%Y').strftime('%d-%m-%Y')

                month, day, year = publish_date.split('/')
                publish_date = datetime.date(int(year),int(month),int(day) )
            else:
                import datetime
                publish_date = datetime.date(int(2000), int(01), int(01))



            tmpstr1 = ''
            counter = 0
            if related_topics  and related_topics != [] :
                counter += 1
                for i in related_topics:
                    if counter == 1:
                        tmpstr1 = tmpstr1 + i
                        counter += 1
                    else:
                        tmpstr1 = tmpstr1 + ',' + i
                        counter += 1
                related_topics = tmpstr1
            else:
                related_topics = ''

            if len(request.FILES) == 1:
                file_name = request.FILES['myfile'].name
                tstr = ''
                for i in file_name:
                    if i == ' ' or i == '-' or i == '(' or i == ')':
                        #print 'space'
                        tstr = tstr + '_'
                    else:
                        #print i
                        tstr = tstr + i
                file_name = tstr.lower()
                global image_file_name
                global image_alt_g
                image_file_name = file_name
                file_type = file_name[-5:-1] + file_name[-1]
                if file_type.lower() == '.docx':
                    def convert_image(image):
                        with image.open() as image_bytes:
                            encoded_src = base64.b64encode(image_bytes.read()).decode("ascii")
                        imgData = encoded_src
                        global image_iterator
                        global image_file_name
                        image_iterator = image_iterator + 1
                        image = image_file_name[:-5] + "_" + str(image_iterator) + ".png"
                        global image_src
                        #image_src = "/media/articles/docx/disease/" + image  ~~~~New code Below 1 line
                        image_src = "https://image2.healthforu.com/media/articles/docx/disease/" + image
                        found = "---"
                        filepath = settings.DOCX_PATH_DISEASE + '/' + image
                        while True:
                            found = "yes"
                            if os.path.isfile(filepath) == True:
                                image_iterator = image_iterator + 1
                                image = image_file_name[:-5] + "_" + str(image_iterator) + ".png"
                                filepath = settings.DOCX_PATH_DISEASE + '/' + image

                            else:
                                found = "no"
                                break
                            #image_src = "/media/articles/docx/disease/" + image ~~~~New code Below 1 line
                            image_src = "https://image2.healthforu.com/media/articles/docx/disease/" + image
                        global disease_image_file_name
                        disease_image_file_name = image
                        fh = open(filepath, "wb")
                        fh.write(imgData.decode('base64'))
                        fh.close()

                        """Uploading via ftplib """ # ~~~~New code Below Uploading block
                        import ftplib
                        from ftplib import FTP
                        try:
                            ftp = FTP("45.114.117.14")
                            ftp.login('www-data', 'qwwe34456ttggnhh666')
                            file = open(filepath, "rb")
                            ftp.cwd('/html/media/articles/docx/disease/')
                            ftp.storbinary('STOR ' + disease_image_file_name, file)
                            ftp.sendcmd('SITE CHMOD 664 ' + disease_image_file_name)
                            #print "STORing File now..."
                            ftp.quit()
                            file.close()
                            #print "File transfered"
                        except Exception as e:
                            print e
                            #print e

                        """Uploading end"""

                        return {
                            # "src": "data:{0};base64,{1}".format(image.content_type, encoded_src)
                            "src": image_src,
                            "alt_text": image_alt_g
                        }

                    for f in request.FILES.getlist('myfile'):
                        # result = mammoth.convert_to_html(f)
                        result = mammoth.convert_to_html(f, convert_image=mammoth.images.img_element(convert_image))
                        global image_alt_g
                        global disease_image_file_name
                        # tstr = ''
                        # for i in disease_image_file_name:
                        #     if i == ' ':
                        #         #print 'space'
                        #         tstr = tstr + '-'
                        #     else:
                        #         #print i
                        #         tstr = tstr + i
                        # disease_image_file_name = tstr
                        image_alt_g = ''
                        html = result.value  # The generated HTML


                        new_disease = Disease(disease_docx_file=f, disease_html_raw=html,
                                                 disease_html_refined=html,tag_string=tag_string,
                                              current_user_id=request.user.id,stage_id=2,topic_title=topic_title,
                                              doctors_category=doctors_category,disease_image_file_name=disease_image_file_name,
                                              related_topics=related_topics,small_description=small_description,
                                              publish_date=publish_date,page_title=page_title,page_keywords=page_keywords,
                                              page_description=page_description)
                        new_disease.save()
                        disease_image_file_name = ''
                    image_file_name = ''
                    image_iterator = 0
                    messages.success(request, "Disease Article Successfully Saved")
                    return redirect(reverse('disease-listing-edit', args=[new_disease.id]))
                else:
                    messages.error(request, "Uploaded file is not a docx file")
                    return render(request, 'data_management/disease_data/add_disease.html',
                                  {'tab': 'disease_symptom_drug_data', 'tab_listing': 'disease_listing'
                                   })
            else:
                messages.error("No file uploaded")
                return render(request, 'data_management/disease_data/add_disease.html',
                              {'tab': 'disease_symptom_drug_data', 'tab_listing': 'disease_listing'
                               })

    except Exception as e:
        #print e
        raise Http404


####################################################################
# Name - mark_as_complete_caller_disease                           #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_disease(request):
    try:
        if request.method == 'POST':
            disease_id = request.POST['disease_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            disease_obj = Disease.objects.get(id=disease_id)

            if disease_obj and reviewer_data_id and valid_choice_id:

                try:
                    disease_obj.current_user = User.objects.get(id=reviewer_data_id)

                    disease_obj.previous_user = request.user.id
                    disease_obj.stage = Stage.objects.get(pk=3)
                    disease_obj.free_text = ''
                    disease_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    disease_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('disease-listing'))
                except:
                    raise Http404

            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('disease-listing'))
    except Exception as e:

        return HttpResponse("Something Bad Happened")


####################################################################
# Name - mark_as_reverse_caller_disease                            #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_disease(request):
    try:

        if request.method == 'POST':
            disease_id = request.POST['disease_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            disease_obj = Disease.objects.get(id=disease_id)

            if disease_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    disease_obj.current_user = User.objects.get(id=caller_data_id)
                    disease_obj.previous_user = request.user.id
                    disease_obj.stage = Stage.objects.get(pk=2)
                    disease_obj.free_text = free_text

                    disease_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')

                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if(len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-disease-listing'))

                    return HttpResponseRedirect(reverse('disease-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-disease-listing'))
        return HttpResponseRedirect(reverse('disease-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_reverse_reviewer_disease                           #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_disease(request):
    try:
        if request.method == 'POST':
            disease_id = request.POST['disease_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            disease_obj = Disease.objects.get(id=disease_id)

            if disease_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    disease_obj.current_user = User.objects.get(id=reviewer_data_id)
                    disease_obj.previous_user = request.user.id
                    disease_obj.stage = Stage.objects.get(pk=3)
                    disease_obj.free_text = free_text
                    disease_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-disease-listing'))
                    return HttpResponseRedirect(reverse('disease-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-disease-listing'))
        return HttpResponseRedirect(reverse('disease-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name - mark_as_complete_reviewer_disease                        #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_disease(request):
    try:
        if request.method == 'POST':
            disease_id = request.POST['disease_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            disease_obj = Disease.objects.get(id=disease_id)

            if disease_obj and publisher_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    disease_obj.current_user = User.objects.get(id=publisher_data_id)

                    disease_obj.previous_user = request.user.id
                    disease_obj.stage = Stage.objects.get(pk=4)
                    disease_obj.free_text = ''
                    disease_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    disease_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('disease-listing'))

                except:

                    pass
            else:

                messages.error(request, 'Select Reviewer and Validation Choice')

        else:

            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('disease-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_complete_publisher_disease                        #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_disease(request):
    try:
        if request.method == 'POST':
            disease_id = request.POST['disease_id']
            disease_obj = Disease.objects.get(id=disease_id)

            if disease_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    disease_obj.stage = Stage.objects.get(pk=5)

                    disease_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-disease-listing'))
                    return HttpResponseRedirect(reverse('disease-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-disease-listing'))
        return HttpResponseRedirect(reverse('disease-listing'))
    except Exception as e:
        raise Http404


"""symptoms Functions Start"""

####################################################################
# Name - symptoms_data_m                                          #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def symptoms_data_manage(request):
    try:
        return render(request, 'admin/symptoms_management/symptoms_management.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'symptomsmanage'})
    except Exception as e:
        raise Http404


####################################################################
# Name - symptoms_data_by_users                                    #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def symptoms_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            symptoms_all_data = Symptoms.objects.filter(current_user_id=search_data).order_by('topic_title')
            paginator = Paginator(symptoms_all_data, 100)
            page = request.GET.get('page')
            try:
                symptoms_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                symptoms_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                symptoms_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/symptoms_management/symptoms_by_user.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'symptomsbymanage',
                       'symptoms_all_data': symptoms_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            symptoms_all_data =Symptoms.objects.filter(topic_title__icontains=search_data_two).order_by('topic_title')
            paginator = Paginator(symptoms_all_data, 100)
            page = request.GET.get('page')
            try:
                symptoms_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                symptoms_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                symptoms_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/symptoms_management/symptoms_by_user.html',
                          {'tab': 'disease_symptom_drug_data', 'crosal': 'symptomsbymanage',
                           'symptoms_all_data': symptoms_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})


        symptoms_all_data = Symptoms.objects.all().order_by('topic_title')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(symptoms_all_data, 100)
        page = request.GET.get('page')
        try:
            symptoms_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            symptoms_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            symptoms_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/symptoms_management/symptoms_by_user.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'symptomsbymanage',
                       'symptoms_all_data': symptoms_all_data,
                       'user_data_obj': user_data_obj})
    except Exception as e:

        raise Http404


####################################################################
# Name - symptoms_data_by_stages                                   #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def symptoms_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            symptoms_all_data = Symptoms.objects.filter(stage_id=stage_id).order_by('topic_title')
        else:
            symptoms_all_data = Symptoms.objects.all().order_by('topic_title')
            stage_id=None

        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(symptoms_all_data, 100)
        page = request.GET.get('page')
        try:
            symptoms_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            symptoms_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            symptoms_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/symptoms_management/symptoms_by_stages.html',
                      {'tab': 'symptoms_symptom_drug_data', 'crosal': 'symptomsbymanage',
                       'symptoms_all_data': symptoms_all_data,
                       'stage_data': stage_data,'stage_no':stage_id})
    except Exception as e:

        raise Http404



####################################################################
# Name - symptoms Assignment                                       #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def symptoms_assignment(request):
    try:
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all()

        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            symptoms_obj =  Symptoms.objects.filter(topic_title__icontains=search_data).order_by('topic_title')
            paginator = Paginator(symptoms_obj,100)
            page = request.GET.get('page')
            try:
                symptoms_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                symptoms_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                symptoms_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/symptoms_management/symptoms_assign.html',
                          {'tab': 'symptoms_symptom_drug_data', 'crosal': 'symptomsbymanage', 'stage_data': stage_data,
                           'symptoms_all_data': symptoms_obj, 'state_data_obj': state_data_obj,'search_data':search_data})


        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'symptoms_filter':
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter)
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    symptoms_obj = Symptoms.objects.filter(state=state_data_obj,
                                                         city=city_data,
                                                         locality=locality_data).order_by('topic_title')
                    locality_obj = Locality.objects.filter(city_id=city_filter)
                    paginator = Paginator(symptoms_obj, 100)
                    page = request.GET.get('page')
                    try:
                        symptoms_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        symptoms_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        symptoms_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/symptoms_management/symptoms_assign.html',
                                  {'tab': 'symptoms_symptom_drug_data', 'crosal': 'symptomsbymanage',
                                   'stage_data': stage_data,
                                   'symptoms_all_data': symptoms_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter})
                elif city_data:
                    symptoms_obj = Symptoms.objects.filter(state=state_data, city=city_data).order_by('topic_title')
                else:
                    symptoms_obj = Symptoms.objects.filter(state=state_data).order_by('topic_title')
                paginator = Paginator(symptoms_obj, 100)
                page = request.GET.get('page')
                try:
                    symptoms_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    symptoms_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    symptoms_obj = paginator.page(paginator.num_pages)

                return render(request, 'admin/symptoms_management/symptoms_assign.html',
                              {'tab': 'symptoms_symptom_drug_data', 'crosal': 'symptomsbymanage',
                               'stage_data': stage_data,
                               'symptoms_all_data': symptoms_obj, 'state_data_obj': state_data_obj,
                               'state_filter': state_filter, 'locality_filter': locality_filter,
                               'city_filter': city_filter, 'city_obj': city_obj})

            else:
                symptoms_obj = Symptoms.objects.all().order_by('topic_title')
            paginator = Paginator(symptoms_obj,100)
            page = request.GET.get('page')
            try:
                symptoms_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                symptoms_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                symptoms_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/symptoms_management/symptoms_assign.html',
                          {'tab': 'symptoms_symptom_drug_data', 'crosal': 'symptomsbymanage', 'stage_data': stage_data,
                           'symptoms_all_data': symptoms_obj, 'state_data_obj': state_data_obj
                           })
        else:
            symptoms_obj = Symptoms.objects.all().order_by('topic_title')
            paginator = Paginator(symptoms_obj,100)
            page = request.GET.get('page')
            try:
                symptoms_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                symptoms_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                symptoms_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/symptoms_management/symptoms_assign.html',
                          {'tab': 'symptoms_symptom_drug_data', 'crosal': 'symptomsbymanage', 'stage_data': stage_data,
                           'symptoms_all_data': symptoms_obj, 'state_data_obj': state_data_obj})
    except Exception as e:

        raise Http404

####################################################################
# Name - assign symptoms                                           #
# Owner - Nishank                                                  #
# Review by -                                                      #
#                                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_symptoms(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                for i in range(0, len(checkedValues)):
                    assign_obj = Symptoms.objects.filter(id=checkedValues[i]).update(
                        current_user_id=assign_user,
                        stage_id=change_stage)
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/symptoms/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:

        raise Http404

####################################################################
# Name - symptoms_listing                                           #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@csrf_exempt
@require_GET
def symptoms_listing(request):
    try:

        assign_id = UserManagement.objects.get(user_id=request.user.id)

        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            symptoms_obj = Symptoms.objects.filter(current_user_id=telecaller_id,is_disable=False ).order_by('topic_title')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            symptoms_obj = Symptoms.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('topic_title')
        else:
            reviewer_id = 0

        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            symptoms_obj = Symptoms.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('topic_title')
        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:

            if len(symptoms_obj) == 0:
                messages.error(request, "No symptoms found")

                return render(request, 'data_management/symptoms_data/symptoms_listing.html',
                              {'tab': 'disease_listing'})
            elif len(symptoms_obj) > 0:
                paginator = Paginator(symptoms_obj, 50)
                page = request.GET.get('page')
                try:
                    symptoms_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    symptoms_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    symptoms_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/symptoms_data/symptoms_listing.html',
                              dict(symptoms=symptoms_obj, tab='symptoms_symptom_drug_data', ))
        elif reviewer_id:
            symptoms_obj = Symptoms.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('topic_title')
            if len(symptoms_obj) == 0:
                messages.error(request, "No symptoms found")
                return render(request, 'data_management/symptoms_data/symptoms_listing.html',
                              {'tab': 'symptoms_symptom_drug_data'})
            elif len(symptoms_obj) > 0:
                paginator = Paginator(symptoms_obj, 50)
                page = request.GET.get('page')
                try:
                    symptoms_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    symptoms_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    symptoms_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/symptoms_data/symptoms_listing.html',
                              dict(symptoms=symptoms_obj, tab='symptoms_symptom_drug_data'))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        #print e
        return HttpResponse(e)
        raise Http404


####################################################################
# Name - add_symptoms                                              #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_symptoms(request):
    category_obj = Category.objects.filter(delete=False).order_by('name')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_disease_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_disease_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    symptoms_articles = Symptoms.objects.filter(is_disable=False).order_by('topic_title')
    #symptoms_type = Symptoms_type_master.objects.filter(delete=False)
    try:
        if request.method == "GET":

            return render(request, 'data_management/symptoms_data/add_symptoms.html',
                          {'tab': 'disease_symptom_drug_data', 'tab_listing': 'disease_listing',
                           'caller_user_data':caller_user_data,
                           'reviewer_user_data':reviewer_user_data,
                           'publisher_user_data':publisher_user_data,
                           'symptoms_articles':symptoms_articles,
                           'category_obj':category_obj
                           })

        elif request.method == "POST":

            try:
                small_description = request.POST['small_description'].strip()
            except:
                small_description = ''
            try:
                publish_date = request.POST['publish_date'].strip()
            except Exception as e:
                #print e
                publish_date = None
            if publish_date:
                import datetime
                #publish_date = datetime.strptime('02/11/2010', '%d/%m/%Y').strftime('%d-%m-%Y')

                month, day, year = publish_date.split('/')
                publish_date = datetime.date(int(year),int(month),int(day) )
            else:
                import datetime
                publish_date = datetime.date(int(2000), int(01), int(01))

            global image_iterator
            image_iterator = 0
            related_topics = request.POST.getlist('related_topics')
            tag_string = request.POST['tag_string'].strip()
            topic_title = request.POST['topic_title'].strip()
            #doctors_category = request.POST['doctors_category'].strip()
            doctors_category = request.POST.getlist('category')

            page_title = request.POST['page_title']
            page_keywords = request.POST['page_keywords']
            page_description = request.POST['page_description']

            tmpstr1 = ''
            counter = 0
            if doctors_category and doctors_category != []:
                counter += 1
                for i in doctors_category:
                    if counter == 1:
                        tmpstr1 = tmpstr1 + i
                        counter += 1
                    else:
                        tmpstr1 = tmpstr1 + ',' + i
                        counter += 1
                doctors_category = tmpstr1
            else:
                doctors_category = ''

            #type = request.POST.getlist('type')

            # tmpstr1 = ''
            # counter = 0
            # if type and type != [] :
            #     counter += 1
            #     for i in type:
            #        if counter == 1:
            #            tmpstr1 = tmpstr1 + i
            #            counter += 1
            #        else:
            #            tmpstr1 = tmpstr1 + ',' +i
            #            counter += 1
            #     type = tmpstr1
            # else:
            #     type=''
            #
            tmpstr1 = ''
            counter = 0
            if related_topics  and related_topics != [] :
                counter += 1
                for i in related_topics:
                    if counter == 1:
                        tmpstr1 = tmpstr1 + i
                        counter += 1
                    else:
                        tmpstr1 = tmpstr1 + ',' + i
                        counter += 1
                related_topics = tmpstr1
            else:
                related_topics = ''

            if len(request.FILES) == 1:
                file_name = request.FILES['myfile'].name
                tstr = ''
                for i in file_name:
                    if i == ' ' or i == '-' or i == '(' or i == ')':
                        #print 'space'
                        tstr = tstr + '_'
                    else:
                        #print i
                        tstr = tstr + i
                file_name = tstr.lower()
                global image_file_name
                global image_alt_g
                image_file_name = file_name
                file_type = file_name[-5:-1] + file_name[-1]
                if file_type.lower() == '.docx':
                    def convert_image(image):
                        with image.open() as image_bytes:
                            encoded_src = base64.b64encode(image_bytes.read()).decode("ascii")
                        imgData = encoded_src
                        global image_iterator
                        global image_file_name
                        image_iterator = image_iterator + 1
                        image = image_file_name[:-5] + "_" + str(image_iterator) + ".png"
                        global image_src
                        #image_src = "/media/articles/docx/symptoms/" + image ~~~~New code Below 1 line
                        image_src = "https://image2.healthforu.com/media/articles/docx/symptoms/" + image
                        found = "---"
                        filepath = settings.DOCX_PATH_SYMPTOMS + '/' + image
                        while True:
                            found = "yes"
                            if os.path.isfile(filepath) == True:
                                image_iterator = image_iterator + 1
                                image = image_file_name[:-5] + "_" + str(image_iterator) + ".png"
                                filepath = settings.DOCX_PATH_SYMPTOMS + '/' + image

                            else:
                                found = "no"
                                break
                            #image_src = "/media/articles/docx/symptoms/" + image ~~~~New code Below 1 line
                            image_src = "https://image2.healthforu.com/media/articles/docx/symptoms/" + image
                        global symptoms_image_file_name
                        symptoms_image_file_name = image
                        fh = open(filepath, "wb")
                        fh.write(imgData.decode('base64'))
                        fh.close()

                        """Uploading via ftplib """  # ~~~~New code Below Uploading block
                        import ftplib
                        from ftplib import FTP
                        try:
                            ftp = FTP("45.114.117.14")
                            ftp.login('www-data', 'qwwe34456ttggnhh666')
                            file = open(filepath, "rb")
                            ftp.cwd('/html/media/articles/docx/symptoms/')
                            ftp.storbinary('STOR ' + symptoms_image_file_name, file)
                            ftp.sendcmd('SITE CHMOD 664 ' + symptoms_image_file_name)
                            #print "STORing File now..."
                            ftp.quit()
                            file.close()
                            #print "File transfered"
                        except Exception as e:
                            print e
                            #print e

                        """Uploading end"""

                        return {
                            # "src": "data:{0};base64,{1}".format(image.content_type, encoded_src)
                            "src": image_src,
                            "alt_text": image_alt_g
                        }

                    for f in request.FILES.getlist('myfile'):
                        # result = mammoth.convert_to_html(f)
                        result = mammoth.convert_to_html(f, convert_image=mammoth.images.img_element(convert_image))
                        global image_alt_g
                        global symptoms_image_file_name
                        image_alt_g = ''
                        html = result.value  # The generated HTML
                        # tstr =''
                        # for i in symptoms_image_file_name :
                        #     if i == ' ':
                        #         print 'space'
                        #         tstr = tstr + '-'
                        #     else:
                        #         print i
                        #         tstr = tstr + i
                        # symptoms_image_file_name = tstr
                        new_symptoms = Symptoms(symptoms_docx_file=f, symptoms_html_raw=html,
                                                 symptoms_html_refined=html,tag_string=tag_string,
                                              current_user_id=request.user.id,stage_id=2,topic_title=topic_title,
                                              doctors_category=doctors_category,symptoms_image_file_name=symptoms_image_file_name,
                                              related_topics=related_topics,small_description=small_description,
                                              publish_date=publish_date,page_title=page_title,page_keywords=page_keywords,
                                              page_description=page_description)
                        new_symptoms.save()
                        symptoms_image_file_name = ''
                    image_file_name = ''
                    image_iterator = 0
                    messages.success(request, "Symptoms Article Successfully Saved")
                    return redirect(reverse('symptoms-listing-edit', args=[new_symptoms.id]))
                else:
                    messages.error(request, "Uploaded file is not a docx file")
                    return render(request, 'data_management/symptoms_data/add_symptoms.html',
                                  {'tab': 'disease_symptom_drug_data', 'tab_listing': 'disease_listing'
                                   })
            else:
                messages.error("No file uploaded")
                return render(request, 'data_management/symptoms_data/add_symptoms.html',
                              {'tab': 'disease_symptom_drug_data', 'tab_listing': 'disease_listing'
                               })

    except Exception as e:
        #print e
        raise Http404





####################################################################
# Name - symptoms_listing_edit                                     #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def symptoms_listing_edit(request, symptoms_id=None):
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_disease_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_disease_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    symptoms_articles = Symptoms.objects.filter(~Q(id=symptoms_id)).filter(is_disable=False).order_by('topic_title')
    #symptoms_type = Symptoms_type_master.objects.filter(delete=False)
    category_obj = Category.objects.filter(delete=False).order_by('name')

    try:

        if symptoms_id is not None and request.method == "GET":
            symptoms_obj = Symptoms.objects.get(pk=symptoms_id)
            if symptoms_obj:

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True

                current_cats = symptoms_obj.doctors_category
                if current_cats and current_cats != '' or current_cats != ' ':
                    current_cats = current_cats.strip()
                    current_cats = current_cats.split(',')
                else:
                    current_cats = []

                list_empty = []
                if symptoms_obj.related_topics and symptoms_obj.related_topics != '' and symptoms_obj.related_topics != []:
                    links = symptoms_obj.related_topics.split(",")
                    current_article_list = links
                else:
                    current_article_list = list_empty

                if symptoms_obj.publish_date :
                    pub_date = symptoms_obj.publish_date.strftime('%d-%m-%Y')
                else:
                    pub_date = '01-01-2000'

                return render(request, 'data_management/symptoms_data/edit_symptoms_data.html',
                              {'tab': 'disease_symptom_drug_data', 'tab_listing': 'disease_listing',
                               'symptoms': symptoms_obj,
                               'publisher_user_data': publisher_user_data, 'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data, 'valid_choice': valid_choice,'user_is_publisher':user_is_publisher,
                               'symptoms_articles':symptoms_articles,'current_article_list':current_article_list,
                               'pub_date': pub_date,'category_obj':category_obj,'current_cats':current_cats})
            else:
                return HttpResponseRedirect('/symptoms/listing/')

        if request.method == "POST":

            try:
                small_description = request.POST['small_description'].strip()
            except:
                small_description = ''
            try:
                publish_date = request.POST['publish_date'].strip()
            except Exception as e:
                #print e
                publish_date = None
            if publish_date:
                import datetime
                #publish_date = datetime.strptime('02/11/2010', '%d/%m/%Y').strftime('%d-%m-%Y')

                day, month, year = publish_date.split('-')
                publish_date = datetime.date(int(year),int(month),int(day) )
            else:
                import datetime
                publish_date = datetime.date(int(2000), int(01), int(01))

            related_topics = request.POST.getlist('related_topics')
            tag_string = request.POST['tag_string'].strip()
            symptoms_html_refined = request.POST['symptoms_html_refined'].strip()
            topic_title = request.POST['topic_title'].strip()
            #doctors_category = request.POST['doctors_category'].strip()
            #type = request.POST.getlist('type')
            doctors_category = request.POST.getlist('category')

            page_title = request.POST['page_title']
            page_keywords = request.POST['page_keywords']
            page_description = request.POST['page_description']

            tmpstr1 = ''
            counter = 0
            if doctors_category and doctors_category != []:
                counter += 1
                for i in doctors_category:
                    if counter == 1:
                        tmpstr1 = tmpstr1 + i
                        counter += 1
                    else:
                        tmpstr1 = tmpstr1 + ',' + i
                        counter += 1
                doctors_category = tmpstr1
            else:
                doctors_category = ''

            tmpstr1 = ''
            counter = 0
            if related_topics and related_topics != []:
                counter += 1
                for i in related_topics:
                    if counter == 1:
                        tmpstr1 = tmpstr1 + i
                        counter += 1
                    else:
                        tmpstr1 = tmpstr1 + ',' + i
                        counter += 1
                related_topics = tmpstr1
            else:
                related_topics = ''

            symptoms_obj = Symptoms.objects.get(pk=symptoms_id)

            if symptoms_obj:

                #symptoms_obj.link_article_with = link_article_with
                #symptoms_obj.types = type
                symptoms_obj.topic_title = topic_title
                symptoms_obj.doctors_category = doctors_category
                symptoms_obj.tag_string = tag_string
                symptoms_obj.related_topics = related_topics
                symptoms_obj.symptoms_html_refined = symptoms_html_refined
                symptoms_obj.publish_date = publish_date
                symptoms_obj.small_description = small_description
                symptoms_obj.page_title = page_title
                symptoms_obj.page_keywords = page_keywords
                symptoms_obj.page_description = page_description

                symptoms_obj.save()
                messages.success(request, 'Symptoms Data Successfully Updated')

            is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)

            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-symptoms-listing'))

            return HttpResponseRedirect('/symptoms/edit/' + symptoms_id + '/')
    except Exception as e:
        #print e
        raise Http404


####################################################################
# Name - mark_as_complete_caller_symptoms                          #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_symptoms(request):
    try:
        if request.method == 'POST':
            symptoms_id = request.POST['symptoms_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            symptoms_obj = Symptoms.objects.get(id=symptoms_id)

            if symptoms_obj and reviewer_data_id and valid_choice_id:

                try:
                    symptoms_obj.current_user = User.objects.get(id=reviewer_data_id)

                    symptoms_obj.previous_user = request.user.id
                    symptoms_obj.stage = Stage.objects.get(pk=3)
                    symptoms_obj.free_text = ''
                    symptoms_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    symptoms_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('symptoms-listing'))
                except:
                    raise Http404

            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('symptoms-listing'))
    except Exception as e:

        return HttpResponse("Something Bad Happened")



####################################################################
# Name - mark_as_reverse_caller_symptoms                           #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_symptoms(request):
    try:
        if request.method == 'POST':
            symptoms_id = request.POST['symptoms_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            symptoms_obj = Symptoms.objects.get(id=symptoms_id)

            if symptoms_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    symptoms_obj.current_user = User.objects.get(id=caller_data_id)
                    symptoms_obj.previous_user = request.user.id
                    symptoms_obj.stage = Stage.objects.get(pk=2)
                    symptoms_obj.free_text = free_text

                    symptoms_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-symptoms-listing'))
                    return HttpResponseRedirect(reverse('symptoms-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-symptoms-listing'))
        return HttpResponseRedirect(reverse('symptoms-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_reverse_reviewer_symptoms                          #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_symptoms(request):
    try:
        if request.method == 'POST':
            symptoms_id = request.POST['symptoms_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            symptoms_obj = Symptoms.objects.get(id=symptoms_id)

            if symptoms_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    symptoms_obj.current_user = User.objects.get(id=reviewer_data_id)
                    symptoms_obj.previous_user = request.user.id
                    symptoms_obj.stage = Stage.objects.get(pk=3)
                    symptoms_obj.free_text = free_text
                    symptoms_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-symptoms-listing'))
                    return HttpResponseRedirect(reverse('symptoms-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-symptoms-listing'))
        return HttpResponseRedirect(reverse('symptoms-listing'))
    except Exception as e:
        raise Http404



####################################################################
# Name - mark_as_complete_reviewer_symptoms                        #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_symptoms(request):
    try:
        if request.method == 'POST':
            symptoms_id = request.POST['symptoms_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            symptoms_obj = Symptoms.objects.get(id=symptoms_id)

            if symptoms_obj and publisher_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    symptoms_obj.current_user = User.objects.get(id=publisher_data_id)

                    symptoms_obj.previous_user = request.user.id
                    symptoms_obj.stage = Stage.objects.get(pk=4)
                    symptoms_obj.free_text = ''
                    symptoms_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    symptoms_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('symptoms-listing'))

                except:

                    pass
            else:

                messages.error(request, 'Select Reviewer and Validation Choice')

        else:

            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('symptoms-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_complete_publisher_symptoms                        #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_symptoms(request):
    try:
        if request.method == 'POST':
            symptoms_id = request.POST['symptoms_id']
            symptoms_obj = Symptoms.objects.get(id=symptoms_id)

            if symptoms_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    symptoms_obj.stage = Stage.objects.get(pk=5)

                    symptoms_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-symptoms-listing'))
                    return HttpResponseRedirect(reverse('symptoms-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-symptoms-listing'))
        return HttpResponseRedirect(reverse('symptoms-listing'))
    except Exception as e:
        raise Http404







"""Drug Functions Start"""


@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def drug_data_manage(request):
    try:
        return render(request, 'admin/drug_management/drug_management.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'drugmanage'})
    except Exception as e:

        raise Http404


####################################################################
# Name - drug_data_by_users                                        #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def drug_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            drug_all_data = Drug.objects.filter(current_user_id=search_data).order_by('name')
            paginator = Paginator(drug_all_data, 100)
            page = request.GET.get('page')
            try:
                drug_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                drug_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                drug_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/drug_management/drug_by_user.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'drugbymanage', 'drug_all_data': drug_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            drug_all_data = Drug.objects.filter(name__icontains=search_data_two).order_by('name')
            paginator = Paginator(drug_all_data, 100)
            page = request.GET.get('page')
            try:
                drug_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                drug_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                drug_all_data = paginator.page(paginator.num_pages)

            return render(request, 'admin/drug_management/drug_by_user.html',
                              {'tab': 'disease_symptom_drug_data', 'crosal': 'drugbymanage',
                               'drug_all_data': drug_all_data,
                               'user_data_obj': user_data_obj, 'search_data_two': search_data_two})

        drug_all_data = Drug.objects.all().order_by('name')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(drug_all_data, 100)
        page = request.GET.get('page')
        try:
            drug_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            drug_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            drug_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/drug_management/drug_by_user.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'drugbymanage', 'drug_all_data': drug_all_data,
                       'user_data_obj': user_data_obj})
    except Exception as e:

        raise Http404


####################################################################
# Name - drug_data_by_stages                                       #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def drug_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            drug_all_data = Drug.objects.filter(stage_id=stage_id).order_by('name')
        else:
            drug_all_data = Drug.objects.all().order_by('name')
            stage_id=None
        Drug.objects.all().order_by('name')
        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(drug_all_data, 100)
        page = request.GET.get('page')
        try:
            drug_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            drug_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            drug_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/drug_management/drug_by_stages.html',
                      {'tab': 'disease_symptom_drug_data', 'crosal': 'drugbymanage', 'drug_all_data': drug_all_data,
                       'stage_data': stage_data,'stage_no':stage_id})
    except Exception as e:

        raise Http404


####################################################################
# Name -Drug Assignment                                            #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def drug_assignment(request):
    try:
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all().order_by('name')


        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            drug_obj =  Drug.objects.filter(name__icontains=search_data).order_by('name')
            paginator = Paginator(drug_obj, 100)
            page = request.GET.get('page')
            try:
                drug_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                drug_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                drug_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/drug_management/drug_assign.html',
                          {'tab': 'disease_symptom_drug_data', 'crosal': 'drugbymanage', 'stage_data': stage_data,
                           'drug_all_data': drug_obj, 'search_data':search_data})

            # 'state_data_obj': state_data_obj    >>>> CAUSING ERROR



        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'drug_filter':
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    drug_obj = Drug.objects.filter(state=state_data_obj,
                                                   city=city_data,
                                                   locality=locality_data).order_by('name')
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')
                    paginator = Paginator(drug_obj, 100)
                    page = request.GET.get('page')
                    try:
                        drug_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        drug_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        drug_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/drug_management/drug_assign.html',
                                  {'tab': 'disease_symptom_drug_data', 'crosal': 'labbymanage',
                                   'stage_data': stage_data,
                                   'drug_all_data': drug_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter})
                elif city_data:
                    drug_obj = Drug.objects.filter(state=state_data, city=city_data).order_by(
                        'name')
                else:
                    drug_obj = Drug.objects.filter(state=state_data).order_by('name')
                paginator = Paginator(drug_obj, 100)
                page = request.GET.get('page')
                try:
                    drug_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    drug_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    drug_obj = paginator.page(paginator.num_pages)

                return render(request, 'admin/drug_management/drug_assign.html',
                              {'tab': 'data', 'crosal': 'drugbymanage', 'stage_data': stage_data,
                               'drug_all_data': drug_obj, 'state_data_obj': state_data_obj,
                               'state_filter': state_filter, 'locality_filter': locality_filter,
                               'city_filter': city_filter, 'city_obj': city_obj})

            else:
                drug_obj = Drug.objects.all().order_by('name')
            paginator = Paginator(drug_obj,100)
            page = request.GET.get('page')
            try:
                drug_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                drug_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                drug_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/drug_management/drug_assign.html',
                          {'tab': 'disease_symptom_drug_data', 'crosal': 'drugbymanage', 'stage_data': stage_data,
                           'drug_all_data': drug_obj, 'state_data_obj': state_data_obj
                           })
        else:
            drug_obj = Drug.objects.all().order_by('name')
            paginator = Paginator(drug_obj, 100)
            page = request.GET.get('page')
            try:
                drug_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                drug_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                drug_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/drug_management/drug_assign.html',
                          {'tab': 'disease_symptom_drug_data', 'crosal': 'drugbymanage', 'stage_data': stage_data,
                           'drug_all_data': drug_obj, 'state_data_obj': state_data_obj})


    except Exception as e:

        raise Http404


####################################################################
# Name - assign drug                                               #
# Owner - Nishank                                                  #
# Review by -                                                      #
#                                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_drug(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                        a = len(checkedValues)
                        b = type(checkedValues[0])
                    except:
                        response1['Message'] = "Something Bad happened"
                for i in range(0, len(checkedValues)):
                    assign_obj = Drug.objects.filter(id=checkedValues[i]).update(
                        current_user_id=assign_user,
                        stage_id=change_stage)
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/drug/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:

        raise Http404


####################################################################
# Name - drug_listing                                              #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@csrf_exempt
@require_GET
def drug_listing(request):
    try:

        assign_id = UserManagement.objects.get(user_id=request.user.id)

        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            drug_obj = Drug.objects.filter(current_user_id=telecaller_id,is_disable=False).order_by('name')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            drug_obj = Drug.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
        else:
            reviewer_id = 0

        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            drug_obj = Drug.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('name')
        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:

            if len(drug_obj) == 0:
                messages.error(request, "No drug found")

                return render(request, 'data_management/drug_data/drug_listing.html',
                              {'tab': 'disease_symptom_drug_data'})
            elif len(drug_obj) > 0:
                paginator = Paginator(drug_obj, 50)
                page = request.GET.get('page')
                try:
                    drug_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    drug_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    drug_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/drug_data/drug_listing.html',
                              dict(drug=drug_obj, tab='disease_symptom_drug_data', ))
        elif reviewer_id:
            drug_obj = Drug.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
            if len(drug_obj) == 0:
                messages.error(request, "No drug found")
                return render(request, 'data_management/drug_data/drug_listing.html',
                              {'tab': 'disease_symptom_drug_data'})
            elif len(drug_obj) > 0:
                paginator = Paginator(drug_obj, 50)
                page = request.GET.get('page')
                try:
                    drug_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    drug_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    drug_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/drug_data/drug_listing.html',
                              dict(drug=drug_obj, tab='disease_symptom_drug_data'))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:

        raise Http404


####################################################################
# Name - add_drug                                                 #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_drug(request):
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True)
    valid_choice = ValidateByChoice.objects.all()

    try:
        if request.method == "GET":
            return render(request, 'data_management/drug_data/add_drug.html',
                          {'tab': 'drug_symptom_drug_data', 'tab_listing': 'drug_listing',
                           })

        elif request.method == "POST":
            name = request.POST['name'].strip()
            generic_name = request.POST['generic_name'].strip()
            brand_name = request.POST['brand_name'].strip()
            manufacturer_name = request.POST['manufacturer_name']
            composition = request.POST['composition'].strip()
            form_n_rate = request.POST['form_n_rate'].strip()
            dosage = request.POST['dosage'].strip()
            mode_of_administration = request.POST['mode_of_administration'].strip()
            indication = request.POST['indication'].strip()
            overdose = request.POST['overdose'].strip()
            contraindication = request.POST['contraindication'].strip()
            special_precaution = request.POST['special_precaution'].strip()
            adverse_drug_reactions = request.POST['adverse_drug_reactions'].strip()
            drug_interaction = request.POST['drug_interaction'].strip()
            lab_interference = request.POST['lab_interference'].strip()
            mechanism_of_action = request.POST['mechanism_of_action'].strip()
            drug_class = request.POST['drug_class'].strip()
            atc_classification = request.POST['atc_classification'].strip()
            schedule_classification = request.POST['schedule_classification'].strip()



            usermanagement_objects_list = request.user.usermanagement_set.all()

            #for i in usermanagement_objects_list:
            #    if i.is_reviewer:
            #        stage = 2
            #    elif i.is_publisher:
            #        stage = 3
            #    else:
            #        stage = 1

            drug_obj = Drug(name = name, generic_name = generic_name,brand_name = brand_name,
            manufacturer_name =manufacturer_name, composition = composition,form_n_rate= form_n_rate,
            dosage = dosage,mode_of_administration = mode_of_administration, indication =indication,
            overdose =overdose ,contraindication = contraindication,special_precaution =special_precaution,
            adverse_drug_reactions = adverse_drug_reactions,drug_interaction=drug_interaction, lab_interference = lab_interference, mechanism_of_action= mechanism_of_action,
            drug_class =drug_class,atc_classification = atc_classification, schedule_classification = schedule_classification,
            current_user_id=request.user.id, stage_id=2,free_text='')


            if name and generic_name and brand_name and manufacturer_name and composition:
                drug_obj.save()
                messages.success(request, 'Drug Data Successfully Updated')
                return redirect(reverse('drug-listing'))
            else:
                messages.error(request,"Please provide complete data")
                return redirect(reverse('add_drug'))
    except Exception as e:

        raise Http404

####################################################################
# Name - drug_listing_edit                                         #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def drug_listing_edit(request, drug_id=None):
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_disease_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_disease_caller=True)
    valid_choice = ValidateByChoice.objects.all()

    try:

        if drug_id is not None and request.method == "GET":
            drug = Drug.objects.get(id=drug_id)

            if drug:

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True


                return render(request, 'data_management/drug_data/edit_drug_data.html',
                              {'tab': 'basic', 'tab_listing': 'drug_listing', 'drug': drug,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'valid_choice': valid_choice,'user_is_publisher':user_is_publisher})
            else:
                messages.error('Drug not found')
                return HttpResponseRedirect('/drug/listing/')
        if request.method == "POST":
            name = request.POST['name'].strip()
            generic_name = request.POST['generic_name'].strip()
            brand_name = request.POST['brand_name'].strip()
            manufacturer_name = request.POST['manufacturer_name']
            composition = request.POST['composition'].strip()
            form_n_rate = request.POST['form_n_rate'].strip()
            dosage = request.POST['dosage'].strip()
            mode_of_administration = request.POST['mode_of_administration'].strip()
            indication = request.POST['indication'].strip()
            overdose = request.POST['overdose'].strip()
            contraindication = request.POST['contraindication'].strip()
            special_precaution = request.POST['special_precaution'].strip()
            adverse_drug_reactions = request.POST['adverse_drug_reactions'].strip()
            drug_interaction = request.POST['drug_interaction'].strip()
            lab_interference = request.POST['lab_interference'].strip()
            mechanism_of_action = request.POST['mechanism_of_action'].strip()
            drug_class = request.POST['drug_class'].strip()
            atc_classification = request.POST['atc_classification'].strip()
            schedule_classification = request.POST['schedule_classification'].strip()

            drug_obj = Drug.objects.get(pk=drug_id)
            if drug_obj:
                drug_obj.name = name
                drug_obj.generic_name = generic_name
                drug_obj.brand_name = brand_name
                drug_obj.manufacturer_name = manufacturer_name
                drug_obj.composition = composition
                drug_obj.form_n_rate = form_n_rate
                drug_obj.dosage = dosage
                drug_obj.mode_of_administration = mode_of_administration
                drug_obj.indication = indication
                drug_obj.overdose =overdose
                drug_obj.contraindication = contraindication
                drug_obj.special_precaution = special_precaution
                drug_obj.adverse_drug_reactions = adverse_drug_reactions
                drug_obj.drug_interaction = drug_interaction
                drug_obj.lab_interference = lab_interference
                drug_obj.mechanism_of_action = mechanism_of_action
                drug_obj.drug_class = drug_class
                drug_obj.atc_classification = atc_classification
                drug_obj.schedule_classification = schedule_classification

                drug_obj.save()
                messages.success(request, 'Drug Data Successfully Updated')

            is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)

            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-drug-listing'))


            return HttpResponseRedirect('/drug/edit/' + drug_id + '/')
    except Exception as e:

        raise Http404



####################################################################
# Name - mark_as_complete_caller_drug                              #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_drug(request):
    try:
        if request.method == 'POST':
            drug_id = request.POST['drug_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            drug_obj = Drug.objects.get(id=drug_id)

            if drug_obj and reviewer_data_id and valid_choice_id:

                try:
                    drug_obj.current_user = User.objects.get(id=reviewer_data_id)

                    drug_obj.previous_user = request.user.id
                    drug_obj.stage = Stage.objects.get(pk=3)
                    drug_obj.free_text = ''
                    drug_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    drug_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('drug-listing'))
                except:
                    raise Http404

            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('drug-listing'))
    except Exception as e:

        return HttpResponse("Something Bad Happened")



####################################################################
# Name - mark_as_reverse_caller_drug                               #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_drug(request):
    try:
        if request.method == 'POST':
            drug_id = request.POST['drug_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            drug_obj = Drug.objects.get(id=drug_id)

            if drug_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    drug_obj.current_user = User.objects.get(id=caller_data_id)
                    drug_obj.previous_user = request.user.id
                    drug_obj.stage = Stage.objects.get(pk=2)
                    drug_obj.free_text = free_text

                    drug_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-drug-listing'))
                    return HttpResponseRedirect(reverse('drug-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-drug-listing'))
        return HttpResponseRedirect(reverse('drug-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_reverse_reviewer_drug                              #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_drug(request):
    try:
        if request.method == 'POST':
            drug_id = request.POST['drug_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            drug_obj = Drug.objects.get(id=drug_id)

            if drug_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    drug_obj.current_user = User.objects.get(id=reviewer_data_id)
                    drug_obj.previous_user = request.user.id
                    drug_obj.stage = Stage.objects.get(pk=3)
                    drug_obj.free_text = free_text
                    drug_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-drug-listing'))
                    return HttpResponseRedirect(reverse('drug-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-drug-listing'))
        return HttpResponseRedirect(reverse('drug-listing'))
    except Exception as e:
        raise Http404



####################################################################
# Name - mark_as_complete_reviewer_drug                            #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_drug(request):
    try:
        if request.method == 'POST':
            drug_id = request.POST['drug_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            drug_obj = Drug.objects.get(id=drug_id)

            if drug_obj and publisher_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    drug_obj.current_user = User.objects.get(id=publisher_data_id)

                    drug_obj.previous_user = request.user.id
                    drug_obj.stage = Stage.objects.get(pk=4)
                    drug_obj.free_text = ''
                    drug_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    drug_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('drug-listing'))

                except:

                    pass
            else:

                messages.error(request, 'Select Reviewer and Validation Choice')

        else:

            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('drug-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_complete_publisher_drug                            #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_drug(request):
    try:
        if request.method == 'POST':
            drug_id = request.POST['drug_id']
            drug_obj = Drug.objects.get(id=drug_id)

            if drug_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    drug_obj.stage = Stage.objects.get(pk=5)

                    drug_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-drug-listing'))
                    return HttpResponseRedirect(reverse('drug-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-drug-listing'))
        return HttpResponseRedirect(reverse('drug-listing'))
    except Exception as e:
        raise Http404










""" Organisation Functions here """


####################################################################
# Name - organisation_assignment                                   #
# Owner - Visnu Badal                                              #
# Review by - ?                                                    #
#                                                                  #
####################################################################


@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def organisation_assignment(request):
    try:
        stage_filter = False
        user_filter = False
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all().order_by('name')
        user_data = User.objects.all().order_by('username')



        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            organisation_data_obj = OrganisationName.objects.filter(name__icontains=search_data,is_live_org=False).order_by('name')

            #disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
            paginator = Paginator(organisation_data_obj, 100)
            page = request.GET.get('page')
            try:
                organisation_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                organisation_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                organisation_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/admin_organisation/organisation_assign.html',
                          {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                           'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                           'user_data': user_data, 'user_filter': user_filter,'search_data':search_data})

        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'organisation_filter':

            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = None
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = None
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:

                if city_data and locality_data:
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')

                    if stage_id_data and user_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(locality=locality_data),
                                                                                Q(stage=stage_id_data),
                                                                                Q(is_live_org=False),
                                                                                Q(current_user=user_id_data)).order_by(
                            'name')

                        # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                        paginator = Paginator(organisation_data_obj, 100)
                        page = request.GET.get('page')
                        try:
                            organisation_data_obj = paginator.page(page)
                        except PageNotAnInteger:
                            # If page is not an integer, deliver first page.
                            organisation_data_obj = paginator.page(1)
                        except EmptyPage:
                            # If page is out of range (e.g. 9999), deliver last page of results.
                            organisation_data_obj = paginator.page(paginator.num_pages)
                        return render(request, 'admin/admin_organisation/organisation_assign.html',
                                      {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                                       'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                                       'city_obj': city_obj, 'locality_obj': locality_obj,
                                       'locality_filter': locality_filter, 'city_filter': city_filter,
                                       'state_filter': state_filter, 'user_data': user_data, 'user_filter': user_filter,
                                       'stage_filter': stage_filter,
                                       'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                                       'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })
                    elif stage_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                Q(locality=locality_data),
                                                                                Q(stage=stage_id_data)).order_by(
                            'name')
                    elif user_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                Q(locality=locality_data),
                                                                                Q(current_user=user_id_data)).order_by(
                            'name')

                    else:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                Q(locality=locality_data)).order_by(
                            'name')

                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(organisation_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        organisation_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        organisation_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        organisation_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/admin_organisation/organisation_assign.html',
                                  {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                                   'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter, 'user_data': user_data, 'user_filter': user_filter,
                                   'stage_filter': stage_filter,
                                   'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                                    'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })
                elif city_data:
                    if stage_id_data and user_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                Q(stage=stage_id_data),
                                                                                Q(current_user=user_id_data)).order_by(
                            'name')

                        # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                        paginator = Paginator(organisation_data_obj, 100)
                        page = request.GET.get('page')
                        try:
                            organisation_data_obj = paginator.page(page)
                        except PageNotAnInteger:
                            # If page is not an integer, deliver first page.
                            organisation_data_obj = paginator.page(1)
                        except EmptyPage:
                            # If page is out of range (e.g. 9999), deliver last page of results.
                            organisation_data_obj = paginator.page(paginator.num_pages)
                        return render(request, 'admin/admin_organisation/organisation_assign.html',
                                      {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                                       'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                                       'city_obj': city_obj,
                                       'locality_filter': locality_filter, 'city_filter': city_filter,
                                       'state_filter': state_filter, 'user_data': user_data, 'user_filter': user_filter,
                                       'stage_filter': stage_filter,
                                       'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                                       'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })


                    elif stage_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                Q(stage=stage_id_data)).order_by(
                            'name')
                    elif user_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                Q(current_user=user_id_data)).order_by(
                            'name')
                    else:
                        organisation_data_obj = OrganisationName.objects.filter(state=state_data,
                                                                                city=city_data,is_live_org=False).order_by(
                            'name')
                else:
                    if stage_id_data and user_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(stage=stage_id_data),
                                                                                Q(is_live_org=False),
                                                                                Q(current_user=user_id_data)).order_by(
                            'name')
                        # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                        paginator = Paginator(organisation_data_obj, 100)
                        page = request.GET.get('page')
                        try:
                            organisation_data_obj = paginator.page(page)
                        except PageNotAnInteger:
                            # If page is not an integer, deliver first page.
                            organisation_data_obj = paginator.page(1)
                        except EmptyPage:
                            # If page is out of range (e.g. 9999), deliver last page of results.
                            organisation_data_obj = paginator.page(paginator.num_pages)
                        return render(request, 'admin/admin_organisation/organisation_assign.html',
                                      {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                                       'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                                       'city_obj': city_obj,
                                       'locality_filter': locality_filter, 'city_filter': city_filter,
                                       'state_filter': state_filter, 'user_data': user_data, 'user_filter': user_filter,
                                       'stage_filter': stage_filter,
                                       'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                                       'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })

                    elif stage_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(stage=stage_id_data),
                                                                                Q(is_live_org=False)).order_by(
                            'name')
                    elif user_id_data:
                        organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(current_user=user_id_data),
                                                                                Q(is_live_org=False)).order_by(
                            'name')
                    else:

                        organisation_data_obj = OrganisationName.objects.filter(state=state_data,is_live_org=False).order_by('name')
                    # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                    paginator = Paginator(organisation_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        organisation_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        organisation_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        organisation_data_obj = paginator.page(paginator.num_pages)

                    return render(request, 'admin/admin_organisation/organisation_assign.html',
                                  {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                                   'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                                   'state_filter': state_filter, 'locality_filter': locality_filter,
                                   'city_filter': city_filter, 'city_obj': city_obj, 'user_data': user_data,
                                   'user_filter': user_filter,
                                       'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                                       'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })

            #No satte so no city etc
            elif stage_id_data and user_id_data:
                organisation_data_obj = OrganisationName.objects.filter(Q(stage=stage_id_data),
                                                                        Q(current_user=user_id_data),
                                                                        Q(is_live_org=False)).order_by('name')
                # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
                paginator = Paginator(organisation_data_obj, 100)
                page = request.GET.get('page')
                try:
                    organisation_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    organisation_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    organisation_data_obj = paginator.page(paginator.num_pages)

                return render(request, 'admin/admin_organisation/organisation_assign.html',
                              {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                               'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                               'state_filter': state_filter, 'locality_filter': locality_filter,
                               'city_filter': city_filter, 'city_obj': city_obj, 'user_data': user_data,
                               'user_filter': user_filter, 'stage_filter': stage_filter,
                               'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                               'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })



            #only stage
            elif stage_id_data:
                organisation_data_obj = OrganisationName.objects.filter(Q(stage=stage_id_data),Q(is_live_org=False)).order_by('name')

            #only user id
            elif user_id_data:
                organisation_data_obj = OrganisationName.objects.filter(Q(current_user=user_id_data),Q(is_live_org=False)).order_by('name')
            #No filter data received send all objects to template
            else:
                organisation_data_obj = OrganisationName.objects.filter(is_live_org=False).order_by('name')

            # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
            paginator = Paginator(organisation_data_obj, 100)
            page = request.GET.get('page')
            try:
                organisation_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                organisation_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                organisation_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/admin_organisation/organisation_assign.html',
                          {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                           'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                           'user_data': user_data, 'user_filter': user_filter,
                           'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                           'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })



        else:

            filter_name = None
            state_data = None
            city_data = None
            user_id_data = None
            locality_data =None
            stage_id_data =None


            # No filter send all objects
            organisation_data_obj = OrganisationName.objects.filter(is_live_org=False).order_by('name')

            # disabled on 25 APR 2017 TO DISPLAY ALL RECORDS SINCE NEW Pune records arte to come
            paginator = Paginator(organisation_data_obj, 100)
            page = request.GET.get('page')
            try:
                organisation_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                organisation_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                organisation_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/admin_organisation/organisation_assign.html',
                          {'tab': 'data', 'crosal': 'organisationbymanage', 'stage_data': stage_data,
                           'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                           'user_data': user_data, 'user_filter': user_filter,
                           'filter_name':filter_name,'state_data':state_data,'city_data':city_data,
                           'user_id_data':user_id_data,'locality_data':locality_data,'stage_id_data':stage_id_data  })


    except Exception as e:

        raise Http404


####################################################################
# Name - organisation_data_by_stages                               #
# Owner - Visnu Badal                                              #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def organisation_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            organisation_all_data = OrganisationName.objects.filter(stage_id=stage_id,is_live_org=False).order_by('name')
        else:
            organisation_all_data = OrganisationName.objects.filter(is_live_org=False).order_by('name')
            stage_id=None
        stage_data = Stage.objects.all()[:5]

        paginator = Paginator(organisation_all_data, 600)
        page = request.GET.get('page')
        try:
            organisation_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            organisation_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            organisation_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/admin_organisation/organisation_by_stages.html',
                      {'tab': 'data', 'crosal': 'organisationbymanage', 'organisation_all_data': organisation_all_data,
                       'stage_data': stage_data,'stage_no':stage_id})
    except:
        raise Http404


####################################################################
# Name - organisation_data_by_users                                #
# Owner - Visnu Badal                                              #
# Review by - ?                                                    #
#                                                                  #
####################################################################


@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def organisation_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            organisation_all_data = OrganisationName.objects.filter(current_user_id=search_data,is_live_org=False).order_by('name')
            paginator = Paginator(organisation_all_data, 100)
            page = request.GET.get('page')
            try:
                organisation_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                organisation_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                organisation_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/admin_organisation/organisation_by_user.html',
                      {'tab': 'data', 'crosal': 'organisationbymanage', 'organisation_all_data': organisation_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            organisation_all_data = OrganisationName.objects.filter(name__icontains=search_data_two,is_live_org=False).order_by('name')
            paginator = Paginator(organisation_all_data, 100)
            page = request.GET.get('page')
            try:
                organisation_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                organisation_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                organisation_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/admin_organisation/organisation_by_user.html',
                          {'tab': 'data', 'crosal': 'organisationbymanage',
                           'organisation_all_data': organisation_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})




        user_data_obj = UserManagement.objects.all()
        organisation_all_data = OrganisationName.objects.filter(is_live_org=False).order_by('name')

        paginator = Paginator(organisation_all_data, 100)
        page = request.GET.get('page')
        try:
            organisation_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            organisation_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            organisation_all_data = paginator.page(paginator.num_pages)

        return render(request, 'admin/admin_organisation/organisation_by_user.html',
                      {'tab': 'data', 'crosal': 'organisationbymanage', 'organisation_all_data': organisation_all_data,
                       'user_data_obj': user_data_obj})
    except:
        raise Http404


####################################################################
# Name - organisation_data_manage                                  #
# Owner - Visnu Badal                                              #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def organisation_data_manage(request):
    try:
        return render(request, 'admin/admin_organisation/organisation_management.html',
                      {'tab': 'data', 'crosal': 'organisationmanage'})
    except:
        raise Http404


####################################################################
# Name - organisation_listing                                      #
# Owner - Visnu Badal                                              #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def organisation_listing(request):
    try:
        if request.method == "GET":
            state_filter = False
            city_filter = False
            locality_filter = False
            state_data_obj = State.objects.all().order_by('name')
            user_data = User.objects.all()
            usmo = UserManagement.objects.get(user_id = request.user.id)

            try:
                filter_name = str(request.GET['x'].strip())
            except:
                filter_name = None
            if filter_name == 'organisation_filter':
                state_data = request.GET['state_id'].strip()
                if state_data:
                    state_filter = int(state_data)
                city_data = request.GET['city_id'].strip()
                if city_data and state_filter:
                    city_filter = int(city_data)
                    city_obj = City.objects.filter(state_id=state_filter).order_by('name')
                else:
                    city_obj = []
                locality_data = request.GET['locality_id'].strip()
                if locality_data:
                    locality_filter = int(locality_data)

                try:
                    status_data = request.GET['status_data'].strip()
                    if status_data == '':
                        status_data = None
                except:
                    status_data = None

                if state_data:
                    if city_data and locality_data:
                        if status_data:
                            if status_data == 'active':
                                organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                Q(locality=locality_data),
                                                                                Q(current_user_id=request.user.id),Q(is_disable=False)).order_by('name')
                            if status_data == 'inactive':
                                organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                        Q(city=city_data),
                                                                                        Q(is_live_org=False),
                                                                                        Q(locality=locality_data),
                                                                                        Q(current_user_id=request.user.id),
                                                                                        Q(is_disable=True)).order_by('name')
                        else:
                            organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                    Q(city=city_data),
                                                                                    Q(is_live_org=False),
                                                                                    Q(locality=locality_data),
                                                                                    Q(current_user_id=request.user.id)).order_by('name')

                        locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')
                        paginator = Paginator(organisation_data_obj, 50)
                        page = request.GET.get('page')
                        try:
                            organisation_data_obj = paginator.page(page)
                        except PageNotAnInteger:
                            # If page is not an integer, deliver first page.
                            organisation_data_obj = paginator.page(1)
                        except EmptyPage:
                            # If page is out of range (e.g. 9999), deliver last page of results.
                            organisation_data_obj = paginator.page(paginator.num_pages)
                        return render(request, 'data_management/organisation_data/organisation_listing.html',
                                      {'tab_listing': 'organisation_listing',
                                       'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                                       'state_filter': state_filter, 'locality_filter': locality_filter,
                                       'city_filter': city_filter, 'city_obj': city_obj, 'locality_obj': locality_obj,
                                       'user_data': user_data,'status_data':status_data})
                    elif city_data:
                        if status_data:
                            if status_data == 'active':
                                organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                        Q(is_disable=False),
                                                                                        Q(is_live_org=False),
                                                                                        Q(city=city_data), Q(current_user_id=request.user.id)).order_by('name')
                            if status_data == 'inactive':
                                organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                        Q(is_live_org=False),
                                                                                        Q(city=city_data), Q(current_user_id=request.user.id)).order_by('name')

                        else:
                            organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                Q(city=city_data),
                                                                                Q(is_live_org=False),
                                                                                    Q(current_user_id=request.user.id)).order_by('name')
                    else:
                        if status_data:
                            if status_data == 'active':
                                organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                        Q(is_disable=False),
                                                                                        Q(is_live_org=False),
                                                                                Q(current_user_id=request.user.id)).order_by('name')
                            if status_data == 'inactive':
                                organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                        Q(is_live_org=False),
                                                                                        Q(current_user_id=request.user.id)).order_by('name')
                        else:
                            organisation_data_obj = OrganisationName.objects.filter(Q(state=state_data),
                                                                                    Q(current_user_id=request.user.id),
                                                                                    Q(is_live_org=False)).order_by('name')

                    paginator = Paginator(organisation_data_obj, 50)
                    page = request.GET.get('page')
                    try:
                        organisation_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        organisation_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        organisation_data_obj = paginator.page(paginator.num_pages)

                    return render(request, 'data_management/organisation_data/organisation_listing.html',
                                  {'tab_listing': 'organisation_listing',
                                   'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                                   'state_filter': state_filter, 'locality_filter': locality_filter,
                                   'city_filter': city_filter, 'city_obj': city_obj, 'user_data': user_data,'status_data':status_data})

                elif status_data and not state_data:
                    if status_data == 'active':
                        organisation_data_obj = OrganisationName.objects.filter( Q(current_user_id=request.user.id),
                                                                                 Q(is_disable=False),
                                                                                 Q(is_live_org=False)).order_by('name')
                    if status_data == 'inactive':
                            organisation_data_obj = OrganisationName.objects.filter(Q(current_user_id=request.user.id),
                                                                                    Q(is_disable=True),
                                                                                    Q(is_live_org=False),).order_by('name')

                else:
                    organisation_data_obj = OrganisationName.objects.filter(Q(current_user_id=request.user.id),Q(is_live_org=False)).order_by('name')

            else:
                # if usmo.is_reviewer and usmo.is_doctor_reviewer:
                #     organisation_data_obj = OrganisationName.objects.filter(Q(current_user_id=request.user.id)).order_by('name')
                # else:
                #     organisation_data_obj = OrganisationName.objects.filter(Q(current_user_id=request.user.id),
                #                                                         Q(is_disable=False)).order_by('name')
                status_data = None
                organisation_data_obj = OrganisationName.objects.filter(Q(current_user_id=request.user.id),Q(is_live_org=False)).order_by('name')

            paginator = Paginator(organisation_data_obj, 50)
            page = request.GET.get('page')
            try:
                organisation_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                organisation_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                organisation_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'data_management/organisation_data/organisation_listing.html',
                          {'tab_listing': 'organisation_listing',
                           'organisation_data_obj': organisation_data_obj, 'state_data_obj': state_data_obj,
                           'state_filter': state_filter, 'city_filter': city_filter, 'user_data': user_data,'status_data':status_data})
    except Exception as e:
        raise Http404


####################################################################
# Name - organisation_adding                                       #
# Owner - Visnu Badal                                              #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@csrf_exempt
def organisation_adding(request):
    try:
        if request.method == "GET":
            country = Country.objects.all().order_by('name')
            try:
                country_name = country[0]
            except IndexError:
                country_name = ''
            state = State.objects.all().order_by('name')
            return render(request, 'data_management/organisation_data/add_organisation.html',
                          {'tab_listing': 'organisation_listing', 'country': country, 'state': state})
        elif request.method == "POST":
            name = request.POST['name'].strip()
            address = request.POST['street'].strip()
            country_name = request.POST['country_id'].strip()
            state_name = request.POST['state_id'].strip()
            city_name = request.POST['city_id'].strip()
            location_name = request.POST['locality_id'].strip()

            try:
                is_emergency = request.POST['is_emergency'].strip()
            except:
                is_emergency = 0
            if is_emergency == '1':
                is_emergency= True
            else:
                is_emergency = False

            if name and address and location_name and city_name and state_name:
                organisation_obj_check = OrganisationName.objects.filter(name__iexact=name, street__iexact=address,is_live_org=False,
                                                                         locality_id=location_name, city_id=city_name)
                if len(organisation_obj_check):
                    messages.error(request, 'Data already exists')
                else:
                    try:

                        organisation_obj = OrganisationName.objects.create(
                            name=name,
                            street=address,
                            locality_id=location_name,
                            city_id=city_name,
                            country_id=1,
                            state_id=state_name,
                            current_user_id=
                            request.user.id,
                            stage_id=2,
                            is_live_org=False,
                            is_emergency=is_emergency
                        )
                        organisation_obj.save()

                        return HttpResponseRedirect(reverse('organisation-listing-edit' ,args=[organisation_obj.id]))
                    except Exception as e:
                        messages.error(request, 'Something Bad Happened')

            else:
                messages.error(request, 'Please enter required field')
            return HttpResponseRedirect(reverse('organisation-adding'))


    except Exception as e:

        raise Http404


####################################################################
# Name - organisation_listing_edit                                 #
# Owner - Visnu Badal                                              #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def organisation_listing_edit(request, organisation_id=None,getcoordinates=None,setcoordinates=None):
    try:
        #print request
        back_to_url = request.META.get('HTTP_REFERER')
        try:
            coordinate_list = request.session['coordinate_list']
            if coordinate_list == []:
                coordinate_list = None
        except:
            coordinate_list = None

        if coordinate_list != None :
            setcoordinates =  'SET'
            getcoordinates =  'NOT!GET'

        if check_organisation_edit(organisation_id, request.user.id, request.user.is_superuser):
            if organisation_id:
                organisation_data = OrganisationName.objects.filter(id=organisation_id)

                valid_choice = ValidateByChoice.objects.all()
                try:
                    tab = request.GET['tab']
                except:
                    tab = '1'
                if UserManagement.objects.filter(user_id=request.user.id, is_caller=True):
                    user_data = UserManagement.objects.filter(is_reviewer=True,is_doctor_reviewer=True).values('user_id')
                    user_publisher_data = []
                elif UserManagement.objects.filter(user_id=request.user.id, is_reviewer=True):
                    user_data = UserManagement.objects.filter(is_caller=True,is_doctor_caller=True).values('user_id')
                    user_publisher_data = UserManagement.objects.filter(is_publisher=True).values('user_id')
                else:
                    user_data = []
                    user_publisher_data = []
                reviewer_user_data = User.objects.filter(id__in=user_data, is_active=True)
                publisher_user_data = User.objects.filter(id__in=user_publisher_data, is_active=True)
                user_data_complete = UserManagement.objects.all()
                department = []
                if organisation_data[0].department and organisation_data[0].department != '[]':
                    try:
                        department = map(int, organisation_data[0].department.split(","))
                    except Exception as e:
                        department = []
                facility = []
                if organisation_data[0].facility and organisation_data[0].facility != '[]':
                    try:
                        facility = map(int, organisation_data[0].facility.split(","))
                    except Exception as e:
                        facility = []
                global hostname
                global port
                hostport = hostname + port
                if tab == '1' and request.method == "GET":
                    country_data = Country.objects.filter(delete=False)
                    state_master_obj = State.objects.filter(delete=False)
                    city_master_obj = City.objects.filter(delete=False,state_id=organisation_data[0].state_id)
                    locality_obj = Locality.objects.filter(delete=False,city_id=organisation_data[0].city_id)
                    facility_obj = Facility.objects.filter(delete=False).order_by('name')
                    department_obj = Department.objects.filter(delete=False).order_by('name')
                    hospital_type = Organisation_types.objects.filter(delete= False).order_by('type_name')
                    hospital_category = Organisation_categories.objects.filter(delete= False).order_by('category_name')

                    return render(request, 'data_management/organisation_data/organisation_edit.html',
                                  {'organisation_data': organisation_data, 'country': country_data,
                                   'state': state_master_obj, 'city':
                                       city_master_obj, 'locality': locality_obj,
                                   'hospital_type': hospital_type,
                                   'hospital_category': hospital_category,
                                   'facility_obj': facility_obj,
                                   'department_obj': department_obj,
                                   'department': department,
                                   'facility': facility,
                                   'tab': tab,
                                   'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                                   'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                   'back_to_url':back_to_url,'getcoordinates':getcoordinates,'setcoordinates':setcoordinates,
                                   'coordinate_list':coordinate_list, 'hostport':hostport})
                elif tab == '2':
                    # action = request.POST.get('associate_doctor')
                    # try:
                    #     show = request.GET['show']
                    # except:
                    #     show = False

                    # if action:
                    #     department_id = request.POST.get('department')
                    #     doctor_ids = request.POST.getlist('doctor_ids')
                    #     if doctor_ids and department_id:
                    #         count = 0
                    #         for d_id in doctor_ids:
                    #             AssociateDoctorWithOrganization_obj = AssociateDoctorWithOrganization.objects.filter(
                    #                 doctor_id=int(d_id), department_id=department_id,
                    #                 organisation_id=organisation_id
                    #             )
                    #             if len(AssociateDoctorWithOrganization_obj) == 0:
                    #                 AssociateDoctorWithOrganization.objects.create(doctor_id=int(d_id),
                    #                                                                department_id=department_id,
                    #                                                                organisation_id=organisation_id)
                    #             # data = __doctor_data_creation(d_id)
                    #             # response = elasticsearch_client.index_data("global", "doctor", d_id,data)
                    #             # if response:
                    #             #     count += 1
                    #             #     doctor_obj = Doctor.objects.filter(id=d_id)
                    #             #     if doctor_obj:
                    #             #         doctor_obj.update(publish=True, stage=5)
                    #
                    #         #messages.success(request, "All doctors attached. No of Published doctors = "+str(count))
                    #         messages.success(request, "All doctors attached")

                    zone_filter = False
                    zone_location_filter_length = False
                    category_filter = False
                    # AssociateDoctorWithOrganization_obj = AssociateDoctorWithOrganization.objects.filter(
                    #     organisation_id=organisation_id)
                    zone_obj = Zone.objects.all().order_by('name')
                    zone_location_obj = {}
                    category_obj = Category.objects.all().order_by('name')
                    department_obj = Department.objects.all().order_by('name')
                    # zone = request.POST.get('zone')
                    # if zone:
                    #     zone_filter = zone
                    # category = request.POST.get('category')
                    # zone_location = request.POST.get('zone_location')
                    # try:
                    #     category_filter = int(category)
                    # except:
                    #     category_filter = category
                    # if zone_location:
                    #     zone_location_filter_length = zone_location
                    # doctor_data_obj = []
                    # doctor_data_obj = AttachWithDoctor.objects.filter(organisation_id=organisation_id).values(
                    #     'doctor_id')
                    # doctor_data_obj = Doctor.objects.filter(id__in=doctor_data_obj)
                    # if zone and category and zone_location:
                    #     doctor_data_obj = Doctor.objects.filter(zone_id=zone, zone_location_id=zone_location,
                    #                                             category_id=category, stage_id__gte=2, is_disable=False)
                    # elif zone and category:
                    #     doctor_data_obj = Doctor.objects.filter(zone_id=zone, category_id=category, stage_id__gte=2,
                    #                                             is_disable=False)
                    # paginator = Paginator(doctor_data_obj, 100)
                    # page = request.GET.get('page')
                    # try:
                    #     doctor_data_obj = paginator.page(page)
                    # except PageNotAnInteger:
                    #     doctor_data_obj = paginator.page(1)
                    # except EmptyPage:
                    #     doctor_data_obj = paginator.page(paginator.num_pages)
                    try:
                        AttachWithDoctor_obj = AttachWithDoctor.objects.filter(organisation_id=organisation_id)
                    except:
                        AttachWithDoctor_obj = []
                    try:
                        Live_Doctor_Commonwork_obj = Live_Doctor_Commonworkschedule.objects.filter(clinic_id=organisation_id)
                    except:
                        Live_Doctor_Commonwork_obj = []
                    # return render(request, 'data_management/organisation_data/organisation_edit.html', {
                    #     'tab': tab,
                    #     'department_obj': department_obj,
                    #     'doctor_data_obj': doctor_data_obj,
                    #     'organisation_data': organisation_data,
                    #     'zone_obj': zone_obj,
                    #     'category_obj': category_obj,
                    #     'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                    #     'AssociateDoctorWithOrganization_obj': AssociateDoctorWithOrganization_obj,
                    #     'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                    #     'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                    #     'user_data_complete': user_data_complete, 'valid_choice': valid_choice,'back_to_url':back_to_url
                    # })
                    return render(request, 'data_management/organisation_data/organisation_edit.html', {
                        'tab': tab,
                        'department_obj': department_obj,
                        'AttachWithDoctor_obj':AttachWithDoctor_obj,
                        'Live_Doctor_Commonwork_obj':Live_Doctor_Commonwork_obj,
                        'organisation_data': organisation_data,
                        'zone_obj': zone_obj,
                        'category_obj': category_obj,
                        'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                        'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                        'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                        'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                        'back_to_url': back_to_url,'getcoordinates':getcoordinates,'setcoordinates':setcoordinates,
                        'coordinate_list':coordinate_list, 'hostport':hostport
                    })
                elif tab == '3':
                    try:
                        if request.method == 'GET' and organisation_id:
                            org_data = OrganisationName.objects.filter(id=organisation_id)
                            org_image_list = organisation_Imagegallery.objects.filter(organisation_id=organisation_id).order_by('id')

                            return render(request, 'data_management/organisation_data/organisation_edit.html', {
                                    'tab': tab,
                                    'org_image_list': org_image_list,
                                    'organisation_data': organisation_data,
                                    'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                                    'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                    'back_to_url': back_to_url,'getcoordinates':getcoordinates,'setcoordinates':setcoordinates,
                                    'coordinate_list':coordinate_list, 'hostport':hostport})
                        elif request.method == 'POST' and organisation_id:
                            try:
                                type = request.POST.get('type')
                            except:
                                type = ''
                            if type == "add":
                                try:
                                    org_obj = OrganisationName.objects.filter(id=int(organisation_id))
                                    if len(request.FILES) == 1:
                                        file = request.FILES['orggalleryrImage']
                                        file_name = request.FILES['orggalleryrImage'].name
                                        global hostname
                                        global port
                                        url_p3 = "/api/v2/clinic/add_gallery_image/"
                                        global authToken
                                        org_id = str(organisation_id) + '/'
                                        urlc = hostname + port + url_p3 + authToken + '/' + org_id
                                        import requests
                                        url = urlc
                                        from django.core.files.storage import FileSystemStorage
                                        filepath = settings.DOC_GALLERY + '/' + file_name
                                        fs = FileSystemStorage()
                                        filename = fs.save(filepath, file)
                                        uploaded_file_url = fs.url(filename)
                                        print uploaded_file_url
                                        try:
                                            headers = {
                                                'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                                            with open(filepath, "rb") as image_file:
                                                # print ">>>>>>>>>   ", type(image_file), "   <<<<<<<<<<<<<<<<<"
                                                files = {'uploadFile': image_file}
                                                r = requests.post(url, data={'hit_from': 'CMS'}, files=files)
                                                if r.status_code == 200 or r.status_code == '200':
                                                    messages.success(request, "Successfully Uploaded Gallery Image")
                                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                                else:
                                                    messages.error(request, "Gallery Image Upload Failed")
                                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                        except Exception as e:
                                            messages.error(request, e)
                                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                                except Exception as e:
                                    messages.error(request, e)
                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            elif type == "changes":
                                image_obj_id_list = request.POST.getlist('Images')
                                image_obj_id_list = [int(img) for img in image_obj_id_list]
                                if 'delete' in request.POST:
                                    if image_obj_id_list != []:
                                        for i in image_obj_id_list:
                                            image_obj = organisation_Imagegallery.objects.get(id=i)
                                            if image_obj.publish == True:
                                                messages.error(request,
                                                               "Selected image is in Publish List, Can't be deleted")
                                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                        image_list = {
                                            'hit_from': 'CMS',
                                            "organisation_id": int(organisation_id),
                                            "id": [],
                                            "authToken": "",
                                        }
                                        image_list['id'] = image_obj_id_list
                                        image_list['authToken'] = authToken
                                        global hostname
                                        global port
                                        url_p3 = "/api/v2/clinic/delete_gallery_image"
                                        urlc = hostname + port + url_p3
                                        print urlc
                                        import requests
                                        url = urlc
                                        try:
                                            r = requests.post(url, json=image_list, headers={'hit_from': 'CMS'})
                                            resp = json.loads(r.text)
                                            print resp
                                            if r.status_code == 200 or r.status_code == '200':
                                                if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                                                    messages.success(request, "Successfully Deleted Gallery Images")
                                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                                else:
                                                    messages.error(request, resp['statusMessage'])
                                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                            else:
                                                messages.success(request, "Image(s) Not Deleted")
                                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                        except Exception as e:
                                            messages.success(request, e)
                                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                    else:
                                        messages.success(request, "Image ID(s) Not Provided")
                                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                elif 'publish' in request.POST:
                                    if image_obj_id_list != []:
                                        for i in image_obj_id_list:
                                            image_obj = organisation_Imagegallery.objects.get(id=i)
                                            image_obj.publish = True
                                            image_obj.save()
                                        messages.success(request, "Image Added to Publish List")
                                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                    else:
                                        messages.error(request, "Select Image to add to Publish List")
                                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                elif 'unpublish' in request.POST:
                                    if image_obj_id_list != []:
                                        for i in image_obj_id_list:
                                            image_obj = organisation_Imagegallery.objects.get(id=i)
                                            image_obj.publish = False
                                            image_obj.save()
                                        messages.success(request, "Image Removed from Publish List")
                                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                    else:
                                        messages.error(request, "Select Image to remove from Publish List")
                                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                messages.error(request, "Organisation ID Not Provided")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    except Exception as e:
                        messages.error(request, e)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    # if request.method == "POST":
                    #     action = request.POST.get('action')
                    #     folder_name = '/media/organisation_gallery/' + str(organisation_id) + '/'
                    #     if action == "add":
                    #         org_image = request.FILES.getlist('org_image')
                    #         for up_file in org_image:
                    #             if up_file is not None:
                    #                 image_name = str(uuid.uuid4())
                    #                 image = folder_name + handle_uploaded_file(up_file, image_name, folder_name)
                    #                 img_obj = OranisationImagery(
                    #                     organisation_id=organisation_id,
                    #                     image=image,
                    #                 )
                    #                 img_obj.save()
                    #     if action == "delete":
                    #         id = request.POST.get('id')
                    #         org_image_obj = OranisationImagery.objects.get(id=id)
                    #         if org_image_obj:
                    #             remove_file(org_image_obj.image)
                    #             org_image_obj.delete()
                    #     return HttpResponseRedirect("/organisation/edit/" + str(organisation_id) + "/?tab=3")
                    # else:
                    #     org_gallery = OranisationImagery.objects.filter(organisation_id=organisation_id)
                    #     return render(request, 'data_management/organisation_data/organisation_edit.html', {
                    #         'tab': tab,
                    #         'STATIC_URL_DOMAIN': STATIC_URL_DOMAIN,
                    #         'organisation_data': organisation_data,
                    #         'org_gallery': org_gallery,
                    #         'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                    #         'user_data_complete': user_data_complete, 'valid_choice': valid_choice,'back_to_url':back_to_url,
                    #         'getcoordinates': getcoordinates, 'setcoordinates': setcoordinates,
                    #         'coordinate_list':coordinate_list, 'hostport':hostport
                    #     })
                elif tab == '4':
                    organisation = None
                    delete = None
                    planid = None

                    try:
                        organisation = OrganisationName.objects.get(id=organisation_id)
                    except:
                        organisation = None


                    if request.method == 'GET' and organisation:

                        try:
                            delete = request.GET.get('delete')
                            planid = request.GET.get('planid')
                        except:
                            delete = None
                            planid = None
                        if delete and planid:
                            try:
                                plan_obj_full = Organisation_plan.objects.get(organisation_id=organisation_id)
                                plan_obj = plan_obj_full.package_details
                            except:
                                plan_obj = {}
                            try:
                                if  planid in list(plan_obj['plan_details'].keys()):
                                    del plan_obj['plan_details'][planid]
                                    plan_obj_full.package_details = plan_obj
                                    plan_obj_full.save()
                                    messages.success(request, 'Plan Successfully Deleted')
                                    return HttpResponseRedirect('/organisation/edit/' + str(organisation_id) + '/?tab=4')
                            except:
                                messages.success(request, 'Something Bad Happened')
                                return HttpResponseRedirect('/organisation/edit/' + str(organisation_id) + '/?tab=4')


                        plan_category_list = PlanCategory.objects.all()
                        provider_list = ServiceProvider.objects.all()
                        try:
                            plan_obj = Organisation_plan.objects.get(organisation_id=organisation_id)
                            plan = plan_obj.package_details
                            plan_list = plan['plan_details']
                        except:
                            plan_obj = None
                            plan_list =  None
                        return render(request, 'data_management/organisation_data/organisation_edit.html',
                                      {'organisation_data': organisation_data,
                                       'department': department,
                                       'facility': facility,
                                       'tab': tab,
                                       'reviewer_user_data': reviewer_user_data,
                                       'publisher_user_data': publisher_user_data,
                                       'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                       'organisation_id': organisation_id,
                                       'organisation': organisation,
                                       'provider_list': provider_list,'plan_list':plan_list,
                                       'plan_category_list':plan_category_list,'back_to_url':back_to_url,
                                       'getcoordinates': getcoordinates, 'setcoordinates': setcoordinates,
                                       'coordinate_list':coordinate_list, 'hostport':hostport})
                    # elif request.method == 'POST' and organisation:
                    #
                    #     plan_name = request.POST['package_name']
                    #
                    #     provider_id = request.POST['provider_name']
                    #
                    #     instructions = request.POST['instructions']
                    #
                    #     package_description = request.POST['package_description']
                    #
                    #     investigation = request.POST.getlist('investigations')
                    #
                    #     blood_bank = request.POST.getlist('blood_tests')
                    #
                    #     consultation = request.POST.getlist('consultations')
                    #
                    #     imaging = request.POST.getlist('diabetes_evaluation')
                    #
                    #     plan_price = float(request.POST['package_rates'])
                    #
                    #     timings = request.POST['timings']
                    #
                    #     plan_validity = request.POST['validity']
                    #
                    #     dict_in = {}
                    #
                    #     if(len(investigation) > 0) and investigation[0] != '':
                    #         for i in range(1, (len(investigation)+1)):
                    #             dict_in.update({str(i): investigation[i-1]})
                    #     else:
                    #         dict_in = {}
                    #
                    #
                    #     dict_co = {}
                    #     if ((len(consultation) > 0) and consultation[0] != ''):
                    #         for i in range(1, (len(consultation)+1)):
                    #             dict_co.update({str(i): consultation[i-1]})
                    #     else:
                    #         dict_co = {}
                    #
                    #
                    #     dict_im = {}
                    #     if (len(imaging) > 0) and imaging[0] != '':
                    #         for i in range(1, (len(imaging)+1)):
                    #             dict_im.update({str(i): imaging[i-1]})
                    #     else:
                    #         dict_im = {}
                    #
                    #
                    #     dict_bb = {}
                    #     if (len(blood_bank) > 0) and blood_bank[0] != '':
                    #         for i in range(1, (len(blood_bank)+1)):
                    #             dict_bb.update({str(i): blood_bank[i-1]})
                    #     else:
                    #         dict_bb = {}
                    #
                    #
                    #     dict_description={}
                    #     dict_description.update({'investigation':dict_in,'consultation':dict_co,
                    #     'imaging':dict_im,'blood_bank':dict_bb, })
                    #
                    #     try:
                    #         plan_obj = Organisation_plan.objects.get(organisation_id=organisation_id)
                    #         plan_list = plan_obj.package_details
                    #     except:
                    #         plan_obj = None
                    #         plan_list =  {}
                    #
                    #     if len(plan_list) > 0 :
                    #         no_of_plans = int(len(plan_list.keys()))
                    #         new_plan_index = str(no_of_plans + 1)
                    #     else:
                    #         new_plan_index = '1'
                    #
                    #     if plan_name and provider_id:
                    #
                    #         plan_list.update({ new_plan_index:{'plan_name':plan_name,'provider_id':provider_id, 'instructions':instructions,
                    #                                            'package_description':package_description,'plan_price':plan_price,
                    #                                            'timings':timings,'plan_validity':plan_validity, 'description':dict_description}
                    #                          })
                    #         if plan_obj :
                    #             plan_obj.package_details = plan_list
                    #             plan_obj.save()
                    #         else:
                    #             plan_obj = Organisation_plan(organisation_id=organisation_id,package_details=plan_list)
                    #             plan_obj.save()
                    #
                    #         messages.success(request,"Plan Successfully Added")
                    #         return HttpResponseRedirect('/organisation/edit/'+str(organisation_id)+'/?tab=4' )
                    #
                    #     else:
                    #         messages.error(request, "Please provide Provider and Plan name")
                    #         return HttpResponseRedirect('/organisation/edit/' + str(organisation_id) + '/?tab=4')

                    elif request.method == 'POST' and organisation:

                        plan_name = request.POST['package_name']

                        provider_id = request.POST['provider_name']

                        instructions = request.POST['instructions']

                        package_description = request.POST['package_description']

                        investigation = request.POST.getlist('investigations')

                        blood_bank = request.POST.getlist('blood_tests')

                        consultation = request.POST.getlist('consultations')

                        imaging = request.POST.getlist('diabetes_evaluation')

                        plan_price = float(request.POST['package_rates'])

                        timings = request.POST['timings']

                        plan_validity = request.POST['validity']

                        dict_in = {}

                        if(len(investigation) > 0) and investigation[0] != '':
                            for i in range(1, (len(investigation)+1)):
                                dict_in.update({str(i): investigation[i-1]})
                        else:
                            dict_in = {}


                        dict_co = {}
                        if ((len(consultation) > 0) and consultation[0] != ''):
                            for i in range(1, (len(consultation)+1)):
                                dict_co.update({str(i): consultation[i-1]})
                        else:
                            dict_co = {}


                        dict_im = {}
                        if (len(imaging) > 0) and imaging[0] != '':
                            for i in range(1, (len(imaging)+1)):
                                dict_im.update({str(i): imaging[i-1]})
                        else:
                            dict_im = {}


                        dict_bb = {}
                        if (len(blood_bank) > 0) and blood_bank[0] != '':
                            for i in range(1, (len(blood_bank)+1)):
                                dict_bb.update({str(i): blood_bank[i-1]})
                        else:
                            dict_bb = {}


                        dict_description={}
                        dict_description.update({'investigation':dict_in,'consultation':dict_co,
                        'imaging':dict_im,'blood_bank':dict_bb, })

                        try:
                            plan_obj = Organisation_plan.objects.get(organisation_id=organisation_id)
                            try:
                                plan_list = plan_obj.package_details
                            except:
                                plan_list = {'organisation_id': organisation_id, 'plan_details': {}}
                        except:
                            plan_obj = Organisation_plan(organisation_id=organisation_id)
                            plan_list = {'organisation_id': organisation_id, 'plan_details': {}}


                        try:
                            if len(plan_list['plan_details']) > 0 :
                                no_of_plans = int(len(plan_list['plan_details'].keys()))
                                new_plan_index = str(no_of_plans + 1)
                            else:
                                new_plan_index = '1'
                        except:
                            new_plan_index = '1'
                            #plan_list['plan_details']= {}
                            plan_list = {'organisation_id': organisation_id, 'plan_details': {}}
                            #print 'type = ',type(plan_list['plan_details'])

                        if plan_name and provider_id:

                            plan_list['plan_details'].update({ new_plan_index:{'plan_name':plan_name,'provider_id':provider_id, 'instructions':instructions,
                                                               'package_description':package_description,'plan_price':plan_price,
                                                               'timings':timings,'plan_validity':plan_validity, 'description':dict_description}
                                             })
                            if plan_obj :
                                plan_obj.package_details = plan_list
                                plan_obj.save()
                            else:
                                plan_obj = Organisation_plan(organisation_id=organisation_id,package_details=plan_list)
                                plan_obj.save()

                            messages.success(request,"Plan Successfully Added")
                            return HttpResponseRedirect('/organisation/edit/'+str(organisation_id)+'/?tab=4' )

                        else:
                            messages.error(request, "Please provide Provider and Plan name")
                            return HttpResponseRedirect('/organisation/edit/' + str(organisation_id) + '/?tab=4')






                elif tab == '1' and request.method == "POST" and organisation_id:
                    organisation_hidden_id = request.POST.get('organisation_hidden')
                    name = request.POST.get('name').strip()
                    email = request.POST.get('email').strip()
                    pincode = request.POST.get('pincode').strip()
                    website = request.POST.get('website').strip()
                    street = request.POST.get('street').strip()
                    phone = request.POST.get('phone').strip()

                    try:
                        is_emergency = request.POST['is_emergency'].strip()
                    except:
                        is_emergency = 0
                    if is_emergency == '1':
                        is_emergency = True
                    else:
                        is_emergency = False

                    try:
                        burn_center = request.POST.get('burn_center').strip()
                    except:
                        burn_center = False
                    try:
                        trauma_center = request.POST.get('trauma_center').strip()
                    except:
                        trauma_center = False
                    try:
                        ambulance_service = request.POST.get('ambulance_service').strip()
                    except:
                        ambulance_service = False
                    mobile_no = request.POST.get('mobile_no').strip()
                    ambulance_service_no = request.POST.get('ambulance_service_no').strip()
                    niche_department = request.POST.get('niche_department').strip()
                    department = request.POST.getlist('department')
                    doctors_on_board = request.POST.get('doctors_on_board').strip()
                    no_of_beds = request.POST.get('beds').strip()
                    broucher = request.POST.get('broucher').strip()
                    year_of_establishment = request.POST.get('year_of_establishment').strip()
                    package = request.POST.get('package').strip()
                    try:
                        city_id = int(request.POST.get('city_id').strip())
                    except:
                        city_id = ''
                    try:
                        state_id = int(request.POST.get('state_id').strip())
                    except:
                        state_id = ''
                    try:
                        country_id = int(request.POST.get('country_id').strip())
                    except:
                        country_id = ''
                    try:
                        locality_id = int(request.POST.get('locality_id'))
                    except:
                        locality_id = ''

                    try:
                        is_hospital = request.POST['hospital_is']
                        if is_hospital:
                            is_hospital = True
                    except:
                        is_hospital = False
                    try:
                        is_clinical = request.POST['clinical']
                        if is_clinical:
                            is_clinical = True
                    except:
                        is_clinical = False
                    category_str = request.POST.get('category').strip()
                    type = request.POST.getlist('type')
                    if type:
                        type = ','.join(type)
                    facility = request.POST.getlist('facility')
                    if facility:
                        facility = ','.join(facility)
                    if department:
                        department = ','.join(department)
                    other_facility = request.POST.get('other_facility').strip()  # *****added by jaydeep ***#
                    lattitude = request.POST.get('lattitude').strip()
                    longitude = request.POST.get('longitude').strip()
                    emergency_no = request.POST.get('emergency_no').strip()
                    fax = request.POST.get('fax').strip()
                    did = request.POST['did'].strip()
                    extension = request.POST['extension'].strip()

                    cl_obj = OrganisationName.objects.get(pk=organisation_hidden_id)
                    if cl_obj and street and locality_id:
                        cl_obj.city_id = city_id
                        cl_obj.state_id = state_id
                        cl_obj.locality_id = locality_id
                        cl_obj.pincode = pincode
                        cl_obj.country_id = country_id
                        cl_obj.street = street
                        cl_obj.name = name
                        cl_obj.category = category_str
                        cl_obj.facility = facility
                        cl_obj.type = type
                        cl_obj.email = email
                        cl_obj.ambulance_service_no = ambulance_service_no
                        cl_obj.niche_department = niche_department
                        cl_obj.department = department
                        cl_obj.doctors_on_board = doctors_on_board
                        cl_obj.broucher = broucher
                        cl_obj.phone = phone
                        cl_obj.ambulance_service = ambulance_service
                        cl_obj.trauma_center = trauma_center
                        cl_obj.burn_center = burn_center
                        cl_obj.mobile_no = mobile_no
                        cl_obj.emergency_no = emergency_no
                        cl_obj.year_of_establishment = year_of_establishment
                        cl_obj.package = package
                        cl_obj.website = website
                        cl_obj.longitude = longitude
                        cl_obj.latitude = lattitude
                        cl_obj.is_clinic = is_clinical
                        cl_obj.is_hospital = is_hospital
                        cl_obj.fax = fax
                        cl_obj.other_facility = other_facility
                        cl_obj.no_of_beds = no_of_beds
                        cl_obj.is_emergency = is_emergency
                        cl_obj.did = did
                        cl_obj.extension = extension
                        cl_obj.save()
                        messages.success(request, "Successfully Updated")


                        return HttpResponseRedirect("/organisation/edit/" + str(cl_obj.id) + '/?tab=1')
                    else:
                        messages.error(request, "Please Enter required Field")
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                # elif tab == '5':
                #     organisation = None
                #     profile_img = ''
                #
                #     try:
                #         organisation = OrganisationName.objects.get(id=organisation_id)
                #         image_data = request.FILES.get('image_data')
                #     except :
                #         image_data = None
                #         organisation = None
                #
                #     if request.method =='POST' and image_data and organisation:
                #
                #         try:
                #             profile_img_obj = Organisation_profile_img.objects.filter(organisation_id=organisation_id)
                #         except:
                #             pass
                #         if profile_img_obj :
                #             for obj in profile_img_obj:
                #                 obj.delete()
                #
                #         profile_img_obj = Organisation_profile_img(organisation_id=organisation_id,image=image_data)
                #         profile_img_obj.save()
                #         messages.success(request,"Profile Image successfully updated")
                #         return render(request, 'data_management/organisation_data/organisation_edit.html',
                #                       {'organisation_data': organisation_data,
                #                        'department': department,
                #                        'facility': facility,
                #                        'tab': tab,
                #                        'reviewer_user_data': reviewer_user_data,
                #                        'publisher_user_data': publisher_user_data,
                #                        'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                #                        'profile_img_obj': profile_img_obj,'back_to_url':back_to_url,
                #                        'getcoordinates': getcoordinates, 'setcoordinates': setcoordinates,
                #                        'coordinate_list':coordinate_list, 'hostport':hostport})
                #
                #
                #     elif request.method =='GET' and organisation:
                #         try:
                #             profile_img_obj =  Organisation_profile_img.objects.get(organisation_id=organisation_id)
                #         except Exception as e:
                #
                #             profile_img_obj = None
                #         return render(request, 'data_management/organisation_data/organisation_edit.html',
                #                       {'organisation_data': organisation_data,
                #                                        'department': department,
                #                                        'facility': facility,
                #                                        'tab': tab,
                #                                        'reviewer_user_data': reviewer_user_data,
                #                                        'publisher_user_data': publisher_user_data,
                #                                        'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                #                                        'profile_img_obj':profile_img_obj,'back_to_url':back_to_url,
                #                        'getcoordinates': getcoordinates, 'setcoordinates': setcoordinates,
                #                        'coordinate_list':coordinate_list, 'hostport':hostport})
                #
                #
                #
                #     else:
                #         messages.error(request, "not assign Organisation Found")
                #         is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                #         if len(is_publisher):
                #             return HttpResponseRedirect(reverse('publisher-organisation-listing'))
                #
                #         return HttpResponseRedirect(reverse('organisation-listing'))
                #
                #

                elif tab == '6':
                    organisation = None
                    delete = None
                    branchid = None



                    try:
                        organisation = OrganisationName.objects.get(id=organisation_id)
                    except :
                        organisation = None
                    if request.method =='POST' and organisation:
                        address = request.POST.get('aaddress').strip()
                        telephone1 = request.POST.get('atelephone1').strip()
                        telephone2 = request.POST.get('atelephone2').strip()
                        telephone3 = request.POST.get('atelephone3').strip()
                        mobile = request.POST.get('amobile').strip()
                        country_id = request.POST.get('acountry_id').strip()
                        state_id = request.POST.get('astate_id').strip()
                        city_id = request.POST.get('acity_id').strip()
                        locality_id = request.POST.get('alocality_id').strip()
                        pincode = request.POST.get('apincode').strip()
                        dict_d = {'organisation_id': organisation_id, 'branch_details': {}}
                        try:
                            branch_obj = Organisation_branches.objects.get(organisation_id=organisation_id)
                        except :
                            branch_obj = None
                        if branch_obj :
                            try :
                                try:
                                    dict_d = branch_obj.branches
                                except:
                                    dict_d = {'organisation_id': organisation_id, 'branch_details': {}}

                                dict_dtemp = dict_d['branch_details']
                                temp = len(dict_dtemp.keys())
                                if temp > 0:
                                    index = int(temp)
                                else:
                                    index = 0

                                #index = int(dict_d['branch_details'].keys()[-1])
                                index += 1
                            except Exception as e :
                                #print e
                                dict_d = {'organisation_id': organisation_id, 'branch_details':{}}
                                index = 1

                            dict_d['branch_details'].update({index: {'address': address, 'telephone1': telephone1, 'telephone2': telephone2,
                                            'telephone3 ': telephone3, 'mobile': mobile, 'country_id': country_id,
                                            'state_id': state_id, 'city_id': city_id,
                                            'locality_id': locality_id, 'pincode': pincode}})
                            branch_obj.branches = dict_d
                            branch_obj.save()
                            messages.success(request,'Branch Successfully Added')

                            return HttpResponseRedirect('/organisation/edit/'+str(organisation_id)+'/?tab=6')

                        else :
                            branch_obj =  Organisation_branches(organisation_id=organisation_id,branches={})
                            dict_d = {'organisation_id':organisation_id,'branch_details':{}}
                            dict_d['branch_details'].update({1:{'address':address,'telephone1':telephone1,'telephone2':telephone2,
                                'telephone3 ':telephone3,'mobile':mobile,'country_id':country_id,'state_id':state_id,'city_id':city_id,
                                 'locality_id':locality_id ,'pincode':pincode}})
                            branch_obj.branches = dict_d
                            branch_obj.save()
                            messages.success(request, 'Branch Successfully Added')
                            return HttpResponseRedirect('/organisation/edit/'+str(organisation_id)+'/?tab=6')


                    elif request.method =='GET' and organisation:

                        try:
                            delete = request.GET.get('delete')
                            branchid = request.GET.get('branchid')
                        except:
                            delete = None
                            branchid = None
                        if delete and branchid:
                            try:
                                branch_obj_full = Organisation_branches.objects.get(organisation_id=organisation_id)
                                branch_obj = branch_obj_full.branches
                            except:
                                branch_obj = {'organisation_id': organisation_id, 'branch_details':{}}
                            try:
                                if  branchid in list(branch_obj['branch_details'].keys()):
                                    del branch_obj['branch_details'][branchid]
                                    branch_obj_full.branches = branch_obj
                                    branch_obj_full.save()
                                    messages.success(request, 'Branch Successfully Deleted')
                                    return HttpResponseRedirect('/organisation/edit/' + str(organisation_id) + '/?tab=6')
                            except:
                                messages.success(request, 'Something Bad Happened')
                                return HttpResponseRedirect('/organisation/edit/' + str(organisation_id) + '/?tab=6')

                        try:
                            branch_obj_full =  Organisation_branches.objects.get(organisation_id=organisation_id)
                            branch_obj = branch_obj_full.branches['branch_details']
                        except:
                            branch_obj = None
                        country = Country.objects.all()
                        state= State.objects.all()
                        city = City.objects.all()
                        locality= Locality.objects.all()
                        return render(request, 'data_management/organisation_data/organisation_edit.html',
                                      {'organisation_data': organisation_data,
                                                       'department': department,
                                                       'facility': facility,
                                                       'tab': tab,
                                                       'reviewer_user_data': reviewer_user_data,
                                                       'publisher_user_data': publisher_user_data,
                                                       'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                                       'country':country,'city':city, 'state':state, 'locality':locality,
                                                       'branch_obj':branch_obj,
                                                       'organisation_id':organisation_id,
                                                       'organisation':organisation,'back_to_url':back_to_url,
                                       'getcoordinates': getcoordinates, 'setcoordinates': setcoordinates,
                                       'coordinate_list':coordinate_list, 'hostport':hostport})



                    else:
                        messages.error(request, "Method Not Allowed")
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            return HttpResponseRedirect(reverse('publisher-organisation-listing'))

                        return HttpResponseRedirect(reverse('organisation-listing'))

                elif tab == '7':
                    org_object = OrganisationName.objects.get(id=organisation_id)
                    country = Country.objects.filter(delete=False)
                    state = State.objects.filter(delete=False)
                    city = City.objects.filter(delete=False)
                    locality = Locality.objects.filter(delete=False)
                    department_list = Department.objects.filter(delete=False).order_by('name')

                    try:
                        attach_obj = Attach_therapist_organisation.objects.filter(organisation_id=organisation_id)
                    except:
                        attach_obj = []
                    return render(request, 'data_management/organisation_data/organisation_edit.html',
                                  {'organisation_data': organisation_data,
                                   'department_list': department_list,
                                   'tab': tab,
                                   'reviewer_user_data': reviewer_user_data,
                                   'publisher_user_data': publisher_user_data,
                                   'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                   'country': country, 'city': city, 'state': state, 'locality': locality,
                                   'organisation_id': organisation_id,'org_object':org_object,
                                   'back_to_url': back_to_url,'attach_obj':attach_obj,
                                   'getcoordinates': getcoordinates, 'setcoordinates': setcoordinates,
                                   'coordinate_list':coordinate_list, 'hostport':hostport})


                elif tab == '8':
                    org_object = OrganisationName.objects.get(id=organisation_id)
                    country = Country.objects.filter(delete=False)
                    state = State.objects.filter(delete=False)
                    city = City.objects.filter(delete=False)
                    locality = Locality.objects.filter(delete=False)
                    department_list = Department.objects.filter(delete=False).order_by('name')

                    try:
                        attach_obj2 = Attach_dietitian_organisation.objects.filter(organisation_id=organisation_id)
                    except:
                        attach_obj2 = []
                    return render(request, 'data_management/organisation_data/organisation_edit.html',
                                  {'organisation_data': organisation_data,
                                   'department_list': department_list,
                                   'tab': tab,
                                   'reviewer_user_data': reviewer_user_data,
                                   'publisher_user_data': publisher_user_data,
                                   'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                   'country': country, 'city': city, 'state': state, 'locality': locality,
                                   'organisation_id': organisation_id, 'org_object': org_object,
                                   'back_to_url': back_to_url, 'attach_obj2': attach_obj2,
                                   'getcoordinates': getcoordinates, 'setcoordinates': setcoordinates,
                                   'coordinate_list':coordinate_list, 'hostport':hostport})

                # ######################################
                elif tab == '9':
                    country = Country.objects.filter(delete=False)
                    state = State.objects.filter(delete=False)
                    city = City.objects.filter(delete=False)
                    locality = Locality.objects.filter(delete=False)
                    department_list = Department.objects.filter(delete=False).order_by('name')


                    if request.method == 'GET':
                        organisation_data = OrganisationName.objects.filter(id=organisation_id)

                        fields_json = organisation_data[0].verified_fields

                        full_list = []
                        verified_list = []
                        for i in fields_json:
                            for k, v in i.items():
                                full_list.append(k)
                                if v == True:
                                    verified_list.append(k)
                        return render(request, 'data_management/organisation_data/organisation_edit.html',
                                      {
                                       'tab': tab,
                                       'reviewer_user_data': reviewer_user_data,
                                       'publisher_user_data': publisher_user_data,
                                       'user_data_complete': user_data_complete,
                                       'organisation_id': organisation_id, 'organisation_data': organisation_data,
                                       'back_to_url': back_to_url,
                                       'full_list': full_list,'verified_list': verified_list,
                                       'country': country, 'city': city, 'state': state, 'locality': locality,
                                       'department_list': department_list,'getcoordinates':getcoordinates,'setcoordinates':setcoordinates,
                                          'coordinate_list':coordinate_list, 'hostport':hostport
                                      })

                    elif request.method == 'POST':
                        field_names = request.POST.getlist('vfields')
                        org_object = OrganisationName.objects.filter(id=organisation_id)
                        fields_json = org_object[0].verified_fields
                        full_list = []
                        for i in fields_json:
                            for k, v in i.items():
                                full_list.append(k)
                        for i in full_list:
                            if i in field_names:
                                c = -1
                                for x in fields_json:
                                    c += 1
                                    for k, v in x.items():
                                        if k == i:
                                            fields_json[c] = {k: True}
                            else:
                                c = -1
                                for x in fields_json:
                                    c += 1
                                    for k, v in x.items():
                                        if k == i:
                                            fields_json[c] = {k: False}

                        checkj = json.dumps(fields_json)
                        org_object.update(verified_fields=fields_json)
                        messages.success(request, "Successfully Updated Hospital Field Meta Data")
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                # #######################################


                else:
                    messages.error(request, "No method available")
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-organisation-listing'))


                    return HttpResponseRedirect(reverse('organisation-listing'))

        else:
            messages.error(request, "not assign Organisation Found")
            is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-organisation-listing'))

            return HttpResponseRedirect(reverse('organisation-listing'))
    except Exception as e:
        #print e
        raise Http404


####################################################################
# Name - schedule_hospital                                          #
# Owner - Jitendra Dixit                                           #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@csrf_exempt
def schedule_hospital(request, organisation_id=None):
    try:
        if check_organisation_for_schedule(organisation_id, request.user.id, request.user.is_superuser):
            if request.method == "GET":
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404
                schedule_obj = OrganisationName.objects.filter(id=organisation_id)
                if schedule_obj:
                    schedule_list = schedule_obj[0].schedule_data
                    if type(schedule_list) is str:
                        schedule_list = json.loads(schedule_list)
                    schedule_id = schedule_obj[0].id

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)

                if len(is_publisher):
                    user_is_publisher = True

                return render(request, 'data_management/organisation_data/schedule_form.html',
                              dict(
                                  schedule_obj=schedule_obj[0],
                                  schedule_list=schedule_list,
                                  schedule_id=schedule_id,
                                  day_list=day_list,
                                  organisation_id=organisation_id,user_is_publisher=user_is_publisher
                              ))

            elif request.method == "POST":
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404
                schedule_obj = OrganisationName.objects.filter(id=organisation_id)
                if len(schedule_obj) == 1:
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj[0].schedule_data
                    if schedule_data == None:
                        schedule_data = []
                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    unique_id = str(uuid.uuid4())
                    for i in range(0, len(start_time)):
                        timing_dict = {}
                        timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                        timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                        timing_list.append(timing_dict)
                    add_schedule_dict['from_day'] = from_day
                    add_schedule_dict['to_day'] = to_day
                    add_schedule_dict['timing'] = timing_list
                    add_schedule_dict['id'] = unique_id
                    schedule_data.append(add_schedule_dict)
                    schedule_obj.update(schedule_data=schedule_data)
                return HttpResponseRedirect('/organisation/schedule/' + str(organisation_id) + '/')
        else:
            return HttpResponseRedirect(reverse('organisation_listing'))

    except Exception as e:
        raise Http404

####################################################################
# Name - schedule_hospital                                         #
# By : Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def getcoordinatess(request, organisation_id=None):
    try:
        try:
            organisation_id = int(organisation_id)
            orggg=  OrganisationName.objects.get(id = organisation_id )
        except:
            raise Http404
        try:
            AddressForApi = request.POST.get('AddressForApi')
        except:
            AddressForApi = None

        import requests
        mygoogleapibase = 'https://maps.googleapis.com/maps/api/geocode/json?address='
        mygoogleapikey = '&key=AIzaSyBSgwtACK4WPjYKy837g7fgaeYf6JDjxkM'
        if AddressForApi and AddressForApi != '':
            AddressForApi = AddressForApi.split(' ')
            AddressForApi = [mm.strip() for mm in AddressForApi]
            AddressForApi =  "+".join(AddressForApi)
        mygoogleapiurl = mygoogleapibase+AddressForApi+mygoogleapikey
        r = requests.post(mygoogleapiurl)
        import json
        rrcc = json.loads(r.content)
        coordinate_list = []
        if rrcc['status'] == 'OK':
            for i in rrcc['results']:
                formatted_address = i['formatted_address']
                latitude = i['geometry']['location']['lat']
                longitude = i['geometry']['location']['lng']
                coordinate_list.append({'formatted_address': formatted_address, 'latitude': latitude, 'longitude': longitude})
            #print rrcc
        else:
            coordinate_list = None

        request.session['coordinate_list'] = coordinate_list
        return HttpResponseRedirect(reverse('organisation-listing-edit',args=[organisation_id]))
    except Exception as e:
        messages.error(request,e)
        return HttpResponseRedirect(reverse('organisation-listing-edit', args=[organisation_id]))

####################################################################
# Name - discardcoordinatess                                       #
# By : Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def discardcoordinatess(request,organisation_id=None):
    try:
        request.session['coordinate_list'] = None
        return HttpResponseRedirect(reverse('organisation-listing-edit', args=[organisation_id]))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - savecoordinatess                                         #
# By : Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def savecoordinatess(request, organisation_id=None):
    try:
        try:
            lat = request.POST.get('Latitude')
            if lat == '' or lat == ' ':
                lat = None
        except:
            lat = None
        try:
            lng = request.POST.get('Longitude')
            if lng == '' or lng == ' ':
                lng = None
        except:
            lng = None
        if lng != None and lat != None:
            orgg = OrganisationName.objects.get(id=int(organisation_id) )
            orgg.latitude = lat
            orgg.longitude = lng
            orgg.save()
            request.session['coordinate_list'] = None
            messages.success(request,'Succesfully Saved Hospital Co-ordinates')
        else:
            messages.error(request, 'One or both Co-ordinate value(s) missing')
        return HttpResponseRedirect(reverse('organisation-listing-edit', args=[organisation_id]))
    except Exception as e:
        #print e
        raise Http404



####################################################################
# Name - get_location                                              #
# Owner - Visnu Badal                                              #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def get_location(request):
    try:
        response = {}
        if request.method == "POST":
            try:
                city_id = request.POST['city_id'].strip()
            except:
                city_id = request.POST['id'].strip()
            if city_id is not None:
                location_obj = Locality.objects.filter(city_id=city_id,delete=False).values('id', 'name')
                if len(location_obj):
                    response['location_list'] = list(location_obj)
                else:
                    response['location_list'] = list(location_obj)
                    response['Message'] = 'No Location Present...!'
            else:
                response['Message'] = 'Please select City'
        data = json.dumps(response)
    except Exception as e:
        raise Http404
    return HttpResponse(data)



####################################################################
# Name - get_location                                              #
# NISHANK                                                          #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@csrf_exempt
def get_location_byname(request):
    try:
        response = {}
        if request.method == "POST":
            try:
                acity_id = request.POST['acity_id'].strip()
            except:
                acity_id = request.POST['name'].strip()
            if acity_id is not None:
                acity_id = acity_id.strip()
                location_obj = Locality.objects.filter(city__name__iexact=acity_id).values('name')
                if len(location_obj):
                    response['location_list'] = list(location_obj)
                else:
                    response['location_list'] = list(location_obj)
                    response['Message'] = 'No Location Present...!'
            else:
                response['Message'] = 'Please select City'
        data = json.dumps(response)
    except Exception as e:
        raise Http404
    return HttpResponse(data)


####################################################################
# Name - organisation_address                                      #
# Owner - Visnu Badal                                              #
# Review by - ?                                                    #
#                                                                  #
####################################################################

@login_required(login_url='/')
@csrf_exempt
def organisation_address(request):
    try:
        if request.method == "GET":
            try:
                hospital_id = int(request.GET['id'].strip())
            except:
                hospital_id = None
            response1 = {}
            if hospital_id is not None:
                try:
                    hospital_obj = OrganisationName.objects.filter(pk=hospital_id).values('street',
                                                                                          'city__name',
                                                                                          'state__name',
                                                                                          'pincode',
                                                                                          'locality__name',
                                                                                          'email',
                                                                                          'emergency_no',
                                                                                          'is_hospital',
                                                                                          'is_clinic')
                    response1['address'] = list(hospital_obj)
                except Exception as e:
                    response1['Message'] = "Something Bad happened"
            else:
                response1['Message'] = "Something Bad happened"

            response = json.dumps(response1)
            return HttpResponse(response)

    except Exception as e:
        raise Http404


# ------------------------------ filter city on selection of state -------------------------------#

@login_required(login_url='/')
@csrf_exempt
def get_city(request):
    try:
        response = {}
        if request.method == "POST":
            try:
                state_id = request.POST['state_id'].strip()
            except:
                state_id = request.POST['id'].strip()
            try:
                astate_id = request.POST['astate_id'].strip()
                fromname  = request.POST['formDATA[fromname]']
            except:
                astate_id = request.POST['id'].strip()

            if state_id is not None:
                city_obj = City.objects.filter(state_id=state_id,delete=False).values('id', 'name')
                if len(city_obj):
                    response['city_list'] = list(city_obj)
                else:
                    response['Message'] = 'No City Present...!'
            else:
                response['Message'] = 'Please select State'
        data = json.dumps(response)
    except Exception as e:
        raise Http404
    return HttpResponse(data)

# ------------------------------ filter city on selection of state -----27Nov NISHANK--------------------------#

@login_required(login_url='/')
@csrf_exempt
def get_city_byname(request):
    try:
        response = {}
        if request.method == "POST":
            try:
                astate_id = request.POST['astate_id'].strip()
                #fromname  = request.POST['formDATA[fromname]']
            except:
                astate_id = request.POST['name'].strip()

            if astate_id is not None:
                city_obj = City.objects.filter(state__name__iexact=astate_id).values('name')
                if len(city_obj):
                    response['city_list'] = list(city_obj)
                else:
                    response['Message'] = 'No City Present...!'
            else:
                response['Message'] = 'Please select State'
        data = json.dumps(response)
    except Exception as e:
        raise Http404
    return HttpResponse(data)


@csrf_exempt
def data_pooling_in_cms(request):
    response = {}
    try:
        response1 = {}
        doctor_data = {}
        if request.method == "GET":
            return HttpResponse("forbidden")
        if request.method == 'POST':
            data = json.loads(request.body)
            landingPageData = data['landingPageData']
            doctor_data['doctor_unique_id'] = data['_id']
            doctor_data['doctor_name'] = landingPageData['doctor_name']
            doctor_data['registrations'] = landingPageData['registrations']
            doctor_data['membership'] = landingPageData['membership']
            doctor_data['award_recognisation'] = landingPageData['award_recognisation']
            doctor_data['specialty'] = landingPageData['specialty']
            doctor_data['education'] = landingPageData['education']
            doctor_data['experience'] = landingPageData['experience']
            doctor_data['service'] = landingPageData['service']
            doctor_data['category'] = landingPageData['category']
            doctor_data['city'] = landingPageData['city']
            doctor_data['doc_qualifications'] = data['doc_qualifications']
            doctor_data['doc_exp_years'] = data['doc_exp_years']
            doctor_data['doctor_photo_url'] = data['doctor_photo_url']
            doctor_data['zone_location'] = data['zone_location']
            doctor_data['zone'] = data['zone']
            doctor_data['clinical_detail'] = landingPageData['clinical_detail']
            # ************************************** Zone ***************************#
            zone_obj = Zone.objects.filter(name__iexact=doctor_data['zone'])
            zone_id = ''
            if zone_obj:
                zone_id = zone_obj[0].id
            else:
                zone_obj = Zone(name=doctor_data['zone'])
                zone_obj.save()
                zone_id = zone_obj.id

            # ************************************** Zone Location ***************************#
            zone_location_obj = ZoneLocation.objects.filter(zone_id=zone_id, name__iexact=doctor_data['zone_location'])
            zone_location_id = ''
            if zone_location_obj:
                zone_location_id = zone_location_obj[0].id
            else:
                zone_location_obj = ZoneLocation(zone_id=zone_id, name=doctor_data['zone_location'])
                zone_location_obj.save()
                zone_location_id = zone_location_obj.id

            category_obj = Category.objects.filter(name__iexact=doctor_data['category'])
            category_id = '',
            if len(category_obj):
                category_id = category_obj[0].id
            else:
                category_obj = Category(name=doctor_data['category'])
                category_obj.save()
                category_id = category_obj.id

            # *******************************  serviceooferd *****************************#
            specialtyArray = []
            specialty_ids = '',
            for specialty in doctor_data['specialty']:
                specialty_obj = Speciality.objects.filter(name__iexact=specialty, category_id=category_id)
                specialty_id = '',
                if len(specialty_obj):
                    specialty_id = specialty_obj[0].id
                else:
                    specialty_obj = Speciality(name=specialty, category_id=category_id)
                    specialty_obj.save()
                    specialty_id = specialty_obj.id
                specialtyArray.append(str(specialty_id))

            # ***************************** speciality**************************************#
            serviceOfferedArray = []
            serviceOffered_ids = '',
            for service in doctor_data['service']:
                service_obj = Service_Offred.objects.filter(name__iexact=service, category_id=category_id)
                service_id = '',
                if len(service_obj):
                    service_id = service_obj[0].id
                else:
                    service_obj = Service_Offred(name=service, category_id=category_id)
                    service_obj.save()
                    service_id = service_obj.id
                serviceOfferedArray.append(str(service_id))

            if specialtyArray:
                specialty_ids = ','.join(specialtyArray)
            else:
                specialty_ids = ''
            if serviceOfferedArray:
                serviceOffered_ids = ','.join(serviceOfferedArray)
            else:
                serviceOffered_ids = ''
            doctor_id = ''
            Doctor_obj = Doctor.objects.filter(name__iexact=doctor_data['doctor_name'], zone_id=zone_id,
                                               zone_location_id=zone_location_id,
                                               image_url=doctor_data['doctor_photo_url'])
            if not Doctor_obj:
                Doctor_obj = Doctor(
                    stage_id=1,  # default stage
                    name=doctor_data['doctor_name'],
                    image_url=doctor_data['doctor_photo_url'],
                    registration_data=doctor_data['registrations'],
                    qualification_data=doctor_data['doc_qualifications'],
                    doctor_experience_year=doctor_data['doc_exp_years'],
                    category_id=category_id,
                    speciality=specialty_ids,
                    zone_id=zone_id,
                    zone_location_id=zone_location_id,
                    service_offered=serviceOffered_ids
                )
                Doctor_obj.save()
                doctor_id = Doctor_obj.id
                # ================ doctor membership data *****************/
                for membership in doctor_data['membership']:
                    membership_obj = Membership(doctor_id=doctor_id, name=membership)
                    membership_obj.save()

                # ================ doctor award_recognisation data *****************/
                for award_recognisation in doctor_data['award_recognisation']:
                    award_recognisation_obj = RewardRecognisation(doctor_id=doctor_id, reward_data=award_recognisation)
                    award_recognisation_obj.save()
                # ================ doctor award_recognisation data *****************/
                for education in doctor_data['education']:
                    education_obj = Doctor_Education(doctor_id=doctor_id, education_data=education)
                    education_obj.save()

                # ================ doctor award_recognisation data *****************/
                for experience in doctor_data['experience']:
                    experience_obj = Doctor_Experience(doctor_id=doctor_id, experience_data=experience)
                    experience_obj.save()

            else:
                response1['Message'] = "All Ready add in our data base"
                response = json.dumps(response1)
                return HttpResponse(response)

            for organisation in doctor_data['clinical_detail']:
                city_obj = City.objects.filter(name__iexact=organisation['city'])

                city_id = '',
                state_id = '',
                country_id = '',
                if len(city_obj):
                    city_id = city_obj[0].id
                    country_id = city_obj[0].state.country_id
                    state_id = city_obj[0].state_id
                location_id = ''
                location_obj = Locality.objects.filter(name__iexact=organisation['location'], city_id=city_id)
                if len(location_obj):
                    location_id = location_obj[0].id
                else:

                    location_obj = Locality(name=organisation['location'], city_id=city_id)
                    location_obj.save()
                    location_id = location_obj.id
                organization_id = ''
                Organization_obj = OrganisationName.objects.filter(name__iexact=organisation['clinic_name'],
                                                                   locality_id=location_id,
                                                                   street=organisation['clinical_address'])
                if Organization_obj:
                    organization_id = Organization_obj[0].id
                else:
                    Organization_obj = OrganisationName(
                        stage_id=4,
                        name=organisation['clinic_name'],
                        locality_id=location_id,
                        street=organisation['clinical_address'], city_id=city_id,
                        state_id=state_id, country_id=country_id,
                        latitude=organisation['clinic_lat_long']['latitude'],
                        longitude=organisation['clinic_lat_long']['longitude']
                    )
                    Organization_obj.save()
                    organization_id = Organization_obj.id
                if organization_id:
                    attach_id = ''
                    AttachWithDoctor_obj = AttachWithDoctor.objects.filter(doctor_id=doctor_id,
                                                                           organisation_id=organization_id)
                    if AttachWithDoctor_obj:
                        attach_id = AttachWithDoctor_obj[0].id
                    else:
                        AttachWithDoctor_obj = AttachWithDoctor(doctor_id=doctor_id, organisation_id=organization_id,
                                                                consultancy_fee=organisation['consulting_charge'])
                        AttachWithDoctor_obj.save()
                        attach_id = AttachWithDoctor_obj.id
                        # *********************** Attach with doctor END **********************************#
                    if attach_id and doctor_id:
                        schedule_obj = Schedule(doctor_id=doctor_id, organisation_id=organization_id,
                                                schedule_data=organisation['parsedTimeStr'])
                        schedule_obj.save()

            try:
                response1['Message'] = "Successfully Add in Database"
            except Exception as e:
                response1['Message'] = "Some error occurred"
            response = json.dumps(response1)

    except Exception as e:

        return HttpResponse("server error occurred")
    return HttpResponse(response)


def update(request):
    Oranisation_obj = OrganisationName.objects.filter(stage_id=4)
    if Oranisation_obj:
        Oranisation_obj.update(stage_id=2)



""" Life , home and Servie plan mark views """

####################################################################
# Name - mark_as_complete_caller_life_plan                         #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_life_plan(request):
    try:
        if request.method == 'POST':
            life_plan_id = request.POST['life-plan-id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            life_plan_obj = ServicePlan.objects.get(id=life_plan_id,is_life_service=True)

            if life_plan_obj and reviewer_data_id and valid_choice_id:

                try:
                    life_plan_obj.current_user = User.objects.get(id=reviewer_data_id)

                    life_plan_obj.previous_user = request.user.id
                    life_plan_obj.stage = Stage.objects.get(pk=3)
                    life_plan_obj.free_text = ''
                    life_plan_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    life_plan_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('life-service-plan-listing'))
                except:
                    raise Http404

            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('life-service-plan-listing'))
    except Exception as aa:

        return HttpResponse("Something Bad Happened")



####################################################################
# Name - mark_as_reverse_caller_life_plan                           #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_life_plan(request):
    try:
        if request.method == 'POST':
            life_plan_id = request.POST['life-plan-id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            life_plan_obj = ServicePlan.objects.get(id=life_plan_id,is_life_service=True)


            if life_plan_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    life_plan_obj.current_user = User.objects.get(id=caller_data_id)

                    life_plan_obj.previous_user = request.user.id

                    life_plan_obj.stage = Stage.objects.get(pk=2)
                    life_plan_obj.free_text = free_text

                    life_plan_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-lifeplan-listing'))
                    return HttpResponseRedirect(reverse('life-service-plan-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-lifeplan-listing'))
        return HttpResponseRedirect(reverse('life-service-plan-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_reverse_reviewer_life_plan                          #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_life_plan(request):
    try:
        if request.method == 'POST':
            life_plan_id = request.POST['life-plan-id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            life_plan_obj = ServicePlan.objects.get(id=life_plan_id,is_life_service=True)

            if life_plan_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    life_plan_obj.current_user = User.objects.get(id=reviewer_data_id)
                    life_plan_obj.previous_user = request.user.id
                    life_plan_obj.stage = Stage.objects.get(pk=3)
                    life_plan_obj.free_text = free_text
                    life_plan_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-lifeplan-listing'))
                    return HttpResponseRedirect(reverse('life-service-plan-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-lifeplan-listing'))
        return HttpResponseRedirect(reverse('life-service-plan-listing'))
    except Exception as e:
        raise Http404



####################################################################
# Name - mark_as_complete_reviewer_life_plan                        #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_life_plan(request):
    try:
        if request.method == 'POST':
            life_plan_id = request.POST['life-plan-id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            life_plan_obj = ServicePlan.objects.get(id=life_plan_id,is_life_service=True)

            if life_plan_obj and publisher_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    life_plan_obj.current_user = User.objects.get(id=publisher_data_id)

                    life_plan_obj.previous_user = request.user.id
                    life_plan_obj.stage = Stage.objects.get(pk=4)
                    life_plan_obj.free_text = ''
                    life_plan_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    life_plan_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('life-service-plan-listing'))

                except:

                    pass
            else:

                messages.error(request, 'Select Reviewer and Validation Choice')

        else:

            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('life-service-plan-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_complete_publisher_life_plan                       #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_life_plan(request):
    try:
        if request.method == 'POST':
            life_plan_id = request.POST['life-plan-id']
            life_plan_obj = ServicePlan.objects.get(id=life_plan_id,is_life_service=True)

            if life_plan_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    life_plan_obj.stage = Stage.objects.get(pk=5)

                    life_plan_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-lifeplan-listing'))
                    return HttpResponseRedirect(reverse('life-service-plan-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')

        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-lifeplan-listing'))
        return HttpResponseRedirect(reverse('life-service-plan-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name - mark_as_complete_caller_home_plan                         #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_home_plan(request):
    try:
        if request.method == 'POST':
            home_plan_id = request.POST['home-plan-id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            home_plan_obj = ServicePlan.objects.get(id=home_plan_id,is_home_service=True)

            if home_plan_obj and reviewer_data_id and valid_choice_id:

                try:
                    home_plan_obj.current_user = User.objects.get(id=reviewer_data_id)

                    home_plan_obj.previous_user = request.user.id
                    home_plan_obj.stage = Stage.objects.get(pk=3)
                    home_plan_obj.free_text = ''
                    home_plan_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    home_plan_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('home-service-plan-listing'))
                except Exception as aaa:

                    raise Http404

            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('home-service-plan-listing'))
    except Exception as e:

        return HttpResponse("Something Bad Happened")



####################################################################
# Name - mark_as_reverse_caller_home_plan                           #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_home_plan(request):
    try:
        if request.method == 'POST':
            home_plan_id = request.POST['home-plan-id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            home_plan_obj = ServicePlan.objects.get(id=home_plan_id,is_home_service=True)

            if home_plan_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    home_plan_obj.current_user = User.objects.get(id=caller_data_id)
                    home_plan_obj.previous_user = request.user.id
                    home_plan_obj.stage = Stage.objects.get(pk=2)
                    home_plan_obj.free_text = free_text

                    home_plan_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-homeplan-listing'))
                    return HttpResponseRedirect(reverse('home-service-plan-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-homeplan-listing'))
        return HttpResponseRedirect(reverse('home-service-plan-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_reverse_reviewer_home_plan                          #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_home_plan(request):
    try:
        if request.method == 'POST':
            home_plan_id = request.POST['home-plan-id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            home_plan_obj = ServicePlan.objects.get(id=home_plan_id,is_home_service=True)

            if home_plan_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    home_plan_obj.current_user = User.objects.get(id=reviewer_data_id)
                    home_plan_obj.previous_user = request.user.id
                    home_plan_obj.stage = Stage.objects.get(pk=3)
                    home_plan_obj.free_text = free_text
                    home_plan_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-homeplan-listing'))
                    return HttpResponseRedirect(reverse('home-service-plan-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-homeplan-listing'))
        return HttpResponseRedirect(reverse('home-service-plan-listing'))
    except Exception as e:
        raise Http404



####################################################################
# Name - mark_as_complete_reviewer_home_plan                        #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_home_plan(request):
    try:
        if request.method == 'POST':
            home_plan_id = request.POST['home-plan-id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            home_plan_obj = ServicePlan.objects.get(id=home_plan_id,is_home_service=True)

            if home_plan_obj and publisher_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    home_plan_obj.current_user = User.objects.get(id=publisher_data_id)

                    home_plan_obj.previous_user = request.user.id
                    home_plan_obj.stage = Stage.objects.get(pk=4)
                    home_plan_obj.free_text = ''
                    home_plan_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    home_plan_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('home-service-plan-listing'))

                except:

                    pass
            else:

                messages.error(request, 'Select Reviewer and Validation Choice')

        else:

            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('home-service-plan-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_complete_publisher_home_plan                       #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_home_plan(request):
    try:
        if request.method == 'POST':
            home_plan_id = request.POST['home-plan-id']
            home_plan_obj = ServicePlan.objects.get(id=home_plan_id,is_home_service=True)

            if home_plan_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    home_plan_obj.stage = Stage.objects.get(pk=5)

                    home_plan_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-homeplan-listing'))
                    return HttpResponseRedirect(reverse('home-service-plan-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-homeplan-listing'))
        return HttpResponseRedirect(reverse('home-service-plan-listing'))
    except Exception as e:
        raise Http404



####################################################################
# Name - mark_as_complete_caller_enterprise_plan                   #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_enterprise_plan(request):
    try:
        if request.method == 'POST':
            enterprise_plan_id = request.POST['enterprise-plan-id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            enterprise_plan_obj = ServicePlan.objects.get(id=enterprise_plan_id,is_enterprise_service=True)

            if enterprise_plan_obj and reviewer_data_id and valid_choice_id:

                try:
                    enterprise_plan_obj.current_user = User.objects.get(id=reviewer_data_id)

                    enterprise_plan_obj.previous_user = request.user.id
                    enterprise_plan_obj.stage = Stage.objects.get(pk=3)
                    enterprise_plan_obj.free_text = ''
                    enterprise_plan_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    enterprise_plan_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('enterprise-service-plan-listing'))
                except:
                    raise Http404

            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('enterprise-service-plan-listing'))
    except Exception as e:

        return HttpResponse("Something Bad Happened")



####################################################################
# Name - mark_as_reverse_caller_enterprise_plan                    #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_enterprise_plan(request):
    try:
        if request.method == 'POST':
            enterprise_plan_id = request.POST['enterprise-plan-id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            enterprise_plan_obj = ServicePlan.objects.get(id=enterprise_plan_id,is_enterprise_service=True)

            if enterprise_plan_obj and caller_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    enterprise_plan_obj.current_user = User.objects.get(id=caller_data_id)
                    enterprise_plan_obj.previous_user = request.user.id
                    enterprise_plan_obj.stage = Stage.objects.get(pk=2)
                    enterprise_plan_obj.free_text = free_text

                    enterprise_plan_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-enterpriseplan-listing'))
                    return HttpResponseRedirect(reverse('enterprise-service-plan-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')

        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-enterpriseplan-listing'))
        return HttpResponseRedirect(reverse('enterprise-service-plan-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_reverse_reviewer_enterprise_plan                   #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_enterprise_plan(request):
    try:
        if request.method == 'POST':
            enterprise_plan_id = request.POST['enterprise-plan-id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            enterprise_plan_obj = ServicePlan.objects.get(id=enterprise_plan_id,is_enterprise_service=True)

            if enterprise_plan_obj and reviewer_data_id and free_text:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    enterprise_plan_obj.current_user = User.objects.get(id=reviewer_data_id)
                    enterprise_plan_obj.previous_user = request.user.id
                    enterprise_plan_obj.stage = Stage.objects.get(pk=3)
                    enterprise_plan_obj.free_text = free_text
                    enterprise_plan_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-enterpriseplan-listing'))
                    return HttpResponseRedirect(reverse('enterprise-service-plan-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-enterpriseplan-listing'))
        return HttpResponseRedirect(reverse('enterprise-service-plan-listing'))
    except Exception as e:
        raise Http404



####################################################################
# Name - mark_as_complete_reviewer_enterprise_plan                        #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_enterprise_plan(request):
    try:
        if request.method == 'POST':
            enterprise_plan_id = request.POST['enterprise-plan-id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            enterprise_plan_obj = ServicePlan.objects.get(id=enterprise_plan_id,is_enterprise_service=True)

            if enterprise_plan_obj and publisher_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    enterprise_plan_obj.current_user = User.objects.get(id=publisher_data_id)

                    enterprise_plan_obj.previous_user = request.user.id
                    enterprise_plan_obj.stage = Stage.objects.get(pk=4)
                    enterprise_plan_obj.free_text = ''
                    enterprise_plan_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    enterprise_plan_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('enterprise-service-plan-listing'))

                except:

                    pass
            else:

                messages.error(request, 'Select Reviewer and Validation Choice')

        else:

            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('enterprise-service-plan-listing'))
    except Exception as e:
        raise Http404


####################################################################
# Name -mark_as_complete_publisher_enterprise_plan                 #
# Owner - Nishank Gupta                                            #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_enterprise_plan(request):
    try:
        if request.method == 'POST':
            enterprise_plan_id = request.POST['enterprise-plan-id']
            enterprise_plan_obj = ServicePlan.objects.get(id=enterprise_plan_id,is_enterprise_service=True)

            if enterprise_plan_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    enterprise_plan_obj.stage = Stage.objects.get(pk=5)

                    enterprise_plan_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if (len(User_management_obj)):
                        return HttpResponseRedirect(reverse('publisher-enterpriseplan-listing'))
                    return HttpResponseRedirect(reverse('enterprise-service-plan-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if (len(User_management_obj)):
            return HttpResponseRedirect(reverse('publisher-enterpriseplan-listing'))
        return HttpResponseRedirect(reverse('enterprise-service-plan-listing'))
    except Exception as e:
        raise Http404


# ####################################################################
# # Name - lab_accreditation_master_data                             #
# # By - Nishank                                                     #
# #                                                                  #
# #                                                                  #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_accreditation_master_data(request):
    try:
        if request.method == "GET":
            lab_accreditation_master = Lab_accreditation_body_master.objects.all().order_by('name')

            paginator = Paginator(lab_accreditation_master, 100)
            page = request.GET.get('page')
            try:
                lab_accreditation_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_accreditation_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_accreditation_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/lab_accreditation_master_data_management.html',
                          {'lab_accreditation_master': lab_accreditation_master})

    except Exception as e:

        raise Http404


####################################################################
# Name - lab_accreditation_master_add_edit                         #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_accreditation_master_add_edit(request, lab_accreditation_master_id=None):
    try:

        if lab_accreditation_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Lab_accreditation_body_master.objects.get(id=lab_accreditation_master_id)

                return render(request, 'admin/master_data_management/lab_accreditation_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                address = request.POST['address'].strip()
                pincode = request.POST['pincode'].strip()
                telephone = request.POST['telephone'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    type_obj = Lab_accreditation_body_master.objects.get(id=lab_accreditation_master_id)
                    type_obj.name = name
                    type_obj.address = address
                    type_obj.telephone = telephone
                    type_obj.pincode = pincode

                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Lab Accredition Body edited successfully")
                    return redirect('lab_accreditation_master_data_page')
                else:
                    messages.error(request, "Please provide Accredition Body name")
                    return redirect(reverse("lab_accreditation_master_edit", args=[lab_accreditation_master_id, ]))


        else:
            admin_action = 'Add'
            if request.method == "GET":

                return render(request, 'admin/master_data_management/lab_accreditation_master_add_edit.html',
                              {'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                address = request.POST['address'].strip()
                pincode = request.POST['pincode'].strip()
                telephone = request.POST['telephone'].strip()

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    new_object = Lab_accreditation_body_master(name=name,address=address,pincode=pincode,telephone=telephone)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True

                    new_object.save()
                    messages.success(request, "New Lab Accredition Body edited successfully")
                    return redirect('lab_accreditation_master_data_page')
                else:
                    messages.error(request, "Please provide Accredition Body name")
                    return redirect(reverse("lab_accreditation_master_add"))

    except Exception as e:

        raise Http404


# ####################################################################
# # Name - lab_type_master_data                                      #
# # By - Nishank                                                     #
# #                                                                  #
# #                                                                  #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_type_master_data(request):
    try:
        if request.method == "GET":
            lab_type_master = Lab_type_master.objects.all().order_by('name')

            paginator = Paginator(lab_type_master, 100)
            page = request.GET.get('page')
            try:
                lab_type_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_type_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_type_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/lab_type_master_data_management.html',
                          {'lab_type_master': lab_type_master})

    except Exception as e:

        raise Http404


####################################################################
# Name - lab_type_master_add_edit                                  #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_type_master_add_edit(request, lab_type_master_id=None):
    try:

        if lab_type_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Lab_type_master.objects.get(id=lab_type_master_id)

                return render(request, 'admin/master_data_management/lab_type_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    type_obj = Lab_type_master.objects.get(id=lab_type_master_id)
                    type_obj.name = name

                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Lab Type edited successfully")
                    return redirect('lab_type_master_data_page')
                else:
                    messages.error(request, "Please provide LAb Type name")
                    return redirect(reverse("lab_type_master_edit", args=[lab_type_master_id, ]))


        else:
            admin_action = 'Add'
            if request.method == "GET":

                return render(request, 'admin/master_data_management/lab_type_master_add_edit.html',
                              {'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    new_object = Lab_type_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True

                    new_object.save()
                    messages.success(request, "New Lab Type edited successfully")
                    return redirect('lab_type_master_data_page')
                else:
                    messages.error(request, "Please provide Lab Type name")
                    return redirect(reverse("lab_type_master_add"))

    except Exception as e:

        raise Http404

# ####################################################################
# # Name - lab_test_master_data                                      #
# # By - Nishank                                                     #
# #                                                                  #
# #                                                                  #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_test_master_data(request):
    try:
        try:
            q=request.GET.get('search_data')
        except:
            q=None
        if q:
            obj=Lab_test_master.objects.filter(name__icontains=q).order_by('id')

            paginator=Paginator(obj,100)
            page=request.GET.get('page')
            try:
                obj=paginator.page(page)
            except PageNotAnInteger:
                obj=paginator.page(1)
            except EmptyPage:
                obj=paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/lab_test_master_data_management.html',
                          {'lab_test_master':obj,'search_data':q})


        if request.method == "GET":
            lab_test_master = Lab_test_master.objects.all().order_by('name')

            paginator = Paginator(lab_test_master, 100)
            page = request.GET.get('page')
            try:
                lab_test_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_test_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_test_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/lab_test_master_data_management.html',
                          {'lab_test_master': lab_test_master})

    except Exception as e:

        raise Http404

# ####################################################################
# # Name - lab_services_master_data                                  #
# # By - Nishank                                                     #
# #                                                                  #
# #                                                                  #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_services_master_data(request):
    try:
        if request.method == "GET":
            lab_services_master = Lab_services_master.objects.all().order_by('name')

            paginator = Paginator(lab_services_master, 100)
            page = request.GET.get('page')
            try:
                lab_services_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_services_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_services_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/lab_services_master_data_management.html',
                          {'lab_services_master': lab_services_master})

    except Exception as e:

        raise Http404


####################################################################
# Name - lab_test_master_add_edit                                  #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_test_master_add_edit(request, lab_test_master_id=None):
    try:

        if lab_test_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Lab_test_master.objects.get(id=lab_test_master_id)

                return render(request, 'admin/master_data_management/lab_test_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    type_obj = Lab_test_master.objects.get(id=lab_test_master_id)
                    type_obj.name = name

                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='labtest',
                    #                                               id=type_obj.id, edit='Yes')

                    messages.success(request, "Lab Test edited successfully")
                    return redirect('lab_test_master_data_page')
                else:
                    messages.error(request, "Please provide LAb Test name")
                    return redirect(reverse("lab_test_master_edit", args=[lab_test_master_id, ]))


        else:
            admin_action = 'Add'
            if request.method == "GET":

                return render(request, 'admin/master_data_management/lab_test_master_add_edit.html',
                              {'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    new_object = Lab_test_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True

                    new_object.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='labtest',
                    #                                               id=new_object.id, edit=None)

                    messages.success(request, "New Lab Test edited successfully")
                    return redirect('lab_test_master_data_page')
                else:
                    messages.error(request, "Please provide Lab Test name")
                    return redirect(reverse("lab_test_master_add"))

    except Exception as e:

        raise Http404

# ####################################################################
# # Name - lab_services_master_data                                  #
# # By - Nishank                                                     #
# #                                                                  #
# #                                                                  #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_services_master_data(request):
    try:
        if request.method == "GET":
            lab_services_master = Lab_services_master.objects.all().order_by('name')

            paginator = Paginator(lab_services_master, 100)
            page = request.GET.get('page')
            try:
                lab_services_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_services_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_services_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/lab_services_master_data_management.html',
                          {'lab_services_master': lab_services_master})

    except Exception as e:

        raise Http404



####################################################################
# Name - lab_services_master_add_edit                              #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_services_master_add_edit(request, lab_services_master_id=None):
    try:

        if lab_services_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Lab_services_master.objects.get(id=lab_services_master_id)

                return render(request, 'admin/master_data_management/lab_services_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    type_obj = Lab_services_master.objects.get(id=lab_services_master_id)
                    type_obj.name = name

                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='labservices',
                    #                                               id=type_obj.id, edit='Yes')

                    messages.success(request, "Lab Service edited successfully")
                    return redirect('lab_services_master_data_page')
                else:
                    messages.error(request, "Please provide Lab Service name")
                    return redirect(reverse("lab_services_master_edit", args=[lab_services_master_id, ]))


        else:
            admin_action = 'Add'
            if request.method == "GET":

                return render(request, 'admin/master_data_management/lab_services_master_add_edit.html',
                              {'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    new_object = Lab_services_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True

                    new_object.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='labservices',
                    #                                               id=new_object.id, edit=None)

                    messages.success(request, "New Lab Service edited successfully")
                    return redirect('lab_services_master_data_page')
                else:
                    messages.error(request, "Please provide Lab Service name")
                    return redirect(reverse("lab_services_master_add"))

    except Exception as e:

        raise Http404

# ####################################################################
# # Name - disease_search_master_data                                #
# # By - Nishank                                                     #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def disease_search_master_data(request):
    try:
        try:
            q=request.GET.get('search_data')
        except:
            q=None
        if q:
            obj=Disease_search_master.objects.filter(name__icontains=q).order_by('id')

            paginator=Paginator(obj,100)
            page=request.GET.get('page')
            try:
                obj=paginator.page(page)
            except PageNotAnInteger:
                obj=paginator.page(1)
            except EmptyPage:
                obj=paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/disease_search_master_data_management.html',
                          {'disease_search_master':obj,'search_data':q})
        if request.method == "GET":
            disease_search_master = Disease_search_master.objects.all().order_by('name')
            paginator = Paginator(disease_search_master, 100)
            page = request.GET.get('page')
            try:
                disease_search_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                disease_search_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                disease_search_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/disease_search_master_data_management.html',
                          {'disease_search_master': disease_search_master})
    except Exception as e:
        raise Http404

####################################################################
# Name - disease_search_master_add_edit                            #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def disease_search_master_add_edit(request, disease_search_master_id=None):
    try:
        if disease_search_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Disease_search_master.objects.get(id=disease_search_master_id)
                doctor_categories_master = Category.objects.filter(delete=False).order_by('name')
                if (type_obj.doctor_categories != None) and (type_obj.doctor_categories != '') and (type_obj.doctor_categories != []):
                    current_categories =[]
                    current_categories = type_obj.doctor_categories.split(',')
                else:
                    current_categories =  []
                return render(request, 'admin/master_data_management/disease_search_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action,'doctor_categories_master':doctor_categories_master,
                               'current_categories':current_categories})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                categories_doc = request.POST.getlist('categories_doc')
                temp = ''
                counter = 0
                for i in categories_doc:
                    counter += 1
                    if counter == 1:
                        temp = temp + i
                    else:
                        temp = temp + ',' + i

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    type_obj = Disease_search_master.objects.get(id=disease_search_master_id)

                    #SAVE EXISITNG comma seperatyed categories BEFORE UPDATING TO BE ABLE TO COMPARE
                    SAVE_curr_doc_categories = type_obj.doctor_categories

                    type_obj.name = name

                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True

                    type_obj.doctor_categories = temp

                    try:
                        type_obj.save()
                    except IntegrityError as e:
                        messages.error(request, "Name Already exists in Master")
                        return redirect(reverse("disease_search_master_edit", args=[disease_search_master_id, ]))
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='labservices',
                    #                                              id=type_obj.id, edit='Yes')

                    # TODO 3 ADD doctor associated disease update functionallity here
                    if SAVE_curr_doc_categories == '' and  type_obj.doctor_categories == '' :
                        pass
                    elif SAVE_curr_doc_categories == '' and type_obj.doctor_categories != '':
                        if categories_doc != None and categories_doc != []:
                            for i in categories_doc:
                                cat_doc_list = Doctor.objects.filter(category_id=int(i))  # TODO 4 is_disable = False
                                for j in cat_doc_list:
                                    if j.associated_diseases == '' or j.associated_diseases == None or j.associated_diseases == []:
                                        j.associated_diseases = str(type_obj.id)
                                    else:
                                        check = j.associated_diseases.strip()
                                        check_list = check.split(',')
                                        if str(type_obj.id) not in check_list:
                                            j.associated_diseases = j.associated_diseases + ',' + str(type_obj.id)
                                    j.save()
                    elif SAVE_curr_doc_categories != '' and type_obj.doctor_categories == '':
                        curr_doc_categories_list = SAVE_curr_doc_categories.split(',')
                        for i in curr_doc_categories_list:
                            cat_doc_list = Doctor.objects.filter(category_id=int(i))
                            for j in cat_doc_list:
                                if j.associated_diseases != '' and  j.associated_diseases != None:
                                    delet_disease_id_from_list = j.associated_diseases.split(',')
                                    del_disease_id = str(type_obj.id)
                                    if del_disease_id in delet_disease_id_from_list:
                                        delet_disease_id_from_list.remove(del_disease_id)
                                    counter = 0
                                    atemp = ''
                                    for k in delet_disease_id_from_list :
                                        counter += 1
                                        if counter ==1 :
                                            atemp = atemp + k
                                        else:
                                            atemp = atemp + ',' + k
                                    j.associated_diseases = atemp
                                    j.save()
                    elif SAVE_curr_doc_categories != '' and type_obj.doctor_categories != '':
                        curr_doc_categories_list = SAVE_curr_doc_categories.split(',')
                        list_of_common = []
                        for i in categories_doc:
                            if i in curr_doc_categories_list:
                                list_of_common.append(i)
                        list_add = []
                        for i in categories_doc:
                            if i not in list_of_common:
                                list_add.append(i)
                        list_delete = []
                        for i in curr_doc_categories_list:
                            if i not in list_of_common:
                                list_delete.append(i)

                        if list_add != None and list_add != []:
                            for i in list_add:
                                cat_doc_list = Doctor.objects.filter(category_id=int(i))  # TODO 4 is_disable = False
                                for j in cat_doc_list:
                                    if j.associated_diseases == '' or j.associated_diseases == None or j.associated_diseases == []:
                                        j.associated_diseases = str(type_obj.id)
                                    else:
                                        j.associated_diseases = j.associated_diseases + ',' + str(type_obj.id)
                                    j.save()

                        if list_delete != None and list_delete != []:
                            for i in list_delete:
                                cat_doc_list = Doctor.objects.filter(category_id=int(i))
                                for j in cat_doc_list:
                                    if j.associated_diseases != '' and j.associated_diseases != None:
                                        delet_disease_id_from_list = j.associated_diseases.split(',')
                                        del_disease_id = str(type_obj.id)
                                        if del_disease_id in delet_disease_id_from_list:
                                            delet_disease_id_from_list.remove(del_disease_id)
                                        counter = 0
                                        atemp = ''
                                        for k in delet_disease_id_from_list:
                                            counter += 1
                                            if counter == 1:
                                                atemp = atemp + k
                                            else:
                                                atemp = atemp + ',' + k
                                        j.associated_diseases = atemp
                                        j.save()

                        if list_of_common != None and list_of_common != []:
                            for i in list_of_common:
                                cat_doc_list = Doctor.objects.filter( category_id=int(i))  # TODO 4 is_disable = False
                                for j in cat_doc_list:
                                    if j.associated_diseases == '' or j.associated_diseases == None or j.associated_diseases == []:
                                        j.associated_diseases = str(type_obj.id)
                                    else:
                                        check = j.associated_diseases.strip()
                                        check_list = check.split(',')
                                        if str(type_obj.id) not in check_list:
                                            j.associated_diseases = j.associated_diseases + ',' + str(type_obj.id)
                                    j.save()
                        #print "list_of_common = ",list_of_common
                        #print "list_add = ",list_add
                        #print "list_delete = ",list_delete
                    messages.success(request, "Disease Service edited successfully")
                    return redirect('disease_search_master_data_page')
                else:
                    messages.error(request, "Please provide Disease name")
                    return redirect(reverse("disease_search_master_edit", args=[disease_search_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                doctor_categories_master = Category.objects.filter(delete=False).order_by('name')
                return render(request, 'admin/master_data_management/disease_search_master_add_edit.html',
                              {'admin_action': admin_action,'doctor_categories_master':doctor_categories_master})

            elif request.method == "POST":
                name = request.POST['name'].strip()

                categories_doc = request.POST.getlist('categories_doc')
                temp = ''
                counter = 0
                for i in categories_doc:
                    counter += 1
                    if counter == 1:
                        temp = temp + i
                    else:
                        temp = temp + ',' + i

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    new_object = Disease_search_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True

                    new_object.doctor_categories = temp
                    try:
                        new_object.save()
                    except IntegrityError as e:
                        messages.error(request, "Name Already exists in Master")
                        return redirect(reverse("disease_search_master_add"))
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='labservices',
                    #                                              id=new_object.id, edit=None)

                    # TODO 1 ADD doctor associated disease update functionallity here
                    if categories_doc != None and categories_doc != []:
                        for i in categories_doc:
                            cat_doc_list = Doctor.objects.filter(category_id = int(i)) #TODO 2 is_disable = False
                            #print cat_doc_list.count()
                            for j in cat_doc_list:
                                if j.associated_diseases == '' or j.associated_diseases == None or j.associated_diseases == []:
                                    j.associated_diseases = str(new_object.id)
                                else:
                                    check = j.associated_diseases.strip()
                                    check_list = check.split(',')
                                    if str(new_object.id) not in check_list:
                                        j.associated_diseases = j.associated_diseases + ',' + str(new_object.id)
                                j.save()

                    messages.success(request, "New Disease Entry Added successfully")
                    return redirect('disease_search_master_data_page')
                else:
                    messages.error(request, "Please provide Disease name")
                    return redirect(reverse("disease_search_master_add"))
    except Exception as e:
        #print e
        raise Http404

# ####################################################################
# # Name - symptoms_search_master_data                               #
# # By - Nishank                                                     #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def symptoms_search_master_data(request):
    try:
        try:
            q=request.GET.get('search_data')
        except:
            q=None
        if q:
            obj=Symptoms_search_master.objects.filter(name__icontains=q).order_by('id')

            paginator=Paginator(obj,100)
            page=request.GET.get('page')
            try:
                obj=paginator.page(page)
            except PageNotAnInteger:
                obj=paginator.page(1)
            except EmptyPage:
                obj=paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/symptoms_search_master_data_management.html',
                          {'symptoms_search_master': obj,'search_data':q})

        if request.method == "GET":
            symptoms_search_master = Symptoms_search_master.objects.all().order_by('name')
            paginator = Paginator(symptoms_search_master, 100)
            page = request.GET.get('page')
            try:
                symptoms_search_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                symptoms_search_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                symptoms_search_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/symptoms_search_master_data_management.html',
                          {'symptoms_search_master': symptoms_search_master})
    except Exception as e:
        raise Http404

####################################################################
# Name - symptoms_search_master_add_edit                           #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def symptoms_search_master_add_edit(request, symptoms_search_master_id=None):
    try:
        if symptoms_search_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Symptoms_search_master.objects.get(id=symptoms_search_master_id)
                doctor_categories_master = Category.objects.filter(delete=False).order_by('name')
                if (type_obj.doctor_categories != None) and (type_obj.doctor_categories != '') and (type_obj.doctor_categories != []):
                    current_categories =[]
                    current_categories = type_obj.doctor_categories.split(',')
                else:
                    current_categories =  []
                return render(request, 'admin/master_data_management/symptoms_search_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action,'doctor_categories_master':doctor_categories_master,
                               'current_categories': current_categories})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                categories_doc = request.POST.getlist('categories_doc')
                temp = ''
                counter = 0
                for i in categories_doc:
                    counter += 1
                    if counter == 1:
                        temp = temp + i
                    else:
                        temp = temp + ',' + i

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'

                if name:
                    type_obj = Symptoms_search_master.objects.get(id=symptoms_search_master_id)
                    # SAVE EXISITNG comma seperatyed categories BEFORE UPDATING TO BE ABLE TO COMPARE
                    SAVE_curr_doc_categories = type_obj.doctor_categories
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.doctor_categories = temp
                    try :
                        type_obj.save()
                    except IntegrityError as e:
                        messages.error(request, "Name Already exists in Master")
                        return redirect(reverse("symptoms_search_master_edit", args=[symptoms_search_master_id, ]))
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='labservices',
                    #                                              id=type_obj.id, edit='Yes')
                    # TODO 6 ADD doctor associated symptom  update functionallity here
                    if SAVE_curr_doc_categories == '' and  type_obj.doctor_categories == '' :
                        pass
                    elif SAVE_curr_doc_categories == '' and type_obj.doctor_categories != '':
                        if categories_doc != None and categories_doc != []:
                            for i in categories_doc:
                                cat_doc_list = Doctor.objects.filter(category_id=int(i))  # TODO 4 is_disable = False
                                for j in cat_doc_list:
                                    if j.associated_symptoms == '' or j.associated_symptoms == None or j.associated_symptoms == []:
                                        j.associated_symptoms = str(type_obj.id)
                                    else:
                                        check = j.associated_symptoms.strip()
                                        check_list = check.split(',')
                                        if str(type_obj.id) not in check_list:
                                            j.associated_symptoms = j.associated_symptoms + ',' + str(type_obj.id)
                                    j.save()
                    elif SAVE_curr_doc_categories != '' and type_obj.doctor_categories == '':
                        curr_doc_categories_list = SAVE_curr_doc_categories.split(',')
                        for i in curr_doc_categories_list:
                            cat_doc_list = Doctor.objects.filter(category_id=int(i))
                            for j in cat_doc_list:
                                if j.associated_symptoms != '' and  j.associated_symptoms != None:
                                    delet_symptom_id_from_list = j.associated_symptoms.split(',')
                                    del_symptom_id = str(type_obj.id)
                                    if del_symptom_id in delet_symptom_id_from_list:
                                        delet_symptom_id_from_list.remove(del_symptom_id)
                                    counter = 0
                                    atemp = ''
                                    for k in delet_symptom_id_from_list :
                                        counter += 1
                                        if counter ==1 :
                                            atemp = atemp + k
                                        else:
                                            atemp = atemp + ',' + k
                                    j.associated_symptoms = atemp
                                    j.save()
                    elif SAVE_curr_doc_categories != '' and type_obj.doctor_categories != '':
                        curr_doc_categories_list = SAVE_curr_doc_categories.split(',')
                        list_of_common = []
                        for i in categories_doc:
                            if i in curr_doc_categories_list:
                                list_of_common.append(i)
                        list_add = []
                        for i in categories_doc:
                            if i not in list_of_common:
                                list_add.append(i)
                        list_delete = []
                        for i in curr_doc_categories_list:
                            if i not in list_of_common:
                                list_delete.append(i)

                        if list_add != None and list_add != []:
                            for i in list_add:
                                cat_doc_list = Doctor.objects.filter(category_id=int(i))  # TODO 4 is_disable = False
                                for j in cat_doc_list:
                                    if j.associated_symptoms == '' or j.associated_symptoms == None or j.associated_symptoms == []:
                                        j.associated_symptoms = str(type_obj.id)
                                    else:
                                        j.associated_symptoms = j.associated_symptoms + ',' + str(type_obj.id)
                                    j.save()

                        if list_delete != None and list_delete != []:
                            for i in list_delete:
                                cat_doc_list = Doctor.objects.filter(category_id=int(i))
                                for j in cat_doc_list:
                                    if j.associated_symptoms != '' and j.associated_symptoms != None:
                                        delet_disease_id_from_list = j.associated_symptoms.split(',')
                                        del_disease_id = str(type_obj.id)
                                        if del_disease_id in delet_disease_id_from_list:
                                            delet_disease_id_from_list.remove(del_disease_id)
                                        counter = 0
                                        atemp = ''
                                        for k in delet_disease_id_from_list:
                                            counter += 1
                                            if counter == 1:
                                                atemp = atemp + k
                                            else:
                                                atemp = atemp + ',' + k
                                        j.associated_symptoms = atemp
                                        j.save()

                        if list_of_common != None and list_of_common != []:
                            for i in list_of_common:
                                cat_doc_list = Doctor.objects.filter(category_id=int(i))  # TODO 4 is_disable = False
                                for j in cat_doc_list:
                                    if j.associated_symptoms == '' or j.associated_symptoms == None or j.associated_symptoms == []:
                                        j.associated_symptoms = str(type_obj.id)
                                    else:
                                        check = j.associated_symptoms.strip()
                                        check_list = check.split(',')
                                        if str(type_obj.id) not in check_list:
                                            j.associated_symptoms = j.associated_symptoms + ',' + str(type_obj.id)
                                    j.save()

                    messages.success(request, "Symptom edited successfully")
                    return redirect('symptoms_search_master_data_page')
                else:
                    messages.error(request, "Please provide Symptom name")
                    return redirect(reverse("symptoms_search_master_edit", args=[symptoms_search_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                doctor_categories_master = Category.objects.filter(delete=False).order_by('name')
                return render(request, 'admin/master_data_management/symptoms_search_master_add_edit.html',
                              {'admin_action': admin_action,'doctor_categories_master':doctor_categories_master})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                categories_doc = request.POST.getlist('categories_doc')
                temp = ''
                counter = 0
                for i in categories_doc:
                    counter += 1
                    if counter == 1:
                        temp = temp + i
                    else:
                        temp = temp + ',' + i

                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Symptoms_search_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.doctor_categories = temp
                    try:
                        new_object.save()
                    except IntegrityError as e:
                        messages.error(request, "Name Already exists in Master")
                        return redirect(reverse("symptoms_search_master_add"))

                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='labservices',
                    #                                              id=new_object.id, edit=None)

                    # TODO 5 ADD doctor associated Symptom update functionallity here
                    if categories_doc != None and categories_doc != []:
                        for i in categories_doc:
                            cat_doc_list = Doctor.objects.filter(category_id = int(i)) #TODO 2 is_disable = False
                            #print cat_doc_list.count()
                            for j in cat_doc_list:
                                if j.associated_symptoms == '' or j.associated_symptoms == None or j.associated_symptoms == []:
                                    j.associated_symptoms = str(new_object.id)
                                else:
                                    check = j.associated_symptoms.strip()
                                    check_list = check.split(',')
                                    if str(new_object.id) not in check_list:
                                        j.associated_symptoms = j.associated_symptoms + ',' + str(new_object.id)
                                j.save()
                    messages.success(request, "New Symptom Entry edited successfully")
                    return redirect('symptoms_search_master_data_page')
                else:
                    messages.error(request, "Please provide Symptom name")
                    return redirect(reverse("symptoms_search_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - schedule_lab                                              #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def schedule_lab(request, lab_id=None):
    try:
        back_to_url = request.META.get('HTTP_REFERER')
        try:
            lab_obj = Labs.objects.get(id = lab_id)
        except:
            lab_obj = None
        if lab_obj :
            if request.method == "GET":

                schedule_obj = lab_obj.lab_schedule
                schedule_list = []
                # This case add by jitendra dixit temporary use
                schedule_id = None
                try:
                    if len(schedule_obj) == 0: # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc

                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        lab_obj.lab_schedule = schedule_data
                        lab_obj.save()
                except:
                    if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc

                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        lab_obj.lab_schedule = schedule_data
                        lab_obj.save()
                #3 get schedule object (whether already exisitng or added by us in step 2 above
                schedule_obj = lab_obj.lab_schedule

                #>>> import json
                #>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
                #[u'foo', {u'bar': [u'baz', Non , 1.0, 2]}]
                #>>> json.dumps([u'foo', {u'bar': [u'baz', None, 1.0, 2]}])
                # '["foo", {"bar": ["baz", null, 1.0, 2]}]' #Therefore the check for type string

                if schedule_obj:
                    schedule_list = lab_obj.lab_schedule #get the conetnt of json field

                    if type(schedule_list) is str:
                        schedule_list = json.loads(schedule_list)

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)

                if len(is_publisher):
                    user_is_publisher = True

                return render(request, 'data_management/lab_data/lab_schedule_form.html',
                              dict(schedule_list=schedule_list,
                                   lab_id=lab_id,
                                   day_list=day_list,
                                   tab=5, back_to_url=back_to_url,
                                   user_is_publisher = user_is_publisher))

            elif request.method == "POST":
                # check = AttachWithDoctor.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                # schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                # schedule_obj.update(by_appointment=False)
                schedule_obj = lab_obj.lab_schedule
                #if len(check) == 1 and len(schedule_obj) == 1:
                if schedule_obj :
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    # try:
                    #     by_app = request.POST.getlist('by_app')
                    # except:
                    #     by_app = []
                    # if len(by_app) == 0:
                    #     by_app.append('0ff')
                    #
                    # if by_app[0] == 'on':
                    #     schedule_obj.update(by_appointment=True)
                    # else:
                    start_time = request.POST.getlist('start_time')

                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        #while saving new schedule, the schedule is created as a dictionary which is then appended
                        #to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)

                        schedule_obj = schedule_data
                        lab_obj.lab_schedule = schedule_obj
                        lab_obj.save()
                        messages.success(request, 'Lab schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
                else:
                    schedule_list = []
                    try:
                        if len(schedule_obj) == 0:  # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc

                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            lab_obj.lab_schedule = schedule_data
                            lab_obj.save()
                    except:
                        if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc

                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            lab_obj.lab_schedule = schedule_data
                            lab_obj.save()
                    # 3 get schedule object (whether already exisitng or added by us in step 2 above
                    schedule_obj = lab_obj.lab_schedule

                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj

                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        # while saving new schedule, the schedule is created as a dictionary which is then appended
                        # to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)

                        schedule_obj = schedule_data
                        lab_obj.lab_schedule = schedule_obj
                        lab_obj.save()
                        messages.success(request, 'Lab schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
        else:
            messages.error(request, 'Lab object not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - delete_lab_schedule                                       #
# By - NISHANK                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_lab_schedule(request):
    try:
        schedule_id = None
        lab_id = None
        schedule_id =  request.GET['labschid']
        lab_id = request.GET['lab_id']
        if lab_id:
            try :
                lab_obj = Labs.objects.get(id = lab_id)
            except:
                lab_obj = None
                str_lab_id = str(lab_id)
                messages.error(request,'Lab object could not be retrieved from database' )
                return HttpResponseRedirect('/lab/schedule/'+str_lab_id+'/')
            if request.method == "GET" and schedule_id != None and lab_obj :
                    #schedule_data_obj = Schedule.objects.filter(schedule_data__contains=[{'id': id_data}])
                    schedule_data_obj_list = lab_obj.lab_schedule
                    # commented by Nishank on 14Nov 2016
                    #update_data = list(schedule_data_obj[0].schedule_data)
                    # exp_data = schedule_data_obj[0].schedule_data
                    # #update_data = _.without(update_data, _.findWhere(update_data, {'id': id_data}))
                    # for i in exp_data:
                    #     if i['id'] == id_data:
                    #         exp_data.remove(i)
                    cindex =-1
                    for entry in schedule_data_obj_list:
                        cindex += 1
                        if entry['id'] == schedule_id :
                            del schedule_data_obj_list[cindex]

                    lab_obj.lab_schedule = schedule_data_obj_list
                    lab_obj.save()
                    messages.success(request, 'Deleted')
                    str_lab_id = str(lab_id)
                    return HttpResponseRedirect('/lab/schedule/' + str_lab_id + '/')
            else:
                str_lab_id = str(lab_id)
                messages.error(request, 'Schedule id not found')
                return HttpResponseRedirect('/lab/schedule/' + str_lab_id + '/')
        else:
            messages.error(request, 'Schedule id not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - delete_doctor_care_schedule                               #
# By - NISHANK                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_doctor_care_schedule(request):
    try:
        schedule_id = None
        doctor_id = None
        schedule_id = request.GET['docschid']
        doctor_id = request.GET['doctor_id']
        if doctor_id:
            try:
                doctor_obj = Doctor.objects.get(id=doctor_id)
            except:
                doctor_obj = None
                str_doctor_id = str(doctor_id)
                messages.error(request, 'Doctor object could not be retrieved from database')
                return HttpResponseRedirect(reverse('time-schedule-care-doctor', args=[doctor_id]))
            if request.method == "GET" and schedule_id != None and doctor_obj:
                schedule_data_obj_list = doctor_obj.doctor_care_schedule_data
                cindex = -1
                for entry in schedule_data_obj_list:
                    cindex += 1
                    if entry['id'] == schedule_id:
                        del schedule_data_obj_list[cindex]

                doctor_obj.doctor_care_schedule_data = schedule_data_obj_list
                doctor_obj.save()
                messages.success(request, 'Deleted')
                str_doctor_id = str(doctor_id)
                return HttpResponseRedirect(reverse('time-schedule-care-doctor', args=[doctor_id]))
            else:
                str_doctor_id = str(doctor_id)
                messages.error(request, 'Schedule id not found')
                return HttpResponseRedirect(reverse('time-schedule-care-doctor', args=[doctor_id]))

        else:
            messages.error(request, 'Schedule id not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        # print e
        raise Http404

# ####################################################################
# # Name - lab_department_master_data                                #
# # By - Nishank                                                     #
# #                                                                  #
# #                                                                  #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_department_master_data(request):
    try:
        if request.method == "GET":
            lab_department_master = Lab_department_master.objects.all().order_by('name')

            paginator = Paginator(lab_department_master, 100)
            page = request.GET.get('page')
            try:
                lab_department_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                lab_department_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                lab_department_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/lab_department_master_data_management.html',
                          {'lab_department_master': lab_department_master})
    except Exception as e:
        raise Http404

####################################################################
# Name - lab_department_master_add_edit                            #
# Owner - Nishank                                                  #
# Review by - ?                                                    #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def lab_department_master_add_edit(request, lab_department_master_id=None):
    try:
        if lab_department_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Lab_department_master.objects.get(id=lab_department_master_id)

                return render(request, 'admin/master_data_management/lab_department_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = Lab_department_master.objects.get(id=lab_department_master_id)
                    type_obj.name = name

                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Lab department edited successfully")
                    return redirect('lab_department_master_data_page')
                else:
                    messages.error(request, "Please provide Lab department name")
                    return redirect(reverse("lab_department_master_edit", args=[lab_department_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/lab_department_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Lab_department_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Lab Department edited successfully")
                    return redirect('lab_department_master_data_page')
                else:
                    messages.error(request, "Please provide Lab department name")
                    return redirect(reverse("lab_department_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - schedule_lab_branch                                       #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def schedule_lab_branch(request, lab_id=None,lab_branch_id =None, ):
    try:
        back_to_url = request.META.get('HTTP_REFERER')
        try:
            lab_obj = Labs.objects.get(id = lab_id)
        except:
            lab_obj = None
        try:
            lab_branch_obj = Lab_branches.objects.get(lab_id = lab_id)
        except:
            lab_branch_obj = None
        if lab_branch_obj and lab_obj :
            if request.method == "GET":
                branches = lab_branch_obj.branches['branch_details']
                for key,value in branches.items() :
                    if key == lab_branch_id:
                        try:
                            schedule_obj = value['branch_schedule']
                        except:
                            schedule_obj  =  None
                        schedule_list = []
                        schedule_id = None
                        try:
                            if len(schedule_obj) == 0: # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc
                                # 2 create and save a schedule instance so that do not have problem in #3 below
                                schedule_data = []
                                value.update({'branch_schedule':schedule_data})
                                branches[key]=value
                                lab_branch_obj.branches['branch_details'] =  branches
                                lab_branch_obj.save()
                        except:
                            if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc
                                schedule_data = []
                                # 2 create and save a schedule instance so that do not have problem in #3 below
                                value.update({'branch_schedule':schedule_data})
                                branches[key]=value
                                lab_branch_obj.branches['branch_details'] =  branches
                                lab_branch_obj.save()

                        #3 get schedule object (whether already exisitng or added by us in step 2 above
                        schedule_obj = value['branch_schedule']

                        #>>> import json
                        #>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
                        #[u'foo', {u'bar': [u'baz', Non , 1.0, 2]}]
                        #>>> json.dumps([u'foo', {u'bar': [u'baz', None, 1.0, 2]}])
                        # '["foo", {"bar": ["baz", null, 1.0, 2]}]' #Therefore the check for type string

                        if schedule_obj:
                            schedule_list = schedule_obj #get the conetnt of json field

                            if type(schedule_list) is str:
                                schedule_list = json.loads(schedule_list)

                        return render(request, 'data_management/lab_data/lab_branch_schedule_form.html',
                                      dict(schedule_list=schedule_list,
                                           lab_id=lab_id,
                                           lab_branch_id=lab_branch_id,
                                           day_list=day_list,
                                           back_to_url=back_to_url ))

            elif request.method == "POST":
                branches = lab_branch_obj.branches['branch_details']
                for key, value in branches.items():
                    if key == lab_branch_id:
                        try:
                            schedule_obj = value['branch_schedule']
                        except:
                            schedule_obj = None
                        schedule_list = []

                        schedule_id = None
                        try:
                            if len(schedule_obj) == 0:  # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc
                                # 2 create and save a schedule instance so that do not have problem in #3 below
                                schedule_data = []
                                value.update({'branch_schedule': schedule_data})
                                branches[key] = value
                                lab_branch_obj.branches['branch_details'] = branches
                                lab_branch_obj.save()
                        except:
                            if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc
                                schedule_data = []
                                # 2 create and save a schedule instance so that do not have problem in #3 below
                                value.update({'branch_schedule': schedule_data})
                                branches[key] = value
                                lab_branch_obj.branches['branch_details'] = branches
                                lab_branch_obj.save()

                        # 3 get schedule object (whether already exisitng or added by us in step 2 above
                        schedule_obj = value['branch_schedule']

                        if schedule_obj :
                            add_schedule_dict = {}
                            timing_list = []
                            schedule_data = schedule_obj
                            start_time = request.POST.getlist('start_time')
                            start_period = request.POST.getlist('start_period')
                            end_time = request.POST.getlist('end_time')
                            end_period = request.POST.getlist('end_period')
                            from_day = request.POST.get('from_day')
                            to_day = request.POST.get('to_day')
                            if start_time and start_period and end_period and end_time and from_day:
                                unique_id = str(uuid.uuid4())
                                for i in range(0, len(start_time)):
                                    timing_dict = {}
                                    timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                                    timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                                    timing_list.append(timing_dict)
                                add_schedule_dict['from_day'] = from_day
                                add_schedule_dict['to_day'] = to_day
                                add_schedule_dict['timing'] = timing_list
                                add_schedule_dict['id'] = unique_id
                                #while saving new schedule, the schedule is created as a dictionary which is then appended
                                #to the single listcontained in (schedule_data)
                                schedule_data.append(add_schedule_dict)

                                schedule_obj = schedule_data
                                value['branch_schedule'] = schedule_obj
                                branches[key] = value
                                lab_branch_obj.branches['branch_details'] = branches
                                lab_branch_obj.save()
                                messages.success(request, 'Lab Branch schedule successdfully updated')
                                back_to_url = request.META.get('HTTP_REFERER')
                                return HttpResponseRedirect(back_to_url)
                        else:
                            schedule_list = []
                            try:
                                if len(schedule_obj) == 0:  # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc
                                    # 2 create and save a schedule instance so that do not have problem in #3 below
                                    schedule_data = []
                                    value.update({'branch_schedule': schedule_data})
                                    branches[key] = value
                                    lab_branch_obj.branches['branch_details'] = branches
                                    lab_branch_obj.save()
                            except:
                                if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc
                                    schedule_data = []
                                    # 2 create and save a schedule instance so that do not have problem in #3 below
                                    value.update({'branch_schedule': schedule_data})
                                    branches[key] = value
                                    lab_branch_obj.branches['branch_details'] = branches
                                    lab_branch_obj.save()

                            # 3 get schedule object (whether already exisitng or added by us in step 2 above
                            schedule_obj = value['branch_schedule']

                            add_schedule_dict = {}
                            timing_list = []
                            schedule_data = schedule_obj

                            start_time = request.POST.getlist('start_time')

                            start_period = request.POST.getlist('start_period')
                            end_time = request.POST.getlist('end_time')
                            end_period = request.POST.getlist('end_period')
                            from_day = request.POST.get('from_day')
                            to_day = request.POST.get('to_day')
                            if start_time and start_period and end_period and end_time and from_day:
                                unique_id = str(uuid.uuid4())
                                for i in range(0, len(start_time)):
                                    timing_dict = {}
                                    timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                                    timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                                    timing_list.append(timing_dict)
                                add_schedule_dict['from_day'] = from_day
                                add_schedule_dict['to_day'] = to_day
                                add_schedule_dict['timing'] = timing_list
                                add_schedule_dict['id'] = unique_id
                                # while saving new schedule, the schedule is created as a dictionary which is then appended
                                # to the single listcontained in (schedule_data)
                                schedule_data.append(add_schedule_dict)
                                schedule_obj = schedule_data
                                value['branch_schedule'] = schedule_obj
                                branches[key] = value
                                lab_branch_obj.branches['branch_details'] = branches
                                lab_branch_obj.save()
                                messages.success(request, 'Lab Branch schedule successdfully updated')
                                back_to_url = request.META.get('HTTP_REFERER')
                                return HttpResponseRedirect(back_to_url)
        else:
            messages.error(request, 'Lab object not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - delete_lab_branch_schedule                                #
# By - NISHANK                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_lab_branch_schedule(request):
    try:
        schedule_id = None
        lab_id = None
        lab_branch_id = None
        schedule_id =  request.GET['labschid']
        lab_id = request.GET['lab_id']
        lab_branch_id =request.GET['lab_branch_id']
        if lab_id:
            try :
                lab_branch_obj = Lab_branches.objects.get(lab_id =lab_id)
            except Exception as e:
                #print e
                lab_branch_obj = None
                messages.error(request,'Lab Branch object could not be retrieved from database' )
                back_to_url = request.META.get('HTTP_REFERER')
                return HttpResponseRedirect(back_to_url)
            if request.method == "GET" and schedule_id != None and lab_branch_obj  :
                    #schedule_data_obj = Schedule.objects.filter(schedule_data__contains=[{'id': id_data}])
                    try:
                        branch_data = lab_branch_obj.branches['branch_details'][lab_branch_id]
                    except:
                        messages.error(request, 'Branch does not exist')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
                    try:
                        schedule_data_list = branch_data['branch_schedule']
                    except:
                        messages.error(request, 'Schedule does not exist')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
                    # commented by Nishank on 14Nov 2016
                    #update_data = list(schedule_data_obj[0].schedule_data)
                    # exp_data = schedule_data_obj[0].schedule_data
                    # #update_data = _.without(update_data, _.findWhere(update_data, {'id': id_data}))
                    # for i in exp_data:
                    #     if i['id'] == id_data:
                    #         exp_data.remove(i)
                    cindex =-1
                    for entry in schedule_data_list:
                        cindex += 1
                        if entry['id'] == schedule_id :
                            del schedule_data_list[cindex]

                    branch_data['branch_schedule'] =  schedule_data_list
                    lab_branch_obj.branches['branch_details'][lab_branch_id] = branch_data
                    lab_branch_obj.save()
                    messages.success(request, 'Deleted')
                    return HttpResponseRedirect(reverse('time-schedule-lab-branch',args=[lab_id,lab_branch_id]))
            else:
                messages.error(request, 'Schedule id not found')
                return HttpResponseRedirect(reverse('time-schedule-lab-branch',args=[lab_id,lab_branch_id]))
        else:
            messages.error(request, 'Schedule id not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

# ####################################################################
# # Name - bloodbank_services_master_data                            #
# # By - Nishank                                                     #
# ####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def bloodbank_services_master_data(request):
    try:
        if request.method == "GET":
            bloodbank_services_master = BloodBankServices.objects.all().order_by('name')
            paginator = Paginator(bloodbank_services_master, 100)
            page = request.GET.get('page')
            try:
                bloodbank_services_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                bloodbank_services_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                bloodbank_services_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/bloodbank_services_master_data_management.html',
                          {'bloodbank_services_master': bloodbank_services_master})
    except Exception as e:
        raise Http404

####################################################################
# Name - bloodbank_services_master_add_edit                        #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def bloodbank_services_master_add_edit(request, bloodbank_services_master_id=None):
    try:
        if bloodbank_services_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = BloodBankServices.objects.get(id=bloodbank_services_master_id)
                return render(request, 'admin/master_data_management/bloodbank_services_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = BloodBankServices.objects.get(id=bloodbank_services_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Lab department edited successfully")
                    return redirect('bloodbank_services_master_data_page')
                else:
                    messages.error(request, "Please provide Lab department name")
                    return redirect(reverse("bloodbank_services_master_edit", args=[bloodbank_services_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/bloodbank_services_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = BloodBankServices(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Lab Department edited successfully")
                    return redirect('bloodbank_services_master_data_page')
                else:
                    messages.error(request, "Please provide Lab department name")
                    return redirect(reverse("bloodbank_services_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - schedule_bloodbank                                        #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def schedule_bloodbank(request, bloodbank_id=None):
    try:
        back_to_url = request.META.get('HTTP_REFERER')
        try:
            bloodbank_obj = BloodBank.objects.get(id = bloodbank_id)
        except:
            bloodbank_obj = None
        if bloodbank_obj :
            if request.method == "GET":
                schedule_obj = bloodbank_obj.bloodbank_schedule
                schedule_list = []
                # This case add by jitendra dixit temporary use
                schedule_id = None
                try:
                    if len(schedule_obj) == 0: # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc
                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        bloodbank_obj.bloodbank_schedule = schedule_data
                        bloodbank_obj.save()
                except:
                    if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc
                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        bloodbank_obj.bloodbank_schedule = schedule_data
                        bloodbank_obj.save()
                #3 get schedule object (whether already exisitng or added by us in step 2 above
                schedule_obj = bloodbank_obj.bloodbank_schedule

                #>>> import json
                #>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
                #[u'foo', {u'bar': [u'baz', Non , 1.0, 2]}]
                #>>> json.dumps([u'foo', {u'bar': [u'baz', None, 1.0, 2]}])
                # '["foo", {"bar": ["baz", null, 1.0, 2]}]' #Therefore the check for type string

                if schedule_obj:
                    schedule_list = bloodbank_obj.bloodbank_schedule #get the conetnt of json field
                    if type(schedule_list) is str:
                        schedule_list = json.loads(schedule_list)
                user_is_reviewer = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)

                if len(is_publisher):
                    user_is_reviewer = True

                return render(request, 'data_management/bloodbank_data/bloodbank_schedule_form.html',
                              dict(schedule_list=schedule_list,
                                   bloodbank_id=bloodbank_id,
                                   day_list=day_list,
                                   tab=5, back_to_url=back_to_url,
                                   user_is_reviewer = user_is_reviewer))

            elif request.method == "POST":
                # check = AttachWithDoctor.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                # schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                # schedule_obj.update(by_appointment=False)
                schedule_obj = bloodbank_obj.bloodbank_schedule
                #if len(check) == 1 and len(schedule_obj) == 1:
                if schedule_obj :
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    # try:
                    #     by_app = request.POST.getlist('by_app')
                    # except:
                    #     by_app = []
                    # if len(by_app) == 0:
                    #     by_app.append('0ff')
                    #
                    # if by_app[0] == 'on':
                    #     schedule_obj.update(by_appointment=True)
                    # else:
                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        #while saving new schedule, the schedule is created as a dictionary which is then appended
                        #to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)

                        schedule_obj = schedule_data
                        bloodbank_obj.bloodbank_schedule = schedule_obj
                        bloodbank_obj.save()
                        messages.success(request, 'Bloodbank schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
                else:
                    schedule_list = []
                    try:
                        if len(schedule_obj) == 0:  # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc
                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            bloodbank_obj.bloodbank_schedule = schedule_data
                            bloodbank_obj.save()
                    except:
                        if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc
                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            bloodbank_obj.bloodbank_schedule = schedule_data
                            bloodbank_obj.save()
                    # 3 get schedule object (whether already exisitng or added by us in step 2 above
                    schedule_obj = bloodbank_obj.bloodbank_schedule
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        # while saving new schedule, the schedule is created as a dictionary which is then appended
                        # to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)
                        schedule_obj = schedule_data
                        bloodbank_obj.bloodbank_schedule = schedule_obj
                        bloodbank_obj.save()
                        messages.success(request, 'Bloodbank schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
        else:
            messages.error(request, 'Bloodbank object not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - delete_bloodbank_schedule                                 #
# By - NISHANK                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_bloodbank_schedule(request):
    try:
        schedule_id = None
        bloodbank_id = None
        schedule_id =  request.GET['bloodbankschid']
        bloodbank_id = request.GET['bloodbank_id']
        if bloodbank_id:
            try :
                bloodbank_obj = BloodBank.objects.get(id = bloodbank_id)
            except:
                bloodbank_obj = None
                str_bloodbank_id = str(bloodbank_id)
                messages.error(request,'Lab object could not be retrieved from database' )
                return HttpResponseRedirect('/bloodbank/schedule/'+str_bloodbank_id+'/')
            if request.method == "GET" and schedule_id != None and bloodbank_obj :
                    #schedule_data_obj = Schedule.objects.filter(schedule_data__contains=[{'id': id_data}])
                    schedule_data_obj_list = bloodbank_obj.bloodbank_schedule
                    # commented by Nishank on 14Nov 2016
                    #update_data = list(schedule_data_obj[0].schedule_data)
                    # exp_data = schedule_data_obj[0].schedule_data
                    # #update_data = _.without(update_data, _.findWhere(update_data, {'id': id_data}))
                    # for i in exp_data:
                    #     if i['id'] == id_data:
                    #         exp_data.remove(i)
                    cindex =-1
                    for entry in schedule_data_obj_list:
                        cindex += 1
                        if entry['id'] == schedule_id :
                            del schedule_data_obj_list[cindex]
                    bloodbank_obj.bloodbank_schedule = schedule_data_obj_list
                    bloodbank_obj.save()
                    messages.success(request, 'Deleted')
                    str_bloodbank_id = str(bloodbank_id)
                    return HttpResponseRedirect('/blood-bank/schedule/' + str_bloodbank_id + '/')
            else:
                str_bloodbank_id = str(bloodbank_id)
                messages.error(request, 'Schedule id not found')
                return HttpResponseRedirect('/blood-bank/schedule/' + str_bloodbank_id + '/')
        else:
            messages.error(request, 'Schedule id not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - bloodbank_verified_fields                                 #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def bloodbank_verified_fields(request, bloodbank_id=None):
    try:
        if request.method == 'GET' and bloodbank_id:
            bloodbank_data = BloodBank.objects.filter(id=bloodbank_id)
            fields_json = bloodbank_data[0].verified_fields

            full_list = []
            verified_list = []
            for i in fields_json:
                for k, v in i.items():
                    full_list.append(k)
                    if v == True:
                        verified_list.append(k)
            #print full_list
            #print verified_list
            return render(request, 'data_management/bloodbank_data/verified_fields.html',
                          {'tab': 'verifiedfields', 'tab_listing': 'bloodbank_listing', 'full_list': full_list,
                           'verified_list': verified_list, 'bloodbank': bloodbank_data[0],'tab_bb':'2'})

        elif request.method == 'POST' and bloodbank_id:
            field_names = request.POST.getlist('vfields')
            bloodbank_data = BloodBank.objects.filter(id=bloodbank_id)
            fields_json = bloodbank_data[0].verified_fields
            full_list = []
            for i in fields_json:
                for k, v in i.items():
                    full_list.append(k)
            for i in full_list:
                if i in field_names:
                    c = -1
                    for x in fields_json:
                        c += 1
                        for k, v in x.items():
                            if k == i:
                                fields_json[c] = {k: True}
                else:
                    c = -1
                    for x in fields_json:
                        c += 1
                        for k, v in x.items():
                            if k == i:
                                fields_json[c] = {k: False}

            checkj = json.dumps(fields_json)
            bloodbank_data.update(verified_fields=fields_json)

            messages.success(request, "Successfully Updated BloodBank Field Meta Data")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        messages.success(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - rehab_services_master_data                                #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def rehab_services_master_data(request):
    try:
        if request.method == "GET":
            rehab_services_master = RehabServices.objects.all().order_by('name')
            paginator = Paginator(rehab_services_master, 100)
            page = request.GET.get('page')
            try:
                rehab_services_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                rehab_services_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                rehab_services_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/rehab_services_master_data_management.html',
                          {'rehab_services_master': rehab_services_master})
    except Exception as e:
        raise Http404

###################################################################
#Name - rehab_services_master_add_edit                            #
#Owner - Nishank                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def rehab_services_master_add_edit(request, rehab_services_master_id=None):
    try:
        if rehab_services_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = RehabServices.objects.get(id=rehab_services_master_id)
                return render(request, 'admin/master_data_management/rehab_services_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = RehabServices.objects.get(id=rehab_services_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Lab department edited successfully")
                    return redirect('rehab_services_master_data_page')
                else:
                    messages.error(request, "Please provide Lab department name")
                    return redirect(reverse("rehab_services_master_edit", args=[rehab_services_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/rehab_services_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = RehabServices(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Lab Department edited successfully")
                    return redirect('rehab_services_master_data_page')
                else:
                    messages.error(request, "Please provide Lab department name")
                    return redirect(reverse("rehab_services_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - rehab_type_master_data                                    #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def rehab_type_master_data(request):
    try:
        if request.method == "GET":
            rehab_type_master = Rehab_type_master.objects.all().order_by('name')
            paginator = Paginator(rehab_type_master, 100)
            page = request.GET.get('page')
            try:
                rehab_type_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                rehab_type_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                rehab_type_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/rehab_type_master_data_management.html',
                          {'rehab_type_master': rehab_type_master})
    except Exception as e:
        raise Http404

####################################################################
# Name - rehab_type_master_add_edit                                #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def rehab_type_master_add_edit(request, rehab_type_master_id=None):
    try:
        if rehab_type_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Rehab_type_master.objects.get(id=rehab_type_master_id)
                return render(request, 'admin/master_data_management/rehab_type_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = Rehab_type_master.objects.get(id=rehab_type_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Rehab Type edited successfully")
                    return redirect('rehab_type_master_data_page')
                else:
                    messages.error(request, "Please provide Rehab Type name")
                    return redirect(reverse("rehab_type_master_edit", args=[rehab_type_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/rehab_type_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Rehab_type_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Rehab Type edited successfully")
                    return redirect('rehab_type_master_data_page')
                else:
                    messages.error(request, "Please provide Rehab Type name")
                    return redirect(reverse("rehab_type_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - rehab_speciality_master_data                              #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def rehab_speciality_master_data(request):
    try:
        if request.method == "GET":
            rehab_speciality_master = Rehab_speciality_master.objects.all().order_by('name')
            paginator = Paginator(rehab_speciality_master, 100)
            page = request.GET.get('page')
            try:
                rehab_speciality_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                rehab_speciality_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                rehab_speciality_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/rehab_speciality_master_data_management.html',
                          {'rehab_speciality_master': rehab_speciality_master})
    except Exception as e:
        raise Http404

###################################################################
#Name - rehab_speciality_master_add_edit                          #
#Owner - Nishank                                                  #
#Review by - ?                                                    #
                                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def rehab_speciality_master_add_edit(request, rehab_speciality_master_id=None):
    try:        
        if rehab_speciality_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                speciality_obj = Rehab_speciality_master.objects.get(id=rehab_speciality_master_id)
                return render(request, 'admin/master_data_management/rehab_speciality_master_add_edit.html',
                              {'type_obj': speciality_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    speciality_obj = Rehab_speciality_master.objects.get(id=rehab_speciality_master_id)
                    speciality_obj.name = name
                    if status == '11':
                        speciality_obj.delete = False
                    else:
                        speciality_obj.delete = True
                    speciality_obj.save()
                    messages.success(request, "Rehab Speciality edited successfully")
                    return redirect('rehab_speciality_master_data_page')
                else:
                    messages.error(request, "Please provide Rehab Speciality name")
                    return redirect(reverse("rehab_speciality_master_edit", args=[rehab_speciality_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/rehab_speciality_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Rehab_speciality_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Rehab Speciality edited successfully")
                    return redirect('rehab_speciality_master_data_page')
                else:
                    messages.error(request, "Please provide Rehab Speciality name")
                    return redirect(reverse("rehab_speciality_master_add"))
    except Exception as e:
        #print e
        raise Http404
    
####################################################################
# Name - add_rehab                                                 #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_rehab(request):
    try:
        if request.method == "GET":
            country_obj = Country.objects.filter(delete=False)
            state_obj = State.objects.filter(delete=False)
            rehab_type_obj = Rehab_type_master.objects.filter(delete=False)
            rehab_services = RehabServices.objects.filter(delete=False)
            rehab_speciality = Rehab_speciality_master.objects.filter(delete=False)
            return render(request, 'data_management/rehab_data/add_rehab.html',
                          {'rehab_add': 'add', 'tab_listing': 'rehab_listing', 'country_obj': country_obj,
                           'state_obj': state_obj, 'rehab_type_obj': rehab_type_obj,
                           'rehab_services': rehab_services, 'rehab_speciality': rehab_speciality})
        elif request.method == "POST":
            clinic_name = request.POST['clinic_name'].strip()
            address = request.POST['address'].strip()
            website = request.POST['website'].strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip(),
            city = city[0]
            location = request.POST['locality_id'].strip()
            rates = request.POST['rates'].strip()
            telephone = request.POST['telephone'].strip()
            email = request.POST['email'].strip()
            doctor_name = request.POST['doctor_name'].strip()
            experience = request.POST['experience'].strip()
            qualification = request.POST['qualification'].strip()
            pincode = request.POST.get('apincode').strip()
            type = request.POST.getlist('rehab_type')
            services = request.POST.getlist('rehab_services')
            speciality = request.POST.getlist('rehab_speciality')
            tempstr = ''
            cc = 0
            if type:
                for i in type:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            type = tempstr

            tempstr = ''
            cc = 0
            if services:
                for i in services:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            services = tempstr

            tempstr = ''
            cc = 0
            if speciality:
                for i in speciality:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            speciality = tempstr

            rehab_locality_coverage_from = request.POST['locality_idfrom'].strip()
            rehab_locality_coverage_to = request.POST['locality_idto'].strip()
            try:
                is_emergency = request.POST['is_emergency'].strip()
            except:
                is_emergency = '0'
            if is_emergency == '1':
                is_emergency = True
            else:
                is_emergency = False
            mobile = request.POST['mobile'].strip()
            # usermanagement_objects_list = request.user.usermanagement_set.all()

            # for i in usermanagement_objects_list:
            #    if i.is_reviewer:
            #        stage = 2
            #    elif i.is_publisher:
            #        stage = 3
            #    else:
            #        stage = 1
            rehab_obj = RehabCenter(clinic_name=clinic_name, address=address, country_id=country, state_id=state,
                                    city_id=city,
                                    locality_id=location,
                                    rates=rates, telephone=telephone,
                                    email=email, doctor_name=doctor_name, experience=experience,
                                    qualification=qualification,

                                    stage_id=2, current_user_id=request.user.id, free_text='',
                                    type=type,

                                    rehab_locality_coverage_from_id=rehab_locality_coverage_from,
                                    rehab_locality_coverage_to_id=rehab_locality_coverage_to,
                                    is_emergency=is_emergency,
                                    mobile=mobile, services=services, speciality=speciality, pincode=pincode,
                                    is_disable=False,website=website)

            rehab_obj.save()
            messages.success(request, "New Rehab Center added successfully")
            # return HttpResponseRedirect('/rehab/listing/?tab=1')
            return HttpResponseRedirect(reverse('rehab-listing'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - Rehab_listing                                             #
# Owner - Jaydeep Verma                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def rehab_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        state_data_obj = State.objects.all().order_by('name')
        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            rehab_obj = RehabCenter.objects.filter(current_user_id=telecaller_id,is_disable=False ).order_by('clinic_name')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            rehab_obj = RehabCenter.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('clinic_name')
        else:
            reviewer_id = 0
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            rehab_obj = RehabCenter.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('clinic_name')
        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:
            # rehab_obj = RehabCenter.objects.filter(current_user_id=telecaller_id).order_by(
            #    'name')  # current_user_id=telecaller_id
            if len(rehab_obj) == 0:
                messages.error(request, "No RehabCenter found")
                return render(request, 'data_management/rehab_data/rehab_listing.html',
                              {'tab_listing': 'rehab_listing'})
            elif len(rehab_obj) > 0:
                paginator = Paginator(rehab_obj, 50)
                page = request.GET.get('page')
                try:
                    rehab_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    rehab_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    rehab_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/rehab_data/rehab_listing.html',
                              dict(rehab=rehab_obj, tab_listing='rehab_listing', state_data_obj=state_data_obj))
        elif reviewer_id:
            rehab_obj = RehabCenter.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('clinic_name')
            if len(rehab_obj) == 0:
                messages.error(request, "No RehabCenter found")
                return render(request, 'data_management/rehab_data/rehab_listing.html',
                              {'tab_listing': 'rehab_listing'})
            elif len(rehab_obj) > 0:
                paginator = Paginator(rehab_obj, 50)
                page = request.GET.get('page')
                try:
                    rehab_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    rehab_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    rehab_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/rehab_data/rehab_listing.html',
                              dict(rehab=rehab_obj, tab_listing='rehab_listing', state_data_obj=state_data_obj))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - rehab_listing_edit                                        #
# BY NISHANK                                                       #
#                                                                  #
#                                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def rehab_listing_edit(request, rehab_id=None):
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_physio_rehab_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_physio_rehab_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    country_obj = Country.objects.filter(delete=False)
    state_obj = State.objects.filter(delete=False)
    city = City.objects.filter(delete=False)
    locality = Locality.objects.filter(delete=False)
    rehab_type_master = Rehab_type_master.objects.filter(delete=False)
    rehab_services_master = RehabServices.objects.filter(delete=False)
    rehab_speciality_master = Rehab_speciality_master.objects.filter(delete=False)
    try:
        tab = request.GET.get('tab')
    except:
        tab = None
    try:
        if rehab_id != None:
            rehab_obj = RehabCenter.objects.get(id=rehab_id)
            if(rehab_obj.current_user_id == request.user.id) or request.user.is_superuser:
                if tab == '1' and request.method == "GET":
                    if rehab_obj:
                        if rehab_obj.services :
                            rehab_services_list = rehab_obj.services.split(',')
                        else:
                            rehab_services_list = None

                        if rehab_obj.speciality :
                            rehab_speciality_list = rehab_obj.speciality.split(',')
                        else:
                            rehab_speciality_list = None
                        if rehab_obj.type :
                            rehab_type_list = rehab_obj.type.split(',')
                        else:
                            rehab_type_list = None
                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        return render(request, 'data_management/rehab_data/edit_rehab_data.html',
                                      {'tab': 'basic', 'tab_listing': 'rehab_listing', 'rehab_obj': rehab_obj,
                                       'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'valid_choice': valid_choice, 'tab':'1',
                                       'city':city,'locality':locality,
                                        'rehab_services_list':rehab_services_list,
                                        'rehab_speciality_list':rehab_speciality_list,
                                        'rehab_type_list':rehab_type_list,
                                        'rehab_type_master':rehab_type_master,
                                        'rehab_services_master':rehab_services_master,
                                        'rehab_speciality_master':rehab_speciality_master,
                                        'user_is_publisher': user_is_publisher
                                        })
                    else:
                        messages.error(request,'Rehab could not be found')
                        return HttpResponseRedirect('/rehab/listing/')
                elif tab == '1' and request.method == "POST":
                    clinic_name = request.POST['clinic_name'].strip()
                    address = request.POST['address'].strip()
                    website = request.POST['website'].strip()
                    country = request.POST['country_id'].strip()
                    state = request.POST['state_id'].strip()
                    city = request.POST['city_id'].strip(),
                    city = city[0]
                    location = request.POST['locality_id'].strip()
                    rates = request.POST['rates'].strip()
                    telephone = request.POST['telephone'].strip()
                    email = request.POST['email'].strip()
                    doctor_name = request.POST['doctor_name'].strip()
                    experience = request.POST['experience'].strip()
                    qualification = request.POST['qualification'].strip()
                    pincode = request.POST.get('apincode').strip()
                    type = request.POST.getlist('rehab_type')
                    mobile = request.POST['mobile'].strip()
                    services = request.POST.getlist('rehab_services')
                    speciality = request.POST.getlist('rehab_speciality')

                    tempstr = ''
                    cc = 0
                    if type:
                        for i in type:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    type = tempstr

                    tempstr = ''
                    cc = 0
                    if services:
                        for i in services:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    services = tempstr

                    tempstr = ''
                    cc = 0
                    if speciality:
                        for i in speciality:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    speciality = tempstr

                    rehab_locality_coverage_from = request.POST['locality_idfrom'].strip()
                    rehab_locality_coverage_to = request.POST['locality_idto'].strip()

                    try:
                        is_emergency = request.POST['is_emergency'].strip()
                    except:
                        is_emergency = '0'
                    if is_emergency == '1':
                        is_emergency = True
                    else:
                        is_emergency = False
                    mobile = request.POST['mobile'].strip()
                    rehab_obj = RehabCenter.objects.get(pk=rehab_id)
                    if rehab_obj:
                        rehab_obj.clinic_name = clinic_name
                        rehab_obj.address = address
                        rehab_obj.country_id = country
                        rehab_obj.state_id = state
                        rehab_obj.city_id = city
                        rehab_obj.locality_id = location
                        rehab_obj.rates = rates
                        rehab_obj.experience = experience
                        rehab_obj.mobile = mobile
                        if rehab_locality_coverage_to != 'msg':
                            rehab_obj.rehab_locality_coverage_to_id = rehab_locality_coverage_to
                        else:
                            rehab_obj.rehab_locality_coverage_to = None

                        if rehab_locality_coverage_from != 'msg':
                            rehab_obj.rehab_locality_coverage_from_id = rehab_locality_coverage_from
                        else:
                            rehab_obj.rehab_locality_coverage_from = None
                        rehab_obj.doctor_name = doctor_name
                        rehab_obj.telephone = telephone
                        rehab_obj.email = email
                        rehab_obj.website = website
                        rehab_obj.type = type
                        rehab_obj.qualification = qualification
                        rehab_obj.services = services
                        rehab_obj.speciality = speciality
                        rehab_obj.is_emergency = is_emergency
                        rehab_obj.pincode = pincode
                        rehab_obj.save()
                        messages.success(request, 'Rehab Data Successfully Updated')
                    else:
                        messages.error(request, 'Rehab Not Found in records')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect((reverse('publisher-rehab-listing'))+'?tab=1')
                    return HttpResponseRedirect('/rehab/edit/' + rehab_id + '/?tab=1')

            else:
                messages.error(request, 'Access Denied')
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-rehab-listing'))
                return HttpResponseRedirect(reverse('rehab-listing'))

        else:
            messages.error(request,'Rehab Not Found')
            is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-rehab-listing'))
            return HttpResponseRedirect(reverse('rehab-listing'))

    except  Exception as e:
        #print e
        raise Http404
    
####################################################################
# Name - mark_as_complete_caller_rehab                             #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_rehab(request):
    try:
        if request.method == 'POST':
            rehab_id = request.POST['rehab_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            rehab_obj = RehabCenter.objects.get(id=rehab_id, current_user_id = request.user.id)
            if rehab_obj and reviewer_data_id and valid_choice_id:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    rehab_obj.current_user = User.objects.get(id=reviewer_data_id)
                    rehab_obj.previous_user = request.user.id
                    rehab_obj.stage = Stage.objects.get(pk=3)
                    rehab_obj.free_text = ''
                    rehab_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    rehab_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('rehab-listing'))
                except:
                    raise Http404
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('rehab-listing'))
    except Exception as e:
        return HttpResponse("Something Bad Happened")

####################################################################
# Name - mark_as_complete_reviewer_rehab                           #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_rehab(request):
    try:
        if request.method == 'POST':
            rehab_id = request.POST['rehab_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            rehab_obj = RehabCenter.objects.get(id=rehab_id, current_user_id=request.user.id)
            if rehab_obj and publisher_data_id and valid_choice_id:
                try:
                    rehab_obj.current_user = User.objects.get(id=publisher_data_id)
                    rehab_obj.previous_user = request.user.id
                    rehab_obj.stage = Stage.objects.get(pk=4)
                    rehab_obj.free_text = ''
                    rehab_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    rehab_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('rehab-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('rehab-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_reverse_caller_rehab                              #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_rehab(request):
    try:
        if request.method == 'POST':
            rehab_id = request.POST['rehab_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            rehab_obj = RehabCenter.objects.get(id=rehab_id, current_user_id=request.user.id)

            if rehab_obj and caller_data_id and free_text:
                try:
                    rehab_obj.current_user = User.objects.get(id=caller_data_id)
                    rehab_obj.previous_user = request.user.id
                    rehab_obj.stage = Stage.objects.get(pk=2)
                    rehab_obj.free_text = free_text
                    rehab_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-rehab-listing'))
                    return HttpResponseRedirect(reverse('rehab-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-rehab-listing'))
        return HttpResponseRedirect(reverse('rehab-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_reverse_reviewer_rehab                             #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_rehab(request):
    try:
        if request.method == 'POST':
            rehab_id = request.POST['rehab_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            rehab_obj = RehabCenter.objects.get(id=rehab_id, current_user_id=request.user.id)
            if rehab_obj and reviewer_data_id and free_text:
                try:
                    rehab_obj.current_user = User.objects.get(id=reviewer_data_id)
                    rehab_obj.previous_user = request.user.id
                    rehab_obj.stage = Stage.objects.get(pk=3)
                    rehab_obj.free_text = free_text
                    rehab_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    return HttpResponseRedirect(reverse('rehab-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('rehab-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_complete_publisher_rehab                           #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_rehab(request):
    try:
        if request.method == 'POST':
            rehab_id = request.POST['rehab_id']
            rehab_obj = RehabCenter.objects.get(id=rehab_id, current_user_id=request.user.id)
            if rehab_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    rehab_obj.stage = Stage.objects.get(pk=5)
                    rehab_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    return HttpResponseRedirect(reverse('rehab-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('rehab-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - rehab_publisher_listing                                   #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def rehab_publisher_listing(request):
    try:
        search_name = None
        stage_id = None
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        try:
            search_name = request.GET['search_name']
        except:
            search_name = None
        try:
            stage_id = request.GET['stage_id']
        except:
            stage_id = None
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if publisher_id:
            if search_name:
                rehab_obj = RehabCenter.objects.filter(Q(clinic_name__icontains=search_name), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('clinic_name')

            elif stage_id:
                rehab_obj = RehabCenter.objects.filter(Q(stage_id=int(stage_id)), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('clinic_name')

            elif category_id:
                rehab_obj = RehabCenter.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('clinic_name')
                category_filter = int(category_id)
            else:
                rehab_obj = RehabCenter.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('clinic_name')
            if len(rehab_obj) == 0:
                messages.error(request, "No Rehab found")
                return render(request, 'publisher/rehab/rehab_listing_publisher.html',
                              {'tab_listing': 'rehab_listing', 'tab': 'rehab-listing',
                               'stage_data': stage_data_obj,
                               'category_obj': category_data, 'category_filter': category_filter,
                               'stage_id':stage_id,'search_name':search_name})

            paginator = Paginator(rehab_obj, 50)
            page = request.GET.get('page')
            try:
                rehab_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                rehab_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                rehab_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/rehab/rehab_listing_publisher.html',
                          dict(rehab_obj=rehab_obj, tab_listing='rehab_listing', tab='rehab-listing',
                               stage_data=stage_data_obj,
                               category_obj=category_data, category_filter=category_filter,
                               stage_id=stage_id,search_name=search_name))
        else:
            return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        raise Http404

####################################################################
# Name - schedule_rehab                                            #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def schedule_rehab(request, rehab_id=None):
    try:
        back_to_url = request.META.get('HTTP_REFERER')
        try:
            rehab_obj = RehabCenter.objects.get(id = rehab_id)
        except:
            rehab_obj = None
        if rehab_obj :
            if request.method == "GET":
                schedule_obj = rehab_obj.rehab_schedule
                schedule_list = []
                # This case add by jitendra dixit temporary use
                schedule_id = None
                try:
                    if len(schedule_obj) == 0: # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc
                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        rehab_obj.rehab_schedule = schedule_data
                        rehab_obj.save()
                except:
                    if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc
                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        rehab_obj.rehab_schedule = schedule_data
                        rehab_obj.save()
                #3 get schedule object (whether already exisitng or added by us in step 2 above
                schedule_obj = rehab_obj.rehab_schedule

                #>>> import json
                #>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
                #[u'foo', {u'bar': [u'baz', Non , 1.0, 2]}]
                #>>> json.dumps([u'foo', {u'bar': [u'baz', None, 1.0, 2]}])
                # '["foo", {"bar": ["baz", null, 1.0, 2]}]' #Therefore the check for type string

                if schedule_obj:
                    schedule_list = rehab_obj.rehab_schedule #get the conetnt of json field
                    if type(schedule_list) is str:
                        schedule_list = json.loads(schedule_list)

                user_is_reviewer = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_reviewer = True
                return render(request, 'data_management/rehab_data/rehab_schedule_form.html',
                              dict(schedule_list=schedule_list,
                                   rehab_id=rehab_id,
                                   day_list=day_list,
                                   tab=5, back_to_url=back_to_url,
                                   user_is_reviewer = user_is_reviewer))

            elif request.method == "POST":
                # check = AttachWithDoctor.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                # schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                # schedule_obj.update(by_appointment=False)
                schedule_obj = rehab_obj.rehab_schedule
                #if len(check) == 1 and len(schedule_obj) == 1:
                if schedule_obj :
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    # try:
                    #     by_app = request.POST.getlist('by_app')
                    # except:
                    #     by_app = []
                    # if len(by_app) == 0:
                    #     by_app.append('0ff')
                    #
                    # if by_app[0] == 'on':
                    #     schedule_obj.update(by_appointment=True)
                    # else:
                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        #while saving new schedule, the schedule is created as a dictionary which is then appended
                        #to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)
                        schedule_obj = schedule_data
                        rehab_obj.rehab_schedule = schedule_obj
                        rehab_obj.save()
                        messages.success(request, 'Rehab schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
                else:
                    schedule_list = []
                    try:
                        if len(schedule_obj) == 0:  # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc
                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            rehab_obj.rehab_schedule = schedule_data
                            rehab_obj.save()
                    except:
                        if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc
                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            rehab_obj.rehab_schedule = schedule_data
                            rehab_obj.save()
                    # 3 get schedule object (whether already exisitng or added by us in step 2 above
                    schedule_obj = rehab_obj.rehab_schedule
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        # while saving new schedule, the schedule is created as a dictionary which is then appended
                        # to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)

                        schedule_obj = schedule_data
                        rehab_obj.rehab_schedule = schedule_obj
                        rehab_obj.save()
                        messages.success(request, 'Rehab schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
        else:
            messages.error(request, 'Rehab object not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - delete_rehab_schedule                                     #
# By - NISHANK                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_rehab_schedule(request):
    try:
        schedule_id = None
        rehab_id = None
        schedule_id =  request.GET['rehabschid']
        rehab_id = request.GET['rehab_id']
        if rehab_id:
            try :
                rehab_obj = RehabCenter.objects.get(id = rehab_id)
            except:
                rehab_obj = None
                str_rehab_id = str(rehab_id)
                messages.error(request,'Rehab object could not be retrieved from database' )
                return HttpResponseRedirect('/rehab/schedule/'+str_rehab_id+'/')
            if request.method == "GET" and schedule_id != None and rehab_obj :
                    #schedule_data_obj = Schedule.objects.filter(schedule_data__contains=[{'id': id_data}])
                    schedule_data_obj_list = rehab_obj.rehab_schedule
                    # commented by Nishank on 14Nov 2016
                    #update_data = list(schedule_data_obj[0].schedule_data)
                    # exp_data = schedule_data_obj[0].schedule_data
                    # #update_data = _.without(update_data, _.findWhere(update_data, {'id': id_data}))
                    # for i in exp_data:
                    #     if i['id'] == id_data:
                    #         exp_data.remove(i)
                    cindex =-1
                    for entry in schedule_data_obj_list:
                        cindex += 1
                        if entry['id'] == schedule_id :
                            del schedule_data_obj_list[cindex]

                    rehab_obj.rehab_schedule = schedule_data_obj_list
                    rehab_obj.save()
                    messages.success(request, 'Deleted')
                    str_rehab_id = str(rehab_id)
                    return HttpResponseRedirect('/rehab/schedule/' + str_rehab_id + '/')
            else:
                str_rehab_id = str(rehab_id)
                messages.error(request, 'Schedule id not found')
                return HttpResponseRedirect('/rehab/schedule/' + str_rehab_id + '/')
        else:
            messages.error(request, 'Schedule id not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - rehab_data_manage                                         #
# Owner - Jaydeep                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def rehab_data_manage(request):
    try:
        return render(request, 'admin/rehab_management/rehab_management.html',
                      {'tab': 'data', 'crosal': 'rehabmanage'})
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - Rehab_data_by_users                                       #
# Owner - Jaydeep Verma                                            #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def rehab_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            rehab_all_data = RehabCenter.objects.filter(current_user_id=search_data).order_by('clinic_name')
            paginator = Paginator(rehab_all_data, 100)
            page = request.GET.get('page')
            try:
                rehab_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                rehab_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                rehab_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/rehab_management/rehab_by_user.html',
                      {'tab': 'data', 'crosal': 'rehabbymanage', 'rehab_all_data': rehab_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})
        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            rehab_all_data = RehabCenter.objects.filter(clinic_name__icontains=search_data_two).order_by('clinic_name')
            paginator = Paginator(rehab_all_data, 3)
            page = request.GET.get('page')
            try:
                rehab_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                rehab_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                rehab_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/rehab_management/rehab_by_user.html',
                          {'tab': 'data', 'crosal': 'rehabbymanage', 'rehab_all_data': rehab_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})

        rehab_all_data = RehabCenter.objects.all().order_by('clinic_name')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(rehab_all_data, 100)
        page = request.GET.get('page')
        try:
            rehab_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            rehab_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            rehab_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/rehab_management/rehab_by_user.html',
                      {'tab': 'data', 'crosal': 'rehabbymanage', 'rehab_all_data': rehab_all_data,
                       'user_data_obj': user_data_obj})
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - rehab_data_by_stages                                      #
# Owner - Jaydeep Verma                                            #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def rehab_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            rehab_all_data = RehabCenter.objects.filter(stage_id=stage_id).order_by('clinic_name')
        else:
            rehab_all_data = RehabCenter.objects.all().order_by('clinic_name')
            stage_id=None
        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(rehab_all_data, 100)
        page = request.GET.get('page')
        try:
            rehab_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            rehab_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            rehab_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/rehab_management/rehab_by_stages.html',
                      {'tab': 'data', 'crosal': 'rehabbymanage', 'rehab_all_data': rehab_all_data,
                       'stage_data': stage_data,'stage_no':stage_id})
    except:
        raise Http404
    
####################################################################
# Name - rehab_assignment                                          #
#  Owner - Jaydeep verma                                           #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def rehab_assignment(request):
    try:
        stage_filter = False
        user_filter = False
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all().order_by('name')
        city_list = City.objects.all().order_by('name')
        locality_list = Locality.objects.all().order_by('name')
        user_data = User.objects.all().order_by('username')
        locality_obj = None
        city_obj = None
        current_user_id = None
        user_id_data = None
        stage_id = None
        stage_id_data = None
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            rehab_obj = RehabCenter.objects.filter(name__icontains=search_data).order_by('clinic_name')
            paginator = Paginator(rehab_obj, 100)
            page = request.GET.get('page')
            try:
                rehab_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                rehab_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                rehab_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/rehab_management/rehab_assign.html',
                    {'tab': 'data', 'crosal': 'rehabbymanage', 'stage_data': stage_data,
                    'rehab': rehab_obj, 'state_data_obj': state_data_obj,'search_data':search_data,
                     'city_list':city_list,'locality_list':locality_list})
        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'filter':
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = None
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = None
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')
                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            rehab_obj = RehabCenter.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('clinic_name')

                        elif user_id_data:
                            rehab_obj = RehabCenter.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data).order_by('clinic_name')
                        elif stage_id_data:
                            rehab_obj = RehabCenter.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          stage_id=stage_id_data).order_by('clinic_name')
                    else:
                        rehab_obj = RehabCenter.objects.filter(state_id=state_filter,
                                                  city_id=city_data,
                                                  locality_id=locality_data).order_by('clinic_name')

                    paginator = Paginator(rehab_obj, 100)
                    page = request.GET.get('page')
                    try:
                        rehab_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        rehab_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        rehab_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/rehab_management/rehab_assign.html',
                                  {'tab': 'data', 'crosal': 'rehabbymanage', 'stage_data': stage_data,
                                   'rehab': rehab_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                    'filter_name':filter_name,'state_data':state_data,
                                    'city_data':city_data,'locality_data':locality_data,
                                   'city_list':city_list,'locality_list':locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                elif city_data:
                    if user_id_data or stage_id_data:
                        if user_id_data and  stage_id_data :
                            rehab_obj = RehabCenter.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('clinic_name')
                        elif user_id_data:
                            rehab_obj = RehabCenter.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data).order_by('clinic_name')
                        elif stage_id_data:
                            rehab_obj = RehabCenter.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          stage_id=stage_id_data).order_by('clinic_name')
                    else:
                        rehab_obj = RehabCenter.objects.filter(state=state_data, city=city_data).order_by(
                            'clinic_name')
                    paginator = Paginator(rehab_obj, 100)
                    page = request.GET.get('page')
                    try:
                        rehab_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        rehab_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        rehab_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/rehab_management/rehab_assign.html',
                                  {'tab': 'data', 'crosal': 'rehabbymanage', 'stage_data': stage_data,
                                   'rehab': rehab_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                else:
                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            rehab_obj = RehabCenter.objects.filter(state_id=state_filter,
                                                                     current_user_id=user_id_data,
                                                                     stage_id=stage_id_data).order_by('clinic_name')
                        elif user_id_data:
                            rehab_obj = RehabCenter.objects.filter(state_id=state_filter,
                                                                     current_user_id=user_id_data).order_by('clinic_name')
                        elif stage_id_data:
                            rehab_obj = RehabCenter.objects.filter(state_id=state_filter,
                                                                     stage_id=stage_id_data).order_by('clinic_name')
                    else:
                        rehab_obj = RehabCenter.objects.filter(state=state_data).order_by('clinic_name')
                    paginator = Paginator(rehab_obj, 100)
                    page = request.GET.get('page')
                    try:
                        rehab_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        rehab_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        rehab_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/rehab_management/rehab_assign.html',
                                  {'tab': 'data', 'crosal': 'rehabbymanage', 'stage_data': stage_data,
                                   'rehab': rehab_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
            ##########
            elif not state_data and user_id_data or stage_id_data:
                if user_id_data or stage_id_data:
                    if user_id_data and stage_id_data:
                        rehab_obj = RehabCenter.objects.filter(current_user_id=user_id_data,
                                                               stage_id=stage_id_data).order_by('clinic_name')

                    elif user_id_data:
                        rehab_obj = RehabCenter.objects.filter(current_user_id=user_id_data).order_by('clinic_name')
                    elif stage_id_data:
                        rehab_obj = RehabCenter.objects.filter(stage_id=stage_id_data).order_by('clinic_name')

                else:
                    rehab_obj = None
                paginator = Paginator(rehab_obj, 100)
                page = request.GET.get('page')
                try:
                    rehab_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    rehab_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    rehab_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/rehab_management/rehab_assign.html',
                              {'tab': 'data', 'crosal': 'rehabbymanage', 'stage_data': stage_data,
                               'rehab': rehab_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'city_list': city_list, 'locality_list': locality_list,
                               'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                               'current_user_id':user_id_data,'stage_id':stage_id_data
                               })
            else:
                rehab_obj = RehabCenter.objects.all().order_by('clinic_name')
                paginator = Paginator(rehab_obj, 100)
                page = request.GET.get('page')
                try:
                    rehab_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    rehab_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    rehab_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/rehab_management/rehab_assign.html',
                              {'tab': 'data', 'crosal': 'rehabbymanage', 'stage_data': stage_data,
                               'rehab': rehab_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'city_list': city_list, 'locality_list': locality_list,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'current_user_id': user_id_data, 'stage_id': stage_id_data
                               })

        else:

            filter_name = None
            state_data = None
            city_data = None
            locality_data = None
            rehab_obj = RehabCenter.objects.all().order_by('clinic_name')
            paginator = Paginator(rehab_obj, 100)
            page = request.GET.get('page')
            try:
                rehab_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                rehab_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                rehab_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/rehab_management/rehab_assign.html',
                          {'tab': 'data', 'crosal': 'rehabbymanage', 'stage_data': stage_data,
                           'rehab': rehab_obj, 'state_data_obj': state_data_obj,
                           'city_obj': city_obj, 'locality_obj': locality_obj,
                           'locality_filter': locality_filter, 'city_filter': city_filter,
                           'state_filter': state_filter,
                           'filter_name': filter_name, 'state_data': state_data,
                           'city_data': city_data, 'locality_data': locality_data,
                           'city_list': city_list, 'locality_list': locality_list,
                           'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                           'current_user_id':user_id_data,'stage_id':stage_id_data
                           })
    except Exception as e:
        #print e
        raise Http404
    
####################################################################
# Name - Rehab assignment                                          #
# Owner - Jaydeep                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_rehab(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                nbslist = []
                nbflist = []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = RehabCenter.objects.filter(id=checkedValues[i]).update(
                            current_user_id=assign_user,
                            stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue
                my_send_mail(request, 'rehabitation', nbslist, nbflist, 'Rehab Assignment', 'Assigned')
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/rehab/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - delete_pharmacy_schedule                                  #
# By - NISHANK                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_pharmacy_schedule(request):
    try:
        schedule_id = None
        pharmacy_id = None
        schedule_id =  request.GET['pharmacyschid']
        pharmacy_id = request.GET['pharmacy_id']
        if pharmacy_id:
            try :
                pharmacy_obj = MedicalPharmacyStore.objects.get(id = pharmacy_id)
            except:
                pharmacy_obj = None
                str_pharmacy_id = str(pharmacy_id)
                messages.error(request,'Pharmacy object could not be retrieved from database' )
                return HttpResponseRedirect('/pharmacy/schedule/'+str_pharmacy_id+'/')
            if request.method == "GET" and schedule_id != None and pharmacy_obj :

                    #schedule_data_obj = Schedule.objects.filter(schedule_data__contains=[{'id': id_data}])
                    schedule_data_obj_list = pharmacy_obj.pharmacy_schedule
                    # commented by Nishank on 14Nov 2016
                    #update_data = list(schedule_data_obj[0].schedule_data)
                    # exp_data = schedule_data_obj[0].schedule_data
                    # #update_data = _.without(update_data, _.findWhere(update_data, {'id': id_data}))
                    # for i in exp_data:
                    #     if i['id'] == id_data:
                    #         exp_data.remove(i)
                    cindex =-1
                    for entry in schedule_data_obj_list:
                        cindex += 1
                        if entry['id'] == schedule_id :
                            del schedule_data_obj_list[cindex]

                    pharmacy_obj.pharmacy_schedule = schedule_data_obj_list
                    pharmacy_obj.save()
                    messages.success(request, 'Deleted')
                    str_pharmacy_id = str(pharmacy_id)
                    return HttpResponseRedirect('/pharmacy/schedule/' + str_pharmacy_id + '/')
            else:
                str_pharmacy_id = str(pharmacy_id)
                messages.error(request, 'Schedule id not found')
                return HttpResponseRedirect('/pharmacy/schedule/' + str_pharmacy_id + '/')
        else:
            messages.error(request, 'Schedule id not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - schedule_pharmacy                                         #
# By Nishank                                                       #
####################################################################

@login_required(login_url='/')
@csrf_exempt
def schedule_pharmacy(request, pharmacy_id=None):
    try:
        back_to_url = request.META.get('HTTP_REFERER')
        try:
            pharmacy_obj = MedicalPharmacyStore.objects.get(id = pharmacy_id)
        except:
            pharmacy_obj = None
        if pharmacy_obj :
            if request.method == "GET":

                schedule_obj = pharmacy_obj.pharmacy_schedule
                schedule_list = []
                # This case add by jitendra dixit temporary use
                schedule_id = None
                try:
                    if len(schedule_obj) == 0: # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc

                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        pharmacy_obj.pharmacy_schedule = schedule_data
                        pharmacy_obj.save()
                except:
                    if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc

                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        pharmacy_obj.pharmacy_schedule = schedule_data
                        pharmacy_obj.save()
                #3 get schedule object (whether already exisitng or added by us in step 2 above
                schedule_obj = pharmacy_obj.pharmacy_schedule
                #>>> import json
                #>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
                #[u'foo', {u'bar': [u'baz', Non , 1.0, 2]}]
                #>>> json.dumps([u'foo', {u'bar': [u'baz', None, 1.0, 2]}])
                # '["foo", {"bar": ["baz", null, 1.0, 2]}]' #Therefore the check for type string

                if schedule_obj:
                    schedule_list = pharmacy_obj.pharmacy_schedule #get the conetnt of json field
                    if type(schedule_list) is str:
                        schedule_list = json.loads(schedule_list)

                user_is_reviewer = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_reviewer = True
                return render(request, 'data_management/pharmacy_data/pharmacy_schedule_form.html',
                              dict(schedule_list=schedule_list,
                                   pharmacy_id=pharmacy_id,
                                   day_list=day_list,
                                   tab=5, back_to_url=back_to_url,
                                   user_is_reviewer = user_is_reviewer))

            elif request.method == "POST":
                # check = AttachWithDoctor.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                # schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                # schedule_obj.update(by_appointment=False)
                schedule_obj = pharmacy_obj.pharmacy_schedule
                #if len(check) == 1 and len(schedule_obj) == 1:
                if schedule_obj :
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    # try:
                    #     by_app = request.POST.getlist('by_app')
                    # except:
                    #     by_app = []
                    # if len(by_app) == 0:
                    #     by_app.append('0ff')
                    #
                    # if by_app[0] == 'on':
                    #     schedule_obj.update(by_appointment=True)
                    # else:
                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        #while saving new schedule, the schedule is created as a dictionary which is then appended
                        #to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)
                        schedule_obj = schedule_data
                        pharmacy_obj.pharmacy_schedule = schedule_obj
                        pharmacy_obj.save()
                        messages.success(request, 'Pharmacy schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
                else:
                    schedule_list = []
                    try:
                        if len(schedule_obj) == 0:  # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc
                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            pharmacy_obj.pharmacy_schedule = schedule_data
                            pharmacy_obj.save()
                    except:
                        if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc
                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            pharmacy_obj.pharmacy_schedule = schedule_data
                            pharmacy_obj.save()
                    # 3 get schedule object (whether already exisitng or added by us in step 2 above
                    schedule_obj = pharmacy_obj.pharmacy_schedule
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        # while saving new schedule, the schedule is created as a dictionary which is then appended
                        # to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)
                        schedule_obj = schedule_data
                        pharmacy_obj.pharmacy_schedule = schedule_obj
                        pharmacy_obj.save()
                        messages.success(request, 'Pharmacy schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
        else:
            messages.error(request, 'Pharmacy object not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - ambulance_services_master_data                            #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def ambulance_services_master_data(request):
    try:
        if request.method == "GET":
            ambulance_services_master = AmbulanceServices.objects.all().order_by('name')
            paginator = Paginator(ambulance_services_master, 100)
            page = request.GET.get('page')
            try:
                ambulance_services_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                ambulance_services_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                ambulance_services_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/ambulance_services_master_data_management.html',
                          {'ambulance_services_master': ambulance_services_master})
    except Exception as e:
        raise Http404

###################################################################
#Name - ambulance_services_master_add_edit                        #
#Owner - Nishank                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def ambulance_services_master_add_edit(request, ambulance_services_master_id=None):
    try:
        if ambulance_services_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = AmbulanceServices.objects.get(id=ambulance_services_master_id)
                return render(request, 'admin/master_data_management/ambulance_services_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = AmbulanceServices.objects.get(id=ambulance_services_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Lab department edited successfully")
                    return redirect('ambulance_services_master_data_page')
                else:
                    messages.error(request, "Please provide Lab department name")
                    return redirect(reverse("ambulance_services_master_edit", args=[ambulance_services_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/ambulance_services_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = AmbulanceServices(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Lab Department edited successfully")
                    return redirect('ambulance_services_master_data_page')
                else:
                    messages.error(request, "Please provide Lab department name")
                    return redirect(reverse("ambulance_services_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - ambulance_type_master_data                                #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def ambulance_type_master_data(request):
    try:
        if request.method == "GET":
            ambulance_type_master = Ambulance_type_master.objects.all().order_by('name')
            paginator = Paginator(ambulance_type_master, 100)
            page = request.GET.get('page')
            try:
                ambulance_type_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                ambulance_type_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                ambulance_type_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/ambulance_type_master_data_management.html',
                          {'ambulance_type_master': ambulance_type_master})
    except Exception as e:
        raise Http404

####################################################################
# Name - ambulance_type_master_add_edit                            #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def ambulance_type_master_add_edit(request, ambulance_type_master_id=None):
    try:
        if ambulance_type_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Ambulance_type_master.objects.get(id=ambulance_type_master_id)

                return render(request, 'admin/master_data_management/ambulance_type_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = Ambulance_type_master.objects.get(id=ambulance_type_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Ambulance Type edited successfully")
                    return redirect('ambulance_type_master_data_page')
                else:
                    messages.error(request, "Please provide Ambulance Type name")
                    return redirect(reverse("ambulance_type_master_edit", args=[ambulance_type_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/ambulance_type_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Ambulance_type_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Ambulance Type edited successfully")
                    return redirect('ambulance_type_master_data_page')
                else:
                    messages.error(request, "Please provide ambulance Type name")
                    return redirect(reverse("ambulance_type_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - nurse_bureau_services_master_data                         #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def nurse_bureau_services_master_data(request):
    try:
        if request.method == "GET":
            nurse_bureau_services_master = Nurse_bureauServices.objects.all().order_by('name')
            paginator = Paginator(nurse_bureau_services_master, 100)
            page = request.GET.get('page')
            try:
                nurse_bureau_services_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                nurse_bureau_services_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                nurse_bureau_services_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/nurse_bureau_services_master_data_management.html',
                          {'nurse_bureau_services_master': nurse_bureau_services_master})
    except Exception as e:
        raise Http404

###################################################################
#Name - nurse_bureau_services_master_add_edit                     #
#Owner - Nishank                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def nurse_bureau_services_master_add_edit(request, nurse_bureau_services_master_id=None):
    try:
        if nurse_bureau_services_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Nurse_bureauServices.objects.get(id=nurse_bureau_services_master_id)

                return render(request, 'admin/master_data_management/nurse_bureau_services_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = Nurse_bureauServices.objects.get(id=nurse_bureau_services_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Nurse Bureau edited successfully")
                    return redirect('nurse_bureau_services_master_data_page')
                else:
                    messages.error(request, "Please provide Nurse Bureau name")
                    return redirect(reverse("nurse_bureau_services_master_edit", args=[nurse_bureau_services_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/nurse_bureau_services_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Nurse_bureauServices(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "Nurse Bureau edited successfully")
                    return redirect('nurse_bureau_services_master_data_page')
                else:
                    messages.error(request, "Please provide Nurse Bureau name")
                    return redirect(reverse("nurse_bureau_services_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - nurse_bureau_speciality_master_data                       #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def nurse_bureau_speciality_master_data(request):
    try:
        if request.method == "GET":
            nurse_bureau_speciality_master = Nurse_bureau_speciality_master.objects.all().order_by('name')
            paginator = Paginator(nurse_bureau_speciality_master, 100)
            page = request.GET.get('page')
            try:
                nurse_bureau_speciality_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                nurse_bureau_speciality_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                nurse_bureau_speciality_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/nurse_bureau_speciality_master_data_management.html',
                          {'nurse_bureau_speciality_master': nurse_bureau_speciality_master})
    except Exception as e:
        raise Http404

###################################################################
#Name - nurse_bureau_speciality_master_add_edit                   #
#Owner - Nishank                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def nurse_bureau_speciality_master_add_edit(request, nurse_bureau_speciality_master_id=None):
    try:
        if nurse_bureau_speciality_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                speciality_obj = Nurse_bureau_speciality_master.objects.get(id=nurse_bureau_speciality_master_id)
                return render(request, 'admin/master_data_management/nurse_bureau_speciality_master_add_edit.html',
                              {'type_obj': speciality_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    speciality_obj = Nurse_bureau_speciality_master.objects.get(id=nurse_bureau_speciality_master_id)
                    speciality_obj.name = name
                    if status == '11':
                        speciality_obj.delete = False
                    else:
                        speciality_obj.delete = True
                    speciality_obj.save()
                    messages.success(request, "nurse_bureau Speciality edited successfully")
                    return redirect('nurse_bureau_speciality_master_data_page')
                else:
                    messages.error(request, "Please provide nurse_bureau Speciality name")
                    return redirect(reverse("nurse_bureau_speciality_master_edit", args=[nurse_bureau_speciality_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/nurse_bureau_speciality_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Nurse_bureau_speciality_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New nurse_bureau Speciality edited successfully")
                    return redirect('nurse_bureau_speciality_master_data_page')
                else:
                    messages.error(request, "Please provide nurse_bureau Speciality name")
                    return redirect(reverse("nurse_bureau_speciality_master_add"))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - add_nurse_bureau                                          #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_nurse_bureau(request):
    try:
        if request.method == "GET":
            country_obj = Country.objects.filter(delete=False)
            state_obj = State.objects.filter(delete=False)
            nurse_bureau_services = Nurse_bureauServices.objects.filter(delete=False)
            nurse_bureau_speciality = Nurse_bureau_speciality_master.objects.filter(delete=False)
            return render(request, 'data_management/nurse_bureau_data/add_nurse_bureau.html',
                          {'nurse_bureau_add': 'add', 'tab_listing': 'nurse_bureau-listing', 'country_obj': country_obj,
                           'state_obj': state_obj,
                           'nurse_bureau_services': nurse_bureau_services, 'nurse_bureau_speciality': nurse_bureau_speciality})
        elif request.method == "POST":
            name = request.POST['name'].strip()
            address = request.POST['address'].strip()
            pincode = request.POST.get('apincode').strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip()
            #city = city[0]
            location = request.POST['locality_id'].strip()
            certification = request.POST['certification'].strip()
            experience = request.POST['experience'].strip()
            services = request.POST.getlist('nurse_bureau_services')
            speciality = request.POST.getlist('nurse_bureau_speciality')
            nurse_bureau_locality_coverage_from = request.POST['locality_idfrom'].strip()
            nurse_bureau_locality_coverage_to = request.POST['locality_idto'].strip()
            email = request.POST['email'].strip()
            rates = request.POST['rates'].strip()
            telephone = request.POST['telephone'].strip()
            mobile = request.POST['mobile'].strip()
            contact_person = request.POST['contact_person'].strip()
            branches = request.POST['branches'].strip()
            website = request.POST['website'].strip()
            nurse_bureau_packages = request.POST['nurse_bureau_packages'].strip()
            no_of_nurses = request.POST['no_of_nurses'].strip()
            nurses_experience = request.POST['nurses_experience'].strip()
            contact_person_contact_no = request.POST['contact_person_contact_no'].strip()
            contact_person_email = request.POST['contact_person_email'].strip()
            remarks = request.POST['remarks'].strip()
            tempstr = ''
            cc = 0
            if services:
                for i in services:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            services = tempstr

            tempstr = ''
            cc = 0
            if speciality:
                for i in speciality:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            speciality = tempstr

            try:
                is_emergency = request.POST['is_emergency'].strip()
            except:
                is_emergency = '0'
            if is_emergency == '1':
                is_emergency = True
            else:
                is_emergency = False

            mobile = request.POST['mobile'].strip()
            nurse_bureau_obj = Nurse_Bureau(name=name,address=address, pincode=pincode,
                                            country_id=country, state_id=state,
                                            city_id=city,
                                            locality_id=location,
                                            certification=certification, experience=experience,
                                            services=services, speciality=speciality,
                                            nurse_bureau_locality_coverage_from_id=nurse_bureau_locality_coverage_from,
                                            nurse_bureau_locality_coverage_to_id=nurse_bureau_locality_coverage_to,
                                            rates=rates, telephone=telephone,
                                            email=email,mobile=mobile,
                                            stage_id=2, current_user_id=request.user.id, free_text='',
                                            is_disable=False,branches=branches,website=website,
                                            nurse_bureau_packages=nurse_bureau_packages,
                                            no_of_nurses=no_of_nurses,nurses_experience=nurses_experience,
                                            contact_person_contact_no=contact_person_contact_no,
                                            contact_person_email=contact_person_email,contact_person=contact_person,
                                            remarks=remarks)
            nurse_bureau_obj.save()
            messages.success(request, "New Nurse Bureau added successfully")
            # return HttpResponseRedirect('/nurse_bureau/listing/?tab=1')
            return HttpResponseRedirect(reverse('nurse_bureau-listing'))
    except Exception as e:
        #print e
        raise Http404


####################################################################
# Name - nurse_bureau_listing_edit                                 #
# BY NISHANK                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def nurse_bureau_listing_edit(request, nurse_bureau_id=None):
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_nurse_bureau_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_nurse_bureau_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    country_obj = Country.objects.filter(delete=False)
    state_obj = State.objects.filter(delete=False)
    city = City.objects.filter(delete=False)
    locality = Locality.objects.filter(delete=False)
    nurse_bureau_type_master = Rehab_type_master.objects.filter(delete=False)   # TODO : TO BE DELETED
    nurse_bureau_services_master = Nurse_bureauServices.objects.filter(delete=False)
    nurse_bureau_speciality_master = Nurse_bureau_speciality_master.objects.filter(delete=False)
    try:
        tab = request.GET.get('tab')
    except:
        tab = None
    try:
        if nurse_bureau_id is not None:
            nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id)
            if(nurse_bureau_obj.current_user_id == request.user.id) or request.user.is_superuser:
                if tab == '1' and request.method == "GET":
                    nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id)
                    if nurse_bureau_obj:
                        if nurse_bureau_obj.services :
                            nurse_bureau_services_list = nurse_bureau_obj.services.split(',')
                        else:
                            nurse_bureau_services_list = None
                        if nurse_bureau_obj.speciality :
                            nurse_bureau_speciality_list = nurse_bureau_obj.speciality.split(',')
                        else:
                            nurse_bureau_speciality_list = None
                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        return render(request, 'data_management/nurse_bureau_data/edit_nurse_bureau_data.html',
                                      {'tab': 'basic', 'tab_listing': 'nurse_bureau-listing', 'nurse_bureau_obj': nurse_bureau_obj,
                                       'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,
                                       'valid_choice': valid_choice, 'tab':'1',
                                        'nurse_bureau_services_list':nurse_bureau_services_list,
                                        'nurse_bureau_speciality_list':nurse_bureau_speciality_list,
                                        'nurse_bureau_services_master':nurse_bureau_services_master,
                                        'nurse_bureau_speciality_master':nurse_bureau_speciality_master,

                                        })
                    else:
                        messages.error(request,'Nurse Bureau could not be found')
                        return HttpResponseRedirect('/nurse_bureau/listing/')

                elif tab == '1' and request.method == "POST":
                    name = request.POST['name'].strip()
                    address = request.POST['address'].strip()
                    pincode = request.POST.get('apincode').strip()
                    country = request.POST['country_id'].strip()
                    state = request.POST['state_id'].strip()
                    city = request.POST['city_id'].strip(),
                    city = city[0]
                    location = request.POST['locality_id'].strip()
                    certification = request.POST['certification'].strip()
                    experience = request.POST['experience'].strip()
                    services = request.POST.getlist('nurse_bureau_services')
                    speciality = request.POST.getlist('nurse_bureau_speciality')
                    nurse_bureau_locality_coverage_from = request.POST['locality_idfrom'].strip()
                    nurse_bureau_locality_coverage_to = request.POST['locality_idto'].strip()
                    email = request.POST['email'].strip()
                    rates = request.POST['rates'].strip()
                    telephone = request.POST['telephone'].strip()
                    mobile = request.POST['mobile'].strip()
                    contact_person = request.POST['contact_person'].strip()
                    branches = request.POST['branches'].strip()
                    website = request.POST['website'].strip()
                    nurse_bureau_packages = request.POST['nurse_bureau_packages'].strip()
                    no_of_nurses = request.POST['no_of_nurses'].strip()
                    nurses_experience = request.POST['nurses_experience'].strip()
                    contact_person_contact_no = request.POST['contact_person_contact_no'].strip()
                    contact_person_email = request.POST['contact_person_email'].strip()
                    remarks = request.POST['remarks'].strip()
                    tempstr = ''
                    cc = 0
                    if services:
                        for i in services:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    services = tempstr

                    tempstr = ''
                    cc = 0
                    if speciality:
                        for i in speciality:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    speciality = tempstr

                    try:
                        is_emergency = request.POST['is_emergency'].strip()
                    except:
                        is_emergency = '0'
                    if is_emergency == '1':
                        is_emergency = True
                    else:
                        is_emergency = False

                    nurse_bureau_obj = Nurse_Bureau.objects.get(pk=nurse_bureau_id)

                    if nurse_bureau_obj:
                        nurse_bureau_obj.name = name
                        nurse_bureau_obj.address = address
                        nurse_bureau_obj.pincode = pincode
                        nurse_bureau_obj.country_id = country
                        nurse_bureau_obj.state_id = state
                        nurse_bureau_obj.city_id = city
                        nurse_bureau_obj.locality_id = location
                        nurse_bureau_obj.rates = rates
                        nurse_bureau_obj.certification = certification
                        nurse_bureau_obj.experience = experience
                        nurse_bureau_obj.services = services
                        nurse_bureau_obj.speciality = speciality
                        nurse_bureau_obj.rates = rates
                        nurse_bureau_obj.telephone = telephone
                        nurse_bureau_obj.email = email
                        nurse_bureau_obj.mobile = mobile
                        nurse_bureau_obj.branches =branches
                        nurse_bureau_obj.website = website
                        nurse_bureau_obj.nurse_bureau_packages = nurse_bureau_packages
                        nurse_bureau_obj.no_of_nurses = no_of_nurses
                        nurse_bureau_obj.nurses_experience = nurses_experience
                        nurse_bureau_obj.contact_person_contact_no = contact_person_contact_no
                        nurse_bureau_obj.contact_person_email = contact_person_email
                        nurse_bureau_obj.contact_person = contact_person
                        nurse_bureau_obj.remarks = remarks
                        if nurse_bureau_locality_coverage_to != 'msg':
                            nurse_bureau_obj.nurse_bureau_locality_coverage_to_id = nurse_bureau_locality_coverage_to
                        else:
                            nurse_bureau_obj.nurse_bureau_locality_coverage_to = None
                        if nurse_bureau_locality_coverage_from != 'msg':
                            nurse_bureau_obj.nurse_bureau_locality_coverage_from_id = nurse_bureau_locality_coverage_from
                        else:
                            nurse_bureau_obj.nurse_bureau_locality_coverage_from = None
                        nurse_bureau_obj.save()
                        messages.success(request, 'Nurse Bureau Data Successfully Updated')
                    else:
                        messages.error(request, 'Nurse Bureau Not Found in records')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect((reverse('publisher-nurse_bureau-listing'))+'?tab=1')
                    return HttpResponseRedirect('/nurse_bureau/edit/' + nurse_bureau_id + '/?tab=1')

                elif tab == '2' and request.method == "GET":
                    delete = None
                    package_id = None
                    nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id)
                    try:
                        delete = request.GET.get('delete')
                        package_id = request.GET.get('package_id')

                    except:
                        delete = None
                        package_id = None

                    if delete and package_id and nurse_bureau_obj:
                        try:
                            packages = nurse_bureau_obj.packages
                            try:
                                del packages['package_list'][package_id]
                            except:
                                messages.success(request, "Package ID not found")
                                return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                        except:
                            packages = {'package_id': package_id, 'package_list': {}}
                            try:
                                del packages['package_list'][package_id]
                            except:
                                messages.success(request, "Package ID not found")
                                return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')

                        nurse_bureau_obj.packages = packages
                        nurse_bureau_obj.save()
                        messages.success(request, "Successfully Deleted Package")
                        return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')

                    elif nurse_bureau_obj:
                        try:
                            packages = nurse_bureau_obj.packages
                            if packages:
                                donothing = True
                            else:
                                packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}
                        except:
                            packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}

                        if len(packages['package_list'].keys()) < 1:
                            packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}

                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        return render(request, 'data_management/nurse_bureau_data/edit_nurse_bureau_data.html',
                                      {'tab': '2', 'tab_listing': 'nurse_bureau-listing', 'nurse_bureau_obj': nurse_bureau_obj,
                                       'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,'valid_choice': valid_choice
                                       })
                    else:
                        messages.error(request, 'Something Bad Happened')
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            return HttpResponseRedirect(reverse('publisher-nurse_bureau-listing'))
                        return HttpResponseRedirect(reverse('nurse_bureau-listing'))

                if tab == '2' and request.method == "POST":
                    nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id)
                    package_name_list = None
                    package_price_list = None
                    ackage_description_list = None
                    edit = None
                    package_name2 = None
                    package_price = None
                    package_description = None
                    package_id = None
                    try:
                        package_name_list = request.POST.getlist('package_name')
                        package_price_list = request.POST.getlist('package_price')
                        package_description_list = request.POST.getlist('package_description')
                    except:
                        package_name_list = None
                        package_price_list = None
                        package_description_list = None
                        package_id = None
                    try:
                        edit = request.POST.get('edit')
                        package_id = request.POST.get('package_id')
                        package_name2 = request.POST.get('package_name2')
                        package_price = request.POST.get('package_price')
                        package_description = request.POST.get('package_description')
                    except:
                        edit = None
                        package_name2 = None
                        package_price = None
                        package_description = None
                        package_id = None
                    if edit and package_id and nurse_bureau_obj:
                        try:
                            packages = nurse_bureau_obj.packages
                            if packages and package_id:
                                try:
                                    packages['package_list'][package_id]['package_name'] = package_name2
                                    packages['package_list'][package_id]['package_price'] = package_price
                                    packages['package_list'][package_id]['package_description'] = package_description
                                    nurse_bureau_obj.packages = packages
                                    nurse_bureau_obj.save()

                                    messages.success(request, "Nurse Bureau Package Successfully UPDATED")
                                    return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                                except:
                                    packages['package_list'].update({package_id: {'package_name': package_name2,
                                                                                  'package_price': package_price,
                                                                                  'package_description':
                                                                                      package_description}})
                                    nurse_bureau_obj.packages = packages
                                    nurse_bureau_obj.save()
                                    messages.success(request, "Nurse Bureau Plan Successfully ADDED")
                                    return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                            else:
                                if (not packages) and package_id:
                                    packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}
                                    packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                                  'package_price':package_price,
                                                                                  'package_description':package_description}})
                                    nurse_bureau_obj.packages = packages
                                    nurse_bureau_obj.save()
                                    messages.success(request, "Nurse Bureau Plan Successfully ADDED")
                                    return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                                else:
                                    messages.error(request, "No Plan ID Received")
                                    return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                        except:
                            packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}
                            packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                          'package_price':package_price,
                                                                          'package_description':package_description}})
                            nurse_bureau_obj.packages = packages
                            nurse_bureau_obj.save()
                            messages.success(request, "Nurse Bureau Package Successfully ADDED")
                            return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                    if package_name_list and package_price_list and package_description_list and nurse_bureau_obj:
                        try:
                            packages = nurse_bureau_obj.packages
                            if packages:
                                pass
                            else:
                                packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}
                        except:
                            packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}
                        if len(packages['package_list'].keys()) < 1:
                            packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}

                        for i in range(0, len(package_name_list)):
                            package_id = str(uuid.uuid4())
                            packages['package_list'].update({package_id: {'package_name': package_name_list[i],
                                                                          'package_price': package_price_list[i],
                                                                          'package_description': package_description_list[i]}})
                        nurse_bureau_obj.packages = packages
                        nurse_bureau_obj.save()
                        messages.success(request, 'Test Details Successfully Updated')

                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        return render(request, 'data_management/nurse_bureau_data/edit_nurse_bureau_data.html',
                                      {'tab': '2', 'tab_listing': 'nurse_bureau-listing', 'nurse_bureau_obj': nurse_bureau_obj,
                                       'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,'valid_choice': valid_choice
                                       })
                    else:
                        messages.error(request, 'Required data not received')
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            return HttpResponseRedirect(reverse('publisher-nurse_bureau-listing'))
                        return HttpResponseRedirect(reverse('nurse_bureau-listing'))
            else:
                messages.error(request, 'Access Denied')
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-nurse_bureau-listing'))
                return HttpResponseRedirect(reverse('nurse_bureau-listing'))
        messages.error(request, 'Nurase Bureau not found')
        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-nurse_bureau-listing'))
        return HttpResponseRedirect(reverse('nurse_bureau-listing'))
    except  Exception as e:
        #print e
        raise Http404

####################################################################
# Name - Rehab_listing                                             #
# Owner - Jaydeep Verma                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def nurse_bureau_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        state_data_obj = State.objects.all().order_by('name')
        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            nurse_bureau_obj = Nurse_Bureau.objects.filter(current_user_id=telecaller_id,is_disable=False ).order_by('name')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            nurse_bureau_obj = Nurse_Bureau.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
        else:
            reviewer_id = 0
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            nurse_bureau_obj = Nurse_Bureau.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('name')
        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:
            # nurse_bureau_obj = Nurse_Bureau.objects.filter(current_user_id=telecaller_id).order_by(
            #    'name')  # current_user_id=telecaller_id
            if len(nurse_bureau_obj) == 0:
                messages.error(request, "No Nurse_Bureau found")

                return render(request, 'data_management/nurse_bureau_data/nurse_bureau_listing.html',
                              {'tab_listing': 'nurse_bureau-listing'})
            elif len(nurse_bureau_obj) > 0:
                paginator = Paginator(nurse_bureau_obj, 50)
                page = request.GET.get('page')
                try:
                    nurse_bureau_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    nurse_bureau_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    nurse_bureau_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/nurse_bureau_data/nurse_bureau_listing.html',
                              dict(nurse_bureau=nurse_bureau_obj, tab_listing='nurse_bureau-listing', state_data_obj=state_data_obj))
        elif reviewer_id:
            nurse_bureau_obj = Nurse_Bureau.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
            if len(nurse_bureau_obj) == 0:
                messages.error(request, "No Nurse_Bureau found")
                return render(request, 'data_management/nurse_bureau_data/nurse_bureau_listing.html',
                              {'tab_listing': 'nurse_bureau-listing'})
            elif len(nurse_bureau_obj) > 0:
                paginator = Paginator(nurse_bureau_obj, 50)
                page = request.GET.get('page')
                try:
                    nurse_bureau_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    nurse_bureau_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    nurse_bureau_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/nurse_bureau_data/nurse_bureau_listing.html',
                              dict(nurse_bureau=nurse_bureau_obj, tab_listing='nurse_bureau-listing', state_data_obj=state_data_obj))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - schedule_nurse_bureau                                     #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def schedule_nurse_bureau(request, nurse_bureau_id=None):
    try:
        back_to_url = request.META.get('HTTP_REFERER')
        try:
            nurse_bureau_obj = Nurse_Bureau.objects.get(id = nurse_bureau_id)
        except:
            nurse_bureau_obj = None
        if nurse_bureau_obj :
            if request.method == "GET":
                schedule_obj = nurse_bureau_obj.nurse_bureau_schedule
                schedule_list = []
                # This case add by jitendra dixit temporary use
                schedule_id = None
                try:
                    if len(schedule_obj) == 0: # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc

                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        nurse_bureau_obj.nurse_bureau_schedule = schedule_data
                        nurse_bureau_obj.save()
                except:
                    if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc

                        # 2 create and save a schedule instance so that do not have problem in #3 below
                        schedule_data = []
                        nurse_bureau_obj.nurse_bureau_schedule = schedule_data
                        nurse_bureau_obj.save()
                #3 get schedule object (whether already exisitng or added by us in step 2 above
                schedule_obj = nurse_bureau_obj.nurse_bureau_schedule

                #>>> import json
                #>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
                #[u'foo', {u'bar': [u'baz', Non , 1.0, 2]}]
                #>>> json.dumps([u'foo', {u'bar': [u'baz', None, 1.0, 2]}])
                # '["foo", {"bar": ["baz", null, 1.0, 2]}]' #Therefore the check for type string

                if schedule_obj:
                    schedule_list = nurse_bureau_obj.nurse_bureau_schedule #get the conetnt of json field
                    if type(schedule_list) is str:
                        schedule_list = json.loads(schedule_list)
                user_is_reviewer = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_reviewer = True
                return render(request, 'data_management/nurse_bureau_data/nurse_bureau_schedule_form.html',
                              dict(schedule_list=schedule_list,
                                   nurse_bureau_id=nurse_bureau_id,
                                   day_list=day_list,
                                   tab=5, back_to_url=back_to_url,
                                   user_is_reviewer = user_is_reviewer))
            elif request.method == "POST":
                # check = AttachWithDoctor.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                # schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                # schedule_obj.update(by_appointment=False)
                schedule_obj = nurse_bureau_obj.nurse_bureau_schedule
                #if len(check) == 1 and len(schedule_obj) == 1:
                if schedule_obj :
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    # try:
                    #     by_app = request.POST.getlist('by_app')
                    # except:
                    #     by_app = []
                    # if len(by_app) == 0:
                    #     by_app.append('0ff')
                    #
                    # if by_app[0] == 'on':
                    #     schedule_obj.update(by_appointment=True)
                    # else:
                    start_time = request.POST.getlist('start_time')

                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        #while saving new schedule, the schedule is created as a dictionary which is then appended
                        #to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)

                        schedule_obj = schedule_data
                        nurse_bureau_obj.nurse_bureau_schedule = schedule_obj
                        nurse_bureau_obj.save()
                        messages.success(request, 'Nurse Bureau schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
                else:
                    schedule_list = []
                    try:
                        if len(schedule_obj) == 0:  # 1 Scenario 1A (all deleted)when no schedule exists for a given pair of org and doc

                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            nurse_bureau_obj.nurse_bureau_schedule = schedule_data
                            nurse_bureau_obj.save()
                    except:
                        if schedule_obj == None:  # 1Scenario 1B (being created for the 1st time)when no schedule exists for a given pair of org and doc

                            # 2 create and save a schedule instance so that do not have problem in #3 below
                            schedule_data = []
                            nurse_bureau_obj.nurse_bureau_schedule = schedule_data
                            nurse_bureau_obj.save()
                    # 3 get schedule object (whether already exisitng or added by us in step 2 above
                    schedule_obj = nurse_bureau_obj.nurse_bureau_schedule

                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj
                    start_time = request.POST.getlist('start_time')
                    start_period = request.POST.getlist('start_period')
                    end_time = request.POST.getlist('end_time')
                    end_period = request.POST.getlist('end_period')
                    from_day = request.POST.get('from_day')
                    to_day = request.POST.get('to_day')
                    if start_time and start_period and end_period and end_time and from_day:
                        unique_id = str(uuid.uuid4())
                        for i in range(0, len(start_time)):
                            timing_dict = {}
                            timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                            timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                            timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day
                        add_schedule_dict['to_day'] = to_day
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id
                        # while saving new schedule, the schedule is created as a dictionary which is then appended
                        # to the single listcontained in (schedule_data)
                        schedule_data.append(add_schedule_dict)

                        schedule_obj = schedule_data
                        nurse_bureau_obj.nurse_bureau_schedule = schedule_obj
                        nurse_bureau_obj.save()
                        messages.success(request, 'Nurse Bureau schedule successdfully updated')
                        back_to_url = request.META.get('HTTP_REFERER')
                        return HttpResponseRedirect(back_to_url)
        else:
            messages.error(request, 'Nurse Bureau object not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - delete_nurse_bureau_schedule                              #
# By - NISHANK                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_nurse_bureau_schedule(request):
    try:
        schedule_id = None
        nurse_bureau_id = None
        schedule_id =  request.GET['nurse_bureauschid']
        nurse_bureau_id = request.GET['nurse_bureau_id']
        if nurse_bureau_id:
            try :
                nurse_bureau_obj = Nurse_Bureau.objects.get(id = nurse_bureau_id)
            except:
                nurse_bureau_obj = None
                str_nurse_bureau_id = str(nurse_bureau_id)
                messages.error(request,'Nurse Bureau object could not be retrieved from database' )
                return HttpResponseRedirect('/nurse_bureau/schedule/'+str_nurse_bureau_id+'/')
            if request.method == "GET" and schedule_id != None and nurse_bureau_obj :
                    #schedule_data_obj = Schedule.objects.filter(schedule_data__contains=[{'id': id_data}])
                    schedule_data_obj_list = nurse_bureau_obj.nurse_bureau_schedule
                    # commented by Nishank on 14Nov 2016
                    #update_data = list(schedule_data_obj[0].schedule_data)
                    # exp_data = schedule_data_obj[0].schedule_data
                    # #update_data = _.without(update_data, _.findWhere(update_data, {'id': id_data}))
                    # for i in exp_data:
                    #     if i['id'] == id_data:
                    #         exp_data.remove(i)
                    cindex =-1
                    for entry in schedule_data_obj_list:
                        cindex += 1
                        if entry['id'] == schedule_id :
                            del schedule_data_obj_list[cindex]

                    nurse_bureau_obj.nurse_bureau_schedule = schedule_data_obj_list
                    nurse_bureau_obj.save()
                    messages.success(request, 'Deleted')
                    str_nurse_bureau_id = str(nurse_bureau_id)
                    return HttpResponseRedirect('/nurse_bureau/schedule/' + str_nurse_bureau_id + '/')
            else:
                str_nurse_bureau_id = str(nurse_bureau_id)
                messages.error(request, 'Schedule id not found')
                return HttpResponseRedirect('/nurse_bureau/schedule/' + str_nurse_bureau_id + '/')
        else:
            messages.error(request, 'Schedule id not found')
            back_to_url = request.META.get('HTTP_REFERER')
            return HttpResponseRedirect(back_to_url)
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - mark_as_complete_caller_nurse_bureau                      #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_nurse_bureau(request):
    try:
        if request.method == 'POST':
            nurse_bureau_id = request.POST['nurse_bureau_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id, current_user_id=request.user.id)
            if nurse_bureau_obj and reviewer_data_id and valid_choice_id:
                try:
                    nurse_bureau_obj.current_user = User.objects.get(id=reviewer_data_id)
                    nurse_bureau_obj.previous_user = request.user.id
                    nurse_bureau_obj.stage = Stage.objects.get(pk=3)
                    nurse_bureau_obj.free_text = ''
                    nurse_bureau_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    nurse_bureau_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('nurse_bureau-listing'))
                except:
                    raise Http404
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('nurse_bureau-listing'))
    except Exception as e:
        return HttpResponse("Something Bad Happened")

####################################################################
# Name - mark_as_complete_reviewer_nurse_bureau                    #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_nurse_bureau(request):
    try:
        if request.method == 'POST':
            nurse_bureau_id = request.POST['nurse_bureau_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id, current_user_id=request.user.id)
            if nurse_bureau_obj and publisher_data_id and valid_choice_id:
                try:
                    nurse_bureau_obj.current_user = User.objects.get(id=publisher_data_id)
                    nurse_bureau_obj.previous_user = request.user.id
                    nurse_bureau_obj.stage = Stage.objects.get(pk=4)
                    nurse_bureau_obj.free_text = ''
                    nurse_bureau_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    nurse_bureau_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('nurse_bureau-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('nurse_bureau-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_reverse_caller_nurse_bureau                       #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_nurse_bureau(request):
    try:
        if request.method == 'POST':
            nurse_bureau_id = request.POST['nurse_bureau_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id, current_user_id=request.user.id)
            if nurse_bureau_obj and caller_data_id and free_text:
                try:
                    nurse_bureau_obj.current_user = User.objects.get(id=caller_data_id)
                    nurse_bureau_obj.previous_user = request.user.id
                    nurse_bureau_obj.stage = Stage.objects.get(pk=2)
                    nurse_bureau_obj.free_text = free_text
                    nurse_bureau_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-nurse_bureau-listing'))
                    return HttpResponseRedirect(reverse('nurse_bureau-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-nurse_bureau-listing'))
        return HttpResponseRedirect(reverse('nurse_bureau-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_reverse_reviewer_nurse_bureau                      #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_nurse_bureau(request):
    try:
        if request.method == 'POST':
            nurse_bureau_id = request.POST['nurse_bureau_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id, current_user_id=request.user.id)
            if nurse_bureau_obj and reviewer_data_id and free_text:
                try:
                    nurse_bureau_obj.current_user = User.objects.get(id=reviewer_data_id)
                    nurse_bureau_obj.previous_user = request.user.id
                    nurse_bureau_obj.stage = Stage.objects.get(pk=3)
                    nurse_bureau_obj.free_text = free_text
                    nurse_bureau_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    return HttpResponseRedirect(reverse('nurse_bureau-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('nurse_bureau-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_complete_publisher_nurse_bureau                    #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_nurse_bureau(request):
    try:
        if request.method == 'POST':
            nurse_bureau_id = request.POST['nurse_bureau_id']
            nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id, current_user_id=request.user.id)
            if nurse_bureau_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    nurse_bureau_obj.stage = Stage.objects.get(pk=5)
                    nurse_bureau_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    return HttpResponseRedirect(reverse('nurse_bureau-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('nurse_bureau-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - nurse_bureau_data_manage                                  #
# Owner - Jaydeep                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def nurse_bureau_data_manage(request):
    try:
        return render(request, 'admin/nurse_bureau_management/nurse_bureau_management.html',
                      {'tab': 'data', 'crosal': 'nurse_bureaumanage'})
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - Rehab_data_by_users                                       #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def nurse_bureau_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            nurse_bureau_all_data = Nurse_Bureau.objects.filter(current_user_id=search_data).order_by('name')
            paginator = Paginator(nurse_bureau_all_data, 100)
            page = request.GET.get('page')
            try:
                nurse_bureau_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                nurse_bureau_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                nurse_bureau_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/nurse_bureau_management/nurse_bureau_by_user.html',
                      {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'nurse_bureau_all_data': nurse_bureau_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            nurse_bureau_all_data = Nurse_Bureau.objects.filter(name__icontains=search_data_two).order_by('name')
            paginator = Paginator(nurse_bureau_all_data, 3)
            page = request.GET.get('page')
            try:
                nurse_bureau_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                nurse_bureau_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                nurse_bureau_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/nurse_bureau_management/nurse_bureau_by_user.html',
                          {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'nurse_bureau_all_data': nurse_bureau_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})

        nurse_bureau_all_data = Nurse_Bureau.objects.all().order_by('name')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(nurse_bureau_all_data, 100)
        page = request.GET.get('page')
        try:
            nurse_bureau_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            nurse_bureau_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            nurse_bureau_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/nurse_bureau_management/nurse_bureau_by_user.html',
                      {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'nurse_bureau_all_data': nurse_bureau_all_data,
                       'user_data_obj': user_data_obj})
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - nurse_bureau_data_by_stages                               #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def nurse_bureau_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            nurse_bureau_all_data = Nurse_Bureau.objects.filter(stage_id=stage_id).order_by('name')
        else:
            nurse_bureau_all_data = Nurse_Bureau.objects.all().order_by('name')
            stage_id=None
        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(nurse_bureau_all_data, 100)
        page = request.GET.get('page')
        try:
            nurse_bureau_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            nurse_bureau_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            nurse_bureau_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/nurse_bureau_management/nurse_bureau_by_stages.html',
                      {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'nurse_bureau_all_data': nurse_bureau_all_data,
                       'stage_data': stage_data,'stage_no':stage_id})
    except:
        raise Http404

####################################################################
# Name - nurse_bureau_assignment                                   #
#  Owner - Nishank                                                 #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def nurse_bureau_assignment(request):
    try:
        stage_filter = False
        user_filter = False
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all().order_by('name')
        city_list = City.objects.all().order_by('name')
        locality_list = Locality.objects.all().order_by('name')
        user_data = User.objects.all().order_by('username')
        locality_obj = None
        city_obj = None
        current_user_id = None
        user_id_data = None
        stage_id = None
        stage_id_data = None
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            nurse_bureau_obj = Nurse_Bureau.objects.filter(name__icontains=search_data).order_by('name')
            paginator = Paginator(nurse_bureau_obj, 100)
            page = request.GET.get('page')
            try:
                nurse_bureau_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                nurse_bureau_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                nurse_bureau_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/nurse_bureau_management/nurse_bureau_assign.html',
                    {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'stage_data': stage_data,
                    'nurse_bureau': nurse_bureau_obj, 'state_data_obj': state_data_obj,'search_data':search_data,
                     'city_list':city_list,'locality_list':locality_list})
        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'filter':
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = None
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = None
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')

                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            nurse_bureau_obj = Nurse_Bureau.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            nurse_bureau_obj = Nurse_Bureau.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            nurse_bureau_obj = Nurse_Bureau.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          stage_id=stage_id_data).order_by('name')
                    else:
                        nurse_bureau_obj = Nurse_Bureau.objects.filter(state_id=state_filter,
                                                  city_id=city_data,
                                                  locality_id=locality_data).order_by('name')

                    paginator = Paginator(nurse_bureau_obj, 100)
                    page = request.GET.get('page')
                    try:
                        nurse_bureau_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        nurse_bureau_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        nurse_bureau_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/nurse_bureau_management/nurse_bureau_assign.html',
                                  {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'stage_data': stage_data,
                                   'nurse_bureau': nurse_bureau_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                    'filter_name':filter_name,'state_data':state_data,
                                    'city_data':city_data,'locality_data':locality_data,
                                   'city_list':city_list,'locality_list':locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                elif city_data:
                    if user_id_data or stage_id_data:
                        if user_id_data and  stage_id_data :
                            nurse_bureau_obj = Nurse_Bureau.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')
                        elif user_id_data:
                            nurse_bureau_obj = Nurse_Bureau.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            nurse_bureau_obj = Nurse_Bureau.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          stage_id=stage_id_data).order_by('name')
                    else:
                        nurse_bureau_obj = Nurse_Bureau.objects.filter(state=state_data, city=city_data).order_by(
                            'name')
                    paginator = Paginator(nurse_bureau_obj, 100)
                    page = request.GET.get('page')
                    try:
                        nurse_bureau_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        nurse_bureau_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        nurse_bureau_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/nurse_bureau_management/nurse_bureau_assign.html',
                                  {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'stage_data': stage_data,
                                   'nurse_bureau': nurse_bureau_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                else:
                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            nurse_bureau_obj = Nurse_Bureau.objects.filter(state_id=state_filter,
                                                                     current_user_id=user_id_data,
                                                                     stage_id=stage_id_data).order_by('name')
                        elif user_id_data:
                            nurse_bureau_obj = Nurse_Bureau.objects.filter(state_id=state_filter,
                                                                     current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            nurse_bureau_obj = Nurse_Bureau.objects.filter(state_id=state_filter,
                                                                     stage_id=stage_id_data).order_by('name')
                    else:
                        nurse_bureau_obj = Nurse_Bureau.objects.filter(state=state_data).order_by('name')

                    paginator = Paginator(nurse_bureau_obj, 100)
                    page = request.GET.get('page')
                    try:
                        nurse_bureau_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        nurse_bureau_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        nurse_bureau_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/nurse_bureau_management/nurse_bureau_assign.html',
                                  {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'stage_data': stage_data,
                                   'nurse_bureau': nurse_bureau_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
            ##########
            elif not state_data and user_id_data or stage_id_data:
                if user_id_data or stage_id_data:
                    if user_id_data and stage_id_data:
                        nurse_bureau_obj = Nurse_Bureau.objects.filter(current_user_id=user_id_data,
                                                               stage_id=stage_id_data).order_by('name')

                    elif user_id_data:
                        nurse_bureau_obj = Nurse_Bureau.objects.filter(current_user_id=user_id_data).order_by('name')
                    elif stage_id_data:
                        nurse_bureau_obj = Nurse_Bureau.objects.filter(stage_id=stage_id_data).order_by('name')
                else:
                    nurse_bureau_obj = None
                paginator = Paginator(nurse_bureau_obj, 100)
                page = request.GET.get('page')
                try:
                    nurse_bureau_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    nurse_bureau_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    nurse_bureau_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/nurse_bureau_management/nurse_bureau_assign.html',
                              {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'stage_data': stage_data,
                               'nurse_bureau': nurse_bureau_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'city_list': city_list, 'locality_list': locality_list,
                               'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                               'current_user_id':user_id_data,'stage_id':stage_id_data
                               })
            else:
                locality_data = None
                nurse_bureau_obj = Nurse_Bureau.objects.all().order_by('name')
                paginator = Paginator(nurse_bureau_obj, 100)
                page = request.GET.get('page')
                try:
                    nurse_bureau_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    nurse_bureau_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    nurse_bureau_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/nurse_bureau_management/nurse_bureau_assign.html',
                              {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'stage_data': stage_data,
                               'nurse_bureau': nurse_bureau_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'city_list': city_list, 'locality_list': locality_list,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'current_user_id': user_id_data, 'stage_id': stage_id_data
                               })

        else:
            filter_name = None
            state_data = None
            city_data = None
            locality_data = None
            nurse_bureau_obj = Nurse_Bureau.objects.all().order_by('name')
            paginator = Paginator(nurse_bureau_obj, 100)
            page = request.GET.get('page')
            try:
                nurse_bureau_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                nurse_bureau_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                nurse_bureau_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/nurse_bureau_management/nurse_bureau_assign.html',
                          {'tab': 'data', 'crosal': 'nurse_bureaubymanage', 'stage_data': stage_data,
                           'nurse_bureau': nurse_bureau_obj, 'state_data_obj': state_data_obj,
                           'city_obj': city_obj, 'locality_obj': locality_obj,
                           'locality_filter': locality_filter, 'city_filter': city_filter,
                           'state_filter': state_filter,
                           'filter_name': filter_name, 'state_data': state_data,
                           'city_data': city_data, 'locality_data': locality_data,
                           'city_list': city_list, 'locality_list': locality_list,
                           'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                           'current_user_id':user_id_data,'stage_id':stage_id_data
                           })
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - Nurse_Bureau assignment                                   #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_nurse_bureau(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                nbslist= []
                nbflist= []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = Nurse_Bureau.objects.filter(id=checkedValues[i]).update(
                            current_user_id=assign_user,
                            stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue
                my_send_mail(request,'nurse_bureau', nbslist, nbflist,'Nurse Bureau Assignment','Assigned')
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/nurse_bureau/assignment/users/'
                response1['Message'] = "Assign Complete"

            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - nurse_bureau_publisher_listing                            #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def nurse_bureau_publisher_listing(request):
    try:
        search_name = None
        stage_id = None
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        try:
            search_name = request.GET['search_name']
        except:
            search_name = None
        try:
            stage_id = request.GET['stage_id']
        except:
            stage_id = None
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if publisher_id:
            if search_name:
                nurse_bureau_obj = Nurse_Bureau.objects.filter(Q(name__icontains=search_name), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')

            elif stage_id:
                nurse_bureau_obj = Nurse_Bureau.objects.filter(Q(stage_id =int(stage_id)), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')

            elif category_id:
                nurse_bureau_obj = Nurse_Bureau.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                category_filter = int(category_id)
            else:
                nurse_bureau_obj = Nurse_Bureau.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('name')
            if len(nurse_bureau_obj) == 0:
                messages.error(request, "No Nurse_Bureau found")
                return render(request, 'publisher/nurse_bureau/nurse_bureau_listing_publisher.html',
                              {'tab_listing': 'nurse_bureau-listing', 'tab': 'nurse_bureau-listing',
                               'stage_data': stage_data_obj,
                               'category_obj': category_data, 'category_filter': category_filter,
                               'stage_id':stage_id,'search_name':search_name})

            paginator = Paginator(nurse_bureau_obj, 50)
            page = request.GET.get('page')
            try:
                nurse_bureau_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                nurse_bureau_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                nurse_bureau_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/nurse_bureau/nurse_bureau_listing_publisher.html',
                          dict(nurse_bureau_obj=nurse_bureau_obj, tab_listing='nurse_bureau-listing', tab='nurse_bureau-listing',
                               stage_data=stage_data_obj,
                               category_obj=category_data, category_filter=category_filter,
                               stage_id=stage_id,search_name=search_name))
        else:
            return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - add_dietitian                                             #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_dietitian(request):
    try:
        if request.method == "GET":
            country_obj = Country.objects.filter(delete=False)
            state_obj = State.objects.filter(delete=False)

            dietitian_services = DietitianServices.objects.filter(delete=False)
            dietitian_type = Dietitian_type_master.objects.filter(delete=False)

            return render(request, 'data_management/dietitian_data/add_dietitian.html',
                          {'dietitian_add': 'add', 'tab_listing': 'dietitian-listing', 'country_obj': country_obj,
                           'state_obj': state_obj,
                           'dietitian_services': dietitian_services, 'dietitian_type': dietitian_type})
        elif request.method == "POST":
            name = request.POST['name'].strip()
            institution = request.POST['institution'].strip()
            qualification = request.POST['qualification'].strip()
            experience = request.POST['experience'].strip()
            services = request.POST.getlist('dietitian_services')
            type = request.POST.getlist('dietitian_type')
            dietitian_locality_coverage_from = request.POST['locality_idfrom'].strip()
            dietitian_locality_coverage_to = request.POST['locality_idto'].strip()
            rates = request.POST['rates'].strip()
            address = request.POST['address'].strip()
            pincode = request.POST.get('apincode').strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip()
            location = request.POST['locality_id'].strip()
            email = request.POST['email'].strip()
            telephone = request.POST['telephone'].strip()
            alternate_telephone = request.POST['alternate_telephone'].strip()
            mobile = request.POST['mobile'].strip()
            remarks = request.POST['remarks'].strip()

            tempstr = ''
            cc = 0
            if services:
                for i in services:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            services = tempstr

            tempstr = ''
            cc = 0
            if type:
                for i in type:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            type = tempstr

            dietitian_obj = Dietitian(name=name,address=address, pincode=pincode,
                                            country_id=country, state_id=state,
                                            city_id=city,
                                            locality_id=location,
                                            institution=institution,qualification=qualification, experience=experience,
                                            services=services, type=type,
                                            dietitian_locality_coverage_from_id=dietitian_locality_coverage_from,
                                            dietitian_locality_coverage_to_id=dietitian_locality_coverage_to,
                                            rates=rates, telephone=telephone,
                                            email=email,mobile=mobile,alternate_telephone=alternate_telephone,
                                            stage_id=2, current_user_id=request.user.id, free_text='',
                                            is_disable=False,remarks=remarks)

            dietitian_obj.save()
            messages.success(request, "New Dietitian added successfully")

            return HttpResponseRedirect(reverse('dietitian-listing'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - dietitian_listing_edit                                    #
# BY NISHANK                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def dietitian_listing_edit(request, dietitian_id=None):
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_dietitian_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_dietitian_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    country_obj = Country.objects.filter(delete=False)
    state_obj = State.objects.filter(delete=False)
    city = City.objects.filter(delete=False)
    locality = Locality.objects.filter(delete=False)
    dietitian_type_master = Dietitian_type_master.objects.filter(delete=False)
    dietitian_services_master = DietitianServices.objects.filter(delete=False)
    dietitian_services_list = None
    dietitian_type_list = None
    try:
        tab = request.GET.get('tab')
    except:
        tab = None
    try:
        if dietitian_id is not None:
            dietitian_obj = Dietitian.objects.get(id=dietitian_id)
            if (dietitian_obj.current_user_id == request.user.id)or request.user.is_superuser:
                if tab == '1' and request.method == "GET":
                    dietitian_obj = Dietitian.objects.get(id=dietitian_id)
                    if dietitian_obj:
                        if dietitian_obj.services :
                            dietitian_services_list = dietitian_obj.services.split(',')
                        else:
                            dietitian_services_list = None

                        if dietitian_obj.type :
                            dietitian_type_list = dietitian_obj.type.split(',')
                        else:
                            dietitian_type_list = None
                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        return render(request, 'data_management/dietitian_data/edit_dietitian_data.html',
                                      {'tab_listing': 'dietitian_listing', 'dietitian_obj': dietitian_obj,
                                       'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,
                                       'valid_choice': valid_choice, 'tab':'1',
                                        'dietitian_services_list':dietitian_services_list,
                                        'dietitian_type_list':dietitian_type_list,
                                        'dietitian_services_master':dietitian_services_master,
                                        'dietitian_type_master':dietitian_type_master,
                                        })
                    else:
                        messages.error(request,'Dietitian could not be found')
                        return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=1')
                elif tab == '1' and request.method == "POST":
                    name = request.POST['name'].strip()
                    institution = request.POST['institution'].strip()
                    qualification = request.POST['qualification'].strip()
                    experience = request.POST['experience'].strip()
                    services = request.POST.getlist('dietitian_services')
                    type = request.POST.getlist('dietitian_type')
                    dietitian_locality_coverage_from = request.POST['locality_idfrom'].strip()
                    dietitian_locality_coverage_to = request.POST['locality_idto'].strip()
                    rates = request.POST['rates'].strip()
                    address = request.POST['address'].strip()
                    pincode = request.POST.get('apincode').strip()
                    country = request.POST['country_id'].strip()
                    state = request.POST['state_id'].strip()
                    city = request.POST['city_id'].strip()
                    location = request.POST['locality_id'].strip()
                    email = request.POST['email'].strip()
                    telephone = request.POST['telephone'].strip()
                    alternate_telephone = request.POST['alternate_telephone'].strip()
                    mobile = request.POST['mobile'].strip()
                    remarks = request.POST['remarks'].strip()
                    tempstr = ''
                    cc = 0
                    if services:
                        for i in services:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    services = tempstr

                    tempstr = ''
                    cc = 0
                    if type:
                        for i in type:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    type = tempstr
                    dietitian_obj = Dietitian.objects.get(pk=dietitian_id)
                    if dietitian_obj:
                        dietitian_obj.name = name
                        dietitian_obj.address = address
                        dietitian_obj.pincode = pincode
                        dietitian_obj.country_id = country
                        dietitian_obj.state_id = state
                        dietitian_obj.city_id = city
                        dietitian_obj.locality_id = location
                        dietitian_obj.rates = rates
                        dietitian_obj.qualification = qualification
                        dietitian_obj.institution = institution
                        dietitian_obj.experience = experience
                        dietitian_obj.services = services
                        dietitian_obj.type = type
                        dietitian_obj.rates = rates
                        dietitian_obj.telephone = telephone
                        dietitian_obj.alternate_telephone = alternate_telephone
                        dietitian_obj.email = email
                        dietitian_obj.mobile = mobile
                        dietitian_obj.remarks = remarks
                        if dietitian_locality_coverage_to != 'msg':
                            dietitian_obj.dietitian_locality_coverage_to_id = dietitian_locality_coverage_to
                        else:
                            dietitian_obj.dietitian_locality_coverage_to = None

                        if dietitian_locality_coverage_from != 'msg':
                            dietitian_obj.dietitian_locality_coverage_from_id = dietitian_locality_coverage_from
                        else:
                            dietitian_obj.dietitian_locality_coverage_from = None
                        dietitian_obj.save()
                        messages.success(request, 'Dietitian Data Successfully Updated')
                        return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=1')
                    else:
                        messages.error(request, 'Dietitian Not Found in records')
                        return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=1')
                elif tab == '2' and request.method == "GET":
                    delete = None
                    package_id = None
                    dietitian_obj = Dietitian.objects.get(id=dietitian_id)
                    try:
                        delete = request.GET.get('delete')
                        package_id = request.GET.get('package_id')
                    except:
                        delete = None
                        package_id = None

                    if delete and package_id and dietitian_obj:
                        try:
                            packages = dietitian_obj.packages
                            try:
                                del packages['package_list'][package_id]
                            except:
                                messages.success(request, "Package ID not found")
                                return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')
                        except:
                            packages = {'package_id': package_id, 'package_list': {}}
                            try:
                                del packages['package_list'][package_id]
                            except:
                                messages.success(request, "Package ID not found")
                                return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')

                        dietitian_obj.packages = packages
                        dietitian_obj.save()
                        messages.success(request, "Successfully Deleted Package")
                        return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')

                    elif dietitian_obj:
                        try:
                            packages = dietitian_obj.packages
                            if packages:
                                donothing = True
                            else:
                                packages = {'dietitian_id': dietitian_id, 'package_list': {}}
                        except:
                            packages = {'dietitian_id': dietitian_id, 'package_list': {}}

                        if len(packages['package_list'].keys()) < 1:
                            packages = {'dietitian_id': dietitian_id, 'package_list': {}}

                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True

                        return render(request, 'data_management/dietitian_data/edit_dietitian_data.html',
                                      {'tab': '2', 'tab_listing': 'dietitian_listing', 'dietitian_obj': dietitian_obj,
                                       'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,'valid_choice': valid_choice,
                                       'dietitian_services_list': dietitian_services_list,
                                       'dietitian_type_list': dietitian_type_list,
                                       'dietitian_services_master': dietitian_services_master,
                                       'dietitian_type_master': dietitian_type_master,
                                       })
                    else:
                        messages.error(request, 'Something Bad Happened')
                        return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')

                if tab == '2' and request.method == "POST":
                    dietitian_obj = Dietitian.objects.get(id=dietitian_id)
                    package_name_list = None
                    package_price_list = None
                    ackage_description_list = None
                    edit = None
                    package_name2 = None
                    package_price = None
                    package_description = None
                    package_id = None
                    try:
                        package_name_list = request.POST.getlist('package_name')
                        package_price_list = request.POST.getlist('package_price')
                        package_description_list = request.POST.getlist('package_description')
                    except:
                        package_name_list = None
                        package_price_list = None
                        package_description_list = None
                        package_id = None
                    try:
                        edit = request.POST.get('edit')
                        package_id = request.POST.get('package_id')
                        package_name2 = request.POST.get('package_name2')
                        package_price = request.POST.get('package_price')
                        package_description = request.POST.get('package_description')
                    except:
                        edit = None
                        package_name2 = None
                        package_price = None
                        package_description = None
                        package_id = None

                    if edit and package_id and dietitian_obj:
                        try:
                            packages = dietitian_obj.packages
                            if packages and package_id:
                                try:
                                    packages['package_list'][package_id]['package_name'] = package_name2
                                    packages['package_list'][package_id]['package_price'] = package_price
                                    packages['package_list'][package_id]['package_description'] = package_description
                                    dietitian_obj.packages = packages
                                    dietitian_obj.save()

                                    messages.success(request, "Dietitian Package Successfully UPDATED")
                                    return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')
                                except:
                                    packages['package_list'].update({package_id: {'package_name': package_name2,
                                                                                  'package_price': package_price,
                                                                                  'package_description':
                                                                                      package_description}})
                                    dietitian_obj.packages = packages
                                    dietitian_obj.save()
                                    messages.success(request, "Dietitian Plan Successfully ADDED")
                                    return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')
                            else:
                                if (not packages) and package_id:
                                    packages = {'dietitian_id': dietitian_id, 'package_list': {}}
                                    packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                                  'package_price':package_price,
                                                                                  'package_description':package_description}})
                                    dietitian_obj.packages = packages
                                    dietitian_obj.save()
                                    messages.success(request, "Dietitian Plan Successfully ADDED")
                                    return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')
                                else:
                                    messages.error(request, "No Plan ID Received")
                                    return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')
                        except:

                            packages = {'dietitian_id': dietitian_id, 'package_list': {}}
                            packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                          'package_price':package_price,
                                                                          'package_description':package_description}})
                            dietitian_obj.packages = packages
                            dietitian_obj.save()
                            messages.success(request, "Dietitian Package Successfully ADDED")
                            return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')

                    if package_name_list and package_price_list and package_description_list and dietitian_obj:
                        try:
                            packages = dietitian_obj.packages
                            if packages:
                                pass
                            else:
                                packages = {'dietitian_id': dietitian_id, 'package_list': {}}
                        except:
                            packages = {'dietitian_id': dietitian_id, 'package_list': {}}
                        if len(packages['package_list'].keys()) < 1:
                            packages = {'dietitian_id': dietitian_id, 'package_list': {}}

                        for i in range(0, len(package_name_list)):
                            package_id = str(uuid.uuid4())
                            packages['package_list'].update({package_id: {'package_name': package_name_list[i],
                                                                          'package_price': package_price_list[i],
                                                                          'package_description': package_description_list[i]}})
                        dietitian_obj.packages = packages
                        dietitian_obj.save()
                        messages.success(request, 'Test Details Successfully Updated')

                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True

                        return render(request, 'data_management/dietitian_data/edit_dietitian_data.html',
                                      {'tab': '2', 'tab_listing': 'dietitian_listing', 'dietitian_obj': dietitian_obj,
                                       'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,'valid_choice': valid_choice,
                                       'dietitian_services_list': dietitian_services_list,
                                       'dietitian_type_list': dietitian_type_list,
                                       'dietitian_services_master': dietitian_services_master,
                                       'dietitian_type_master': dietitian_type_master
                                       })
                    else:
                        messages.error(request, 'Required data not received')
                        return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')

                if tab == '3' and request.method == "GET" and dietitian_id:
                    dietitian_obj = Dietitian.objects.get(id=dietitian_id)
                    try:
                        delog = request.GET.get('delog').strip()
                    except:
                        delog = None
                    try:
                        org_id = request.GET.get('org_id').strip()
                    except:
                        org_id = None

                    if dietitian_obj and org_id and delog=='delog':
                        try:
                            attach_obj = Attach_dietitian_organisation.objects.get(dietitian_id=dietitian_id,
                                                                                   organisation_id=org_id)
                        except:
                            attach_obj = None
                        if attach_obj:
                            attach_obj.delete()
                            messages.error(request, "ASSOCIATION SUCCESSFULLY DELETED")
                            return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                        else:
                            messages.error(request, "ASSOCIATION NOT FOUND- hence not deleted")
                            return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")

                    elif dietitian_obj:
                        attachlist = Attach_dietitian_organisation.objects.filter(dietitian_id=dietitian_id)
                        if len(attachlist) < 1:
                            attachlist = None

                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        department_obj = Department.objects.all().order_by('name')
                        return render(request, 'data_management/dietitian_data/edit_dietitian_data.html',
                                      {'tab': '3', 'tab_listing': 'dietitian_listing', 'dietitian_obj': dietitian_obj,
                                       'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,
                                       'valid_choice': valid_choice,
                                       'attachlist': attachlist,
                                       'dietitian_services_list': dietitian_services_list,
                                       'dietitian_type_list': dietitian_type_list,
                                       'dietitian_services_master': dietitian_services_master,
                                       'dietitian_type_master': dietitian_type_master,
                                       'department_obj':department_obj
                                       })
                    else:
                        messages.error(request, 'Required data not received')
                        return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")

                if tab == '3' and request.method == "POST" and dietitian_id:
                    dietitian_obj = Dietitian.objects.get(id=dietitian_id)
                    if dietitian_obj:
                        add = None
                        edit = None
                        try:
                            add = request.POST.get('add').strip()
                        except:
                            add = None
                        try:
                            edit = request.POST.get('edit').strip()
                        except:
                            edit = None

                        if add == "yes_please" :
                            try:
                                org_id = request.POST.get('diet_org_id').strip()
                            except:
                                org_id = None
                            try:
                                department_id = request.POST.get('department_id').strip()
                            except:
                                department_id = None

                            if org_id:
                                consultancy_fee = None
                                consultancy_fee = request.POST.get('consultancy_fee').strip()
                                attach_obj = None
                                attach_exists = False

                                try:
                                    attach_obj = Attach_dietitian_organisation.objects.get(dietitian_id=dietitian_id,organisation_id=org_id)
                                except:
                                    attach_obj = None
                                if attach_obj:
                                    attach_obj.consultancy_fee = consultancy_fee
                                    attach_obj.org_department_id = department_id
                                    attach_obj.save()
                                    messages.error(request, "ASSOCIATION ALREADY EXISTS - CONSULTANCY FEE SUCCESSFULLY UPDFATED")
                                    return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                                else:
                                    attach_obj = Attach_dietitian_organisation(dietitian_id=dietitian_id,organisation_id=org_id,consultancy_fee=consultancy_fee,org_department_id=department_id)
                                    attach_obj.save()
                                    messages.success(request, "ASSOCIATION CREATED")
                                    return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                            else:
                                messages.error(request, 'Organisation id not received')
                                return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")

                        if edit == "edit" :
                            try:
                                org_id = request.POST.get('org_id').strip()
                            except:
                                org_id = None
                            try:
                                department_id = request.POST.get('department_id').strip()
                            except:
                                department_id = None

                            if org_id:
                                consultancy_fee = None
                                consultancy_fee = request.POST.get('consultancy_fee').strip()
                                attach_obj = None
                                attach_exists = False
                                try:
                                    attach_obj = Attach_dietitian_organisation.objects.get(dietitian_id=dietitian_id,organisation_id=org_id)
                                except:
                                    attach_obj = None
                                if attach_obj:
                                    attach_obj.consultancy_fee = consultancy_fee
                                    attach_obj.org_department_id = department_id
                                    attach_obj.save()
                                    messages.success(request, "ASSOCIATION SUCCESSFULLY UPDFATED")
                                    return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                                else:
                                    attach_obj = Attach_dietitian_organisation(dietitian_id=dietitian_id,organisation_id=org_id,consultancy_fee=consultancy_fee)
                                    attach_obj.save()
                                    messages.success(request, "ASSOCIATION NOT FOUND - NEW ASSOCIATION CREATED")
                                    return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                            else:
                                messages.error(request, 'Organisation id not received')
                                return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                        else:
                            messages.error(request, 'Add/ Edit action not specified')
                            return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                    else:
                        messages.error(request, 'Dietitian data not received')
                        return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")

            else:
                messages.error(request, 'Access Denied')
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-dietitian-listing'))
                return HttpResponseRedirect(reverse('dietitian-listing'))

        else:
            messages.error(request,'Dietitian Not Found')
            is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-dietitian-listing'))
            return HttpResponseRedirect(reverse('dietitian-listing'))

    except  Exception as e:
        #print e
        raise Http404

####################################################################
# Name - Dietitian_listing                                         #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def dietitian_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        state_data_obj = State.objects.all().order_by('name')
        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            dietitian_obj = Dietitian.objects.filter(current_user_id=telecaller_id,is_disable=False ).order_by('name')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            dietitian_obj = Dietitian.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
        else:
            reviewer_id = 0
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            dietitian_obj = Dietitian.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('name')
        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:
            # dietitian_obj = Dietitian.objects.filter(current_user_id=telecaller_id).order_by(
            #    'name')  # current_user_id=telecaller_id
            if len(dietitian_obj) == 0:
                messages.error(request, "No Dietitian found")

                return render(request, 'data_management/dietitian_data/dietitian_listing.html',
                              {'tab_listing': 'dietitian_listing'})
            elif len(dietitian_obj) > 0:
                paginator = Paginator(dietitian_obj, 50)
                page = request.GET.get('page')
                try:
                    dietitian_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    dietitian_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    dietitian_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/dietitian_data/dietitian_listing.html',
                              dict(dietitian=dietitian_obj, tab_listing='dietitian_listing', state_data_obj=state_data_obj))
        elif reviewer_id:
            dietitian_obj = Dietitian.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
            if len(dietitian_obj) == 0:
                messages.error(request, "No Dietitian found")
                return render(request, 'data_management/dietitian_data/dietitian_listing.html',
                              {'tab_listing': 'dietitian_listing'})
            elif len(dietitian_obj) > 0:
                paginator = Paginator(dietitian_obj, 50)
                page = request.GET.get('page')
                try:
                    dietitian_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    dietitian_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    dietitian_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/dietitian_data/dietitian_listing.html',
                              dict(dietitian=dietitian_obj, tab_listing='dietitian_listing', state_data_obj=state_data_obj))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - dietitian_data_by_stages                                  #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def dietitian_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            dietitian_all_data = Dietitian.objects.filter(stage_id=stage_id).order_by('name')
        else:
            dietitian_all_data = Dietitian.objects.all().order_by('name')
            stage_id=None
        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(dietitian_all_data, 100)
        page = request.GET.get('page')
        try:
            dietitian_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            dietitian_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            dietitian_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/dietitian_management/dietitian_by_stages.html',
                      {'tab': 'data', 'crosal': 'dietitianbymanage', 'dietitian_all_data': dietitian_all_data,
                       'stage_data': stage_data,'stage_no':stage_id})
    except:
        raise Http404

####################################################################
# Name -  Dietitian_data_by_users                                  #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def dietitian_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            dietitian_all_data = Dietitian.objects.filter(current_user_id=search_data).order_by('name')
            paginator = Paginator(dietitian_all_data, 100)
            page = request.GET.get('page')
            try:
                dietitian_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                dietitian_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                dietitian_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/dietitian_management/dietitian_by_user.html',
                      {'tab': 'data', 'crosal': 'dietitianbymanage', 'dietitian_all_data': dietitian_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            dietitian_all_data = Dietitian.objects.filter(name__icontains=search_data_two).order_by('name')
            paginator = Paginator(dietitian_all_data, 3)
            page = request.GET.get('page')
            try:
                dietitian_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                dietitian_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                dietitian_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/dietitian_management/dietitian_by_user.html',
                          {'tab': 'data', 'crosal': 'dietitianbymanage', 'dietitian_all_data': dietitian_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})

        dietitian_all_data = Dietitian.objects.all().order_by('name')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(dietitian_all_data, 100)
        page = request.GET.get('page')
        try:
            dietitian_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            dietitian_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            dietitian_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/dietitian_management/dietitian_by_user.html',
                      {'tab': 'data', 'crosal': 'dietitianbymanage', 'dietitian_all_data': dietitian_all_data,
                       'user_data_obj': user_data_obj})
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - dietitian_data_manage                                     #
# Owner - Jaydeep                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def dietitian_data_manage(request):
    try:
        return render(request, 'admin/dietitian_management/dietitian_management.html',
                      {'tab': 'data', 'crosal': 'dietitianmanage'})
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - dietitian_assignment                                      #
#  Owner - Nishank                                                 #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def dietitian_assignment(request):
    try:
        stage_filter = False
        user_filter = False
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all().order_by('name')
        city_list = City.objects.all().order_by('name')
        locality_list = Locality.objects.all().order_by('name')
        user_data = User.objects.all().order_by('username')
        locality_obj = None
        city_obj = None
        current_user_id = None
        user_id_data = None
        stage_id = None
        stage_id_data = None
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            dietitian_obj = Dietitian.objects.filter(name__icontains=search_data).order_by('name')
            paginator = Paginator(dietitian_obj, 100)
            page = request.GET.get('page')
            try:
                dietitian_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                dietitian_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                dietitian_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/dietitian_management/dietitian_assign.html',
                    {'tab': 'data', 'crosal': 'dietitianbymanage', 'stage_data': stage_data,
                    'dietitian': dietitian_obj, 'state_data_obj': state_data_obj,'search_data':search_data,
                     'city_list':city_list,'locality_list':locality_list})

        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'filter':
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = None
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = None
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')

                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            dietitian_obj = Dietitian.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            dietitian_obj = Dietitian.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            dietitian_obj = Dietitian.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          stage_id=stage_id_data).order_by('name')

                    else:
                        dietitian_obj = Dietitian.objects.filter(state_id=state_filter,
                                                  city_id=city_data,
                                                  locality_id=locality_data).order_by('name')

                    paginator = Paginator(dietitian_obj, 100)
                    page = request.GET.get('page')
                    try:
                        dietitian_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        dietitian_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        dietitian_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/dietitian_management/dietitian_assign.html',
                                  {'tab': 'data', 'crosal': 'dietitianbymanage', 'stage_data': stage_data,
                                   'dietitian': dietitian_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                    'filter_name':filter_name,'state_data':state_data,
                                    'city_data':city_data,'locality_data':locality_data,
                                   'city_list':city_list,'locality_list':locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                elif city_data:
                    if user_id_data or stage_id_data:
                        if user_id_data and  stage_id_data :
                            dietitian_obj = Dietitian.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            dietitian_obj = Dietitian.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            dietitian_obj = Dietitian.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          stage_id=stage_id_data).order_by('name')

                    else:
                        dietitian_obj = Dietitian.objects.filter(state=state_data, city=city_data).order_by(
                            'name')

                    paginator = Paginator(dietitian_obj, 100)
                    page = request.GET.get('page')
                    try:
                        dietitian_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        dietitian_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        dietitian_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/dietitian_management/dietitian_assign.html',
                                  {'tab': 'data', 'crosal': 'dietitianbymanage', 'stage_data': stage_data,
                                   'dietitian': dietitian_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })

                else:

                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            dietitian_obj = Dietitian.objects.filter(state_id=state_filter,
                                                                     current_user_id=user_id_data,
                                                                     stage_id=stage_id_data).order_by('name')

                        elif user_id_data:
                            dietitian_obj = Dietitian.objects.filter(state_id=state_filter,
                                                                     current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            dietitian_obj = Dietitian.objects.filter(state_id=state_filter,
                                                                     stage_id=stage_id_data).order_by('name')
                    else:
                        dietitian_obj = Dietitian.objects.filter(state=state_data).order_by('name')

                    paginator = Paginator(dietitian_obj, 100)
                    page = request.GET.get('page')
                    try:
                        dietitian_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        dietitian_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        dietitian_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/dietitian_management/dietitian_assign.html',
                                  {'tab': 'data', 'crosal': 'dietitianbymanage', 'stage_data': stage_data,
                                   'dietitian': dietitian_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
            ##########
            elif not state_data and user_id_data or stage_id_data:
                if user_id_data or stage_id_data:
                    if user_id_data and stage_id_data:
                        dietitian_obj = Dietitian.objects.filter(current_user_id=user_id_data,
                                                               stage_id=stage_id_data).order_by('name')

                    elif user_id_data:
                        dietitian_obj = Dietitian.objects.filter(current_user_id=user_id_data).order_by('name')
                    elif stage_id_data:
                        dietitian_obj = Dietitian.objects.filter(stage_id=stage_id_data).order_by('name')
                else:
                    dietitian_obj = None


                paginator = Paginator(dietitian_obj, 100)
                page = request.GET.get('page')
                try:
                    dietitian_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    dietitian_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    dietitian_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/dietitian_management/dietitian_assign.html',
                              {'tab': 'data', 'crosal': 'dietitianbymanage', 'stage_data': stage_data,
                               'dietitian': dietitian_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'city_list': city_list, 'locality_list': locality_list,
                               'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                               'current_user_id':user_id_data,'stage_id':stage_id_data
                               })
            else:
                dietitian_obj = Dietitian.objects.all().order_by('name')
                paginator = Paginator(dietitian_obj, 100)
                page = request.GET.get('page')
                try:
                    dietitian_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    dietitian_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    dietitian_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/dietitian_management/dietitian_assign.html',
                              {'tab': 'data', 'crosal': 'dietitianbymanage', 'stage_data': stage_data,
                               'dietitian': dietitian_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'city_list': city_list, 'locality_list': locality_list,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'current_user_id': user_id_data, 'stage_id': stage_id_data
                               })


        else:

            filter_name = None
            state_data = None
            city_data = None
            locality_data = None
            dietitian_obj = Dietitian.objects.all().order_by('name')
            paginator = Paginator(dietitian_obj, 100)
            page = request.GET.get('page')
            try:
                dietitian_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                dietitian_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                dietitian_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/dietitian_management/dietitian_assign.html',
                          {'tab': 'data', 'crosal': 'dietitianbymanage', 'stage_data': stage_data,
                           'dietitian': dietitian_obj, 'state_data_obj': state_data_obj,
                           'city_obj': city_obj, 'locality_obj': locality_obj,
                           'locality_filter': locality_filter, 'city_filter': city_filter,
                           'state_filter': state_filter,
                           'filter_name': filter_name, 'state_data': state_data,
                           'city_data': city_data, 'locality_data': locality_data,
                           'city_list': city_list, 'locality_list': locality_list,
                           'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                           'current_user_id':user_id_data,'stage_id':stage_id_data
                           })
    except Exception as e:
        #print e
        raise Http404


####################################################################
# Name -mark_as_complete_publisher_dietitian                      #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_dietitian(request):
    try:
        if request.method == 'POST':
            dietitian_id = request.POST['dietitian_id']
            dietitian_obj = Dietitian.objects.get(id=dietitian_id, current_user_id=request.user.id)
            if dietitian_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    dietitian_obj.stage = Stage.objects.get(pk=5)
                    dietitian_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    return HttpResponseRedirect(reverse('dietitian-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('dietitian-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_reverse_reviewer_dietitian                         #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_dietitian(request):
    try:
        if request.method == 'POST':
            dietitian_id = request.POST['dietitian_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            dietitian_obj = Dietitian.objects.get(id=dietitian_id, current_user_id=request.user.id)
            if dietitian_obj and reviewer_data_id and free_text:
                try:
                    dietitian_obj.current_user = User.objects.get(id=reviewer_data_id)
                    dietitian_obj.previous_user = request.user.id
                    dietitian_obj.stage = Stage.objects.get(pk=3)
                    dietitian_obj.free_text = free_text
                    dietitian_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    return HttpResponseRedirect(reverse('dietitian-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('dietitian-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_reverse_caller_dietitian                          #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_dietitian(request):
    try:
        if request.method == 'POST':
            dietitian_id = request.POST['dietitian_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            dietitian_obj = Dietitian.objects.get(id=dietitian_id, current_user_id=request.user.id)
            if dietitian_obj and caller_data_id and free_text:
                try:
                    dietitian_obj.current_user = User.objects.get(id=caller_data_id)
                    dietitian_obj.previous_user = request.user.id
                    dietitian_obj.stage = Stage.objects.get(pk=2)
                    dietitian_obj.free_text = free_text
                    dietitian_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-dietitian-listing'))
                    return HttpResponseRedirect(reverse('dietitian-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-dietitian-listing'))
        return HttpResponseRedirect(reverse('dietitian-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_complete_reviewer_dietitian                       #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_dietitian(request):
    try:
        if request.method == 'POST':
            dietitian_id = request.POST['dietitian_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            dietitian_obj = Dietitian.objects.get(id=dietitian_id, current_user_id=request.user.id)
            if dietitian_obj and publisher_data_id and valid_choice_id:
                try:
                    dietitian_obj.current_user = User.objects.get(id=publisher_data_id)
                    dietitian_obj.previous_user = request.user.id
                    dietitian_obj.stage = Stage.objects.get(pk=4)
                    dietitian_obj.free_text = ''
                    dietitian_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    dietitian_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('dietitian-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('dietitian-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - mark_as_complete_caller_dietitian                         #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_dietitian(request):
    try:
        if request.method == 'POST':
            dietitian_id = request.POST['dietitian_id']
            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            dietitian_obj = Dietitian.objects.get(id=dietitian_id, current_user_id=request.user.id)
            if dietitian_obj and reviewer_data_id and valid_choice_id:
                try:
                    dietitian_obj.current_user = User.objects.get(id=reviewer_data_id)
                    dietitian_obj.previous_user = request.user.id
                    dietitian_obj.stage = Stage.objects.get(pk=3)
                    dietitian_obj.free_text = ''
                    dietitian_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    dietitian_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('dietitian-listing'))
                except:
                    raise Http404
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('dietitian-listing'))
    except Exception as e:
        return HttpResponse("Something Bad Happened")

####################################################################
# Name - Dietitian assignment                                      #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_dietitian(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                nbslist = []
                nbflist = []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = Dietitian.objects.filter(id=checkedValues[i]).update(
                            current_user_id=assign_user,
                            stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue
                my_send_mail(request, 'dietitian', nbslist, nbflist, 'Dietitian Assignment', 'Assigned')
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/dietitian/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - dietitian_services_master_data                            #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def dietitian_services_master_data(request):
    try:
        if request.method == "GET":
            dietitian_services_master = DietitianServices.objects.all().order_by('name')
            paginator = Paginator(dietitian_services_master, 100)
            page = request.GET.get('page')
            try:
                dietitian_services_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                dietitian_services_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                dietitian_services_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/dietitian_services_master_data_management.html',
                          {'dietitian_services_master': dietitian_services_master})
    except Exception as e:
        raise Http404

###################################################################
#Name - dietitian_services_master_add_edit                        #
#Owner - Nishank                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def dietitian_services_master_add_edit(request, dietitian_services_master_id=None):
    try:
        if dietitian_services_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = DietitianServices.objects.get(id=dietitian_services_master_id)
                return render(request, 'admin/master_data_management/dietitian_services_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = DietitianServices.objects.get(id=dietitian_services_master_id)
                    type_obj.name = name

                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Dietitian edited successfully")
                    return redirect('dietitian_services_master_data_page')
                else:
                    messages.error(request, "Please provide Dietitian name")
                    return redirect(reverse("dietitian_services_master_edit", args=[dietitian_services_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/dietitian_services_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = DietitianServices(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "Dietitian edited successfully")
                    return redirect('dietitian_services_master_data_page')
                else:
                    messages.error(request, "Please provide Dietitian name")
                    return redirect(reverse("dietitian_services_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - dietitian_type_master_data                                #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def dietitian_type_master_data(request):
    try:
        if request.method == "GET":
            dietitian_type_master = Dietitian_type_master.objects.all().order_by('name')
            paginator = Paginator(dietitian_type_master, 100)
            page = request.GET.get('page')
            try:
                dietitian_type_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                dietitian_type_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                dietitian_type_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/dietitian_type_master_data_management.html',
                          {'dietitian_type_master': dietitian_type_master})
    except Exception as e:
        raise Http404

###################################################################
#Name - dietitian_type_master_add_edit                            #
#Owner - Nishank                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def dietitian_type_master_add_edit(request, dietitian_type_master_id=None):
    try:
        if dietitian_type_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Dietitian_type_master.objects.get(id=dietitian_type_master_id)

                return render(request, 'admin/master_data_management/dietitian_type_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = Dietitian_type_master.objects.get(id=dietitian_type_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Dietitian Type edited successfully")
                    return redirect('dietitian_type_master_data_page')
                else:
                    messages.error(request, "Please provide Dietitian Type name")
                    return redirect(reverse("dietitian_type_master_edit", args=[dietitian_type_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/dietitian_type_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Dietitian_type_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Dietitian Type edited successfully")
                    return redirect('dietitian_type_master_data_page')
                else:
                    messages.error(request, "Please provide Dietitian Type name")
                    return redirect(reverse("dietitian_type_master_add"))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - dietitian_publisher_listing                               #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def dietitian_publisher_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        stage_data_pub = None
        try:
            stage_data_pub = request.GET['stage_data_pub']
        except:
            stage_data_puba = None
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if publisher_id:
            if stage_data_pub :
                if category_id:
                    dietitian_obj = Dietitian.objects.filter(Q(stage_id=stage_data_pub),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                    category_filter = int(category_id)
                else:
                    dietitian_obj = Dietitian.objects.filter(stage_id=stage_data_pub,current_user_id =request.user.id,is_disable=False).order_by('name')

            else:
                if category_id:
                    dietitian_obj = Dietitian.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                    category_filter = int(category_id)
                else:
                    dietitian_obj = Dietitian.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('name')
            if len(dietitian_obj) == 0:
                messages.error(request, "No Dietitian found")
                return render(request, 'publisher/dietitian/dietitian_listing_publisher.html',
                              {'tab_listing': 'dietitian-listing', 'tab': 'dietitian-listing',
                               'stage_data': stage_data_obj,
                               'category_obj': category_data, 'category_filter': category_filter,
                               'stage_data_pub':stage_data_pub})

            paginator = Paginator(dietitian_obj, 50)
            page = request.GET.get('page')
            try:
                dietitian_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                dietitian_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                dietitian_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/dietitian/dietitian_listing_publisher.html',
                          dict(dietitian_obj=dietitian_obj, tab_listing='dietitian-listing', tab='dietitian-listing',
                               stage_data=stage_data_obj,
                               category_obj=category_data, category_filter=category_filter,stage_data_pub=stage_data_pub))
        else:
            return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - dietitian_association                                     #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def dietitian_association(request, dietitian_id=None,organisation_id=None):
    try :
        if request.method == 'GET':
            if dietitian_id and organisation_id:
                try:
                    action = request.GET.get('action')
                except:
                    action = None
                if action == 'del':
                    try:
                        asso_id = request.GET.get('asso_id')
                    except:
                        asso_id = None

                asso_object = Attach_dietitian_organisation.objects.filter(id=asso_id)
                asso_object_test = Attach_dietitian_organisation.objects.filter(dietitian_id=dietitian_id,
                                                                                organisation_id=organisation_id)
                if len(asso_object) == 1:
                    if asso_object[0] is asso_object_test[0]:
                        asso_object[0].delete()

                        messages.success(request, "Successfuly Deleted Dietitian organisation Association")
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    else:
                        messages.error(request, "Issue with ids ")
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                else:
                    messages.error(request,
                                   "None or Multiple associations for dietician and Org pair DO exist - which is Not allowed ")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            else:
                messages.error(request, "Dietitian and Organisation ids not received")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        elif request.method == 'POST':
            if dietitian_id and organisation_id:
                try:
                    action = request.GET.get('action')
                except:
                    action = None

                if action == 'fee':
                    asso_id = request.POST.get('asso_id')
                    asso_object = Attach_dietitian_organisation.objects.filter(id=asso_id)
                    asso_object_test = Attach_dietitian_organisation.objects.filter(dietitian_id=dietitian_id,organisation_id=organisation_id )
                    if len(asso_object) == 1:
                        if asso_object[0] is asso_object_test[0]:
                            consultancy_fee = request.POST.get('consultancy_fee')
                            asso_object[0].consultancy_fee =consultancy_fee
                            asso_object[0].save()
                            messages.success(request, "Successfuly Updated Dietitian's Consulting fee")
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                        else:
                            messages.error(request,"Issue with ids ")
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    else:
                        messages.error(request, "None or Multiple associations for dietician and Org pair DO exist - which is Not allowed ")
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            elif dietitian_id == None and organisation_id == None:
                try:
                    action = request.GET.get('action')
                except:
                    action = None
                if action == 'attach':
                    pass
                else:
                    messages.error(request, "Diettitian and Org id's not received")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            else:
                messages.error(request,"Dietitian and Organisation ids not received")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - get_organisatin_byname                                    #
# NISHANK                                                          #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def get_organisatin_byname(request):
    try:
        response = {}
        if request.method == "POST":
            try:
                locality_id = request.POST['locality_id'].strip()
            except:
                locality_id = request.POST['name'].strip()
            if locality_id is not None:
                locality_id = locality_id.strip()
                organisation_obj = OrganisationName.objects.filter(locality_id=locality_id,is_disable=False,is_live_org=False).values('name','id')
                #print organisation_obj
                if len(organisation_obj):
                    response['organisation_list'] = list(organisation_obj)
                else:
                    response['organisation_list'] = list(organisation_obj)
                    response['Message'] = 'No Organisation Present...!'
            else:
                response['Message'] = 'Please select Locality'
        data = json.dumps(response)
    except Exception as e:
        raise Http404
    return HttpResponse(data)


####################################################################
# Name - get_org_locality_and_stg4or5                              #
# NISHANK                                                          #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def get_org_locality_and_stg4or5(request):
    try:
        response = {}
        if request.method == "POST":
            try:
                locality_id = request.POST['locality_id'].strip()
            except:
                locality_id = request.POST['name'].strip()
            if locality_id is not None:
                locality_id = locality_id.strip()

                #organisation_obj = OrganisationName.objects.filter(locality_id=locality_id,is_disable=False,stage_id__gte=4).values('name','id')
                #
                # if len(organisation_obj):
                #     response['organisation_list'] = list(organisation_obj)
                # else:
                #     response['organisation_list'] = list(organisation_obj)
                #     response['Message'] = 'No Organisation Present...!'
                organisation_obj = OrganisationName.objects.filter(locality_id=locality_id, is_disable=False, stage_id__gte=4,is_live_org=False)

                tmp_list = []
                for i in organisation_obj:
                    name = i.name +'|'+ i.street+'|'+ i.locality.name
                    tmp_list.append({'name':name,'id':i.id})
                if len(organisation_obj):
                    response['organisation_list'] = list(tmp_list)
                else:
                    response['organisation_list'] = list(tmp_list)
                    response['Message'] = 'No Organisation Present...!'



            else:
                response['Message'] = 'Please select Locality'
        data = json.dumps(response)
    except Exception as e:
        raise Http404
    return HttpResponse(data)

####################################################################
# Name - dietitian_org_schedule                                    #
# NISHANK                                                          #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def dietitian_org_schedule(request, dietitian_id=None, organisation_id=None):
    try:
        dietitian = Dietitian.objects.get(id = dietitian_id )
        organisation = OrganisationName.objects.get(id=organisation_id)
        disable_appointment = None
        try:
            asso_obj = Attach_dietitian_organisation.objects.get(dietitian_id =dietitian_id,organisation_id=organisation_id)
        except:
            asso_obj = None
        if asso_obj:
            if request.method == "GET":
                try:
                    disable_appointment = request.GET.get('disable_appointment').strip()
                except:
                    disable_appointment = None

                if disable_appointment == 'yes':
                    asso_obj.by_appointment = False
                    asso_obj.save()
                try:
                    doctor_id = int(dietitian_id)
                except:
                    raise Http404
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404
                #>> check = AttachWithDoctor.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                check = Attach_dietitian_organisation.objects.filter(dietitian_id=dietitian_id, organisation_id=organisation_id)
                if len(check) == 1:
                    ## >> schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                    schedule_list = []
                    # This case add by jitendra dixit temporary use
                    by_check = None
                    schedule_id = None
                    schedule_list = asso_obj.schedule    #get the conetnt of json field
                    if schedule_list :
                        pass
                    else:
                        schedule_list = []
                    if type(schedule_list) is str:
                        schedule_list = json.loads(schedule_list)
                    #>> schedule_id = schedule_obj[0].id #Id of the whole scehdule table object saved in id column
                    asso_obj_id = asso_obj.id
                    by_check = asso_obj.by_appointment

                    return render(request, 'data_management/dietitian_data/schedule_form.html',
                                  dict(schedule_list=schedule_list, dietitian=dietitian,
                                       asso_obj_id=asso_obj_id,day_list=day_list,organisation=organisation,
                                       tab_listing='dietitian_listing',by_check=by_check))
                else:
                    raise Http404
            elif request.method == "POST":
                try:
                    dietitian_id = int(dietitian_id)
                except:
                    raise Http404
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404
                asso_obj = Attach_dietitian_organisation.objects.filter(dietitian_id =dietitian_id,organisation_id=organisation_id)
                #>>schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                #>>schedule_obj.update(by_appointment=False)
                asso_obj.by_appointment=False
                if len(asso_obj) == 1: #and len(schedule_obj) == 1:
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = asso_obj[0].schedule
                    if schedule_data == None:
                        schedule_data = []
                    try:
                        by_app = request.POST.getlist('by_app')
                    except:
                        by_app = []
                    if len(by_app) == 0:
                        by_app.append('0ff')

                    if by_app[0] == 'on':
                        asso_obj[0].by_appointment=True
                        asso_obj[0].save()
                        messages.success(request, 'Successfully  Set to By Apointment ')
                        return redirect(reverse('time-schedule-dietitian', args=[dietitian_id, organisation_id]))
                    else:
                        start_time = request.POST.getlist('start_time')

                        start_period = request.POST.getlist('start_period')
                        end_time = request.POST.getlist('end_time')
                        end_period = request.POST.getlist('end_period')
                        from_day = request.POST.get('from_day')
                        to_day = request.POST.get('to_day')
                        if start_time and start_period and end_period and end_time and from_day:
                            unique_id = str(uuid.uuid4())
                            for i in range(0, len(start_time)):
                                timing_dict = {}
                                timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                                timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                                timing_list.append(timing_dict)
                            add_schedule_dict['from_day'] = from_day
                            add_schedule_dict['to_day'] = to_day
                            add_schedule_dict['timing'] = timing_list
                            add_schedule_dict['id'] = unique_id
                            #while saving new schedule, the schedule is created as a dictionary which is then appended
                            #to the single listcontained in (schedule_data)
                            schedule_data.append(add_schedule_dict)
                            asso_obj[0].schedule=schedule_data
                            asso_obj[0].by_appointment=False
                            asso_obj[0].save()

                            messages.success(request, 'Successfully  Added Schedule')
                            return redirect(reverse('time-schedule-dietitian', args=[dietitian_id,organisation_id]))

                        else:
                            messages.error(request, 'Please Provide Timing details required field')
                            return redirect(reverse('time-schedule-dietitian', args=[dietitian_id, organisation_id]))
        else:
            messages.error(request, "ASSOCIATION OBJECT NOT FOUND")
            return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=3')
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - delete_dietitian_schedule                                 #
# Owner - Nishankj                                                 #
####################################################################
# def make_cond(name, value):
#     cond = json.dumps({name:value})[1:-1] # remove '{' and '}'
#     return ' ' + cond
@login_required(login_url='/')
@csrf_exempt
def delete_dietitian_schedule(request, dietitian_id=None, organisation_id=None):
    try:
        asso_obj = Attach_dietitian_organisation.objects.get(dietitian_id =dietitian_id,organisation_id=organisation_id)
        if request.method == "GET" and organisation_id and dietitian_id is not None and asso_obj:
            id_data = request.GET['id']
            if id_data:
                #>>schedule_data_obj = Schedule.objects.filter(schedule_data__contains=[{'id': id_data}])

                #>>update_data = list(schedule_data_obj[0].schedule_data)
                exp_data = asso_obj.schedule
                #update_data = _.without(update_data, _.findWhere(update_data, {'id': id_data}))
                for i in exp_data:
                    if i['id'] == id_data:
                        exp_data.remove(i)
                asso_obj.schedule = exp_data
                asso_obj.save()
                messages.success(request, 'Successfully Deleted')
                return redirect(reverse('time-schedule-dietitian', args=[dietitian_id, organisation_id]))
            else:
                messages.error(request, 'ID for schedule to be deleted not received')
                return redirect(reverse('time-schedule-dietitian', args=[dietitian_id, organisation_id]))
        else:
            messages.error(request, 'Full information about Org abd Diettitian ids not received')
            return redirect(reverse('time-schedule-dietitian', args=[dietitian_id, organisation_id]))
    except Exception as e:
        raise Http404

# ########## THERAPIST START ####################
####################################################################
# Name - delete_therapist_schedule                                 #
# Owner - Nishank                                                  #
####################################################################
# def make_cond(name, value):
#     cond = json.dumps({name:value})[1:-1] # remove '{' and '}'
#     return ' ' + cond
@login_required(login_url='/')
@csrf_exempt
def delete_therapist_schedule(request, therapist_id=None, organisation_id=None):
    try:
        asso_obj = Attach_therapist_organisation.objects.get(therapist_id =therapist_id,organisation_id=organisation_id)
        if request.method == "GET" and organisation_id and therapist_id is not None and asso_obj:
            id_data = request.GET['id']
            if id_data:
                #>>schedule_data_obj = Schedule.objects.filter(schedule_data__contains=[{'id': id_data}])

                #>>update_data = list(schedule_data_obj[0].schedule_data)
                exp_data = asso_obj.schedule
                #update_data = _.without(update_data, _.findWhere(update_data, {'id': id_data}))
                for i in exp_data:
                    if i['id'] == id_data:
                        exp_data.remove(i)
                asso_obj.schedule = exp_data
                asso_obj.save()
                messages.success(request, 'Successxfully Deleted')
                return redirect(reverse('time-schedule-therapist', args=[therapist_id, organisation_id]))
            else:
                messages.error(request, 'ID for schedule to be deleted not received')
                return redirect(reverse('time-schedule-therapist', args=[therapist_id, organisation_id]))
        else:
            messages.error(request, 'Full information about Org abd Diettitian ids not received')
            return redirect(reverse('time-schedule-therapist', args=[therapist_id, organisation_id]))
    except Exception as e:
        raise Http404

####################################################################
# Name - therapist_services_master_data                            #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def therapist_services_master_data(request):
    try:
        if request.method == "GET":
            therapist_services_master = TherapistServices.objects.all().order_by('name')
            paginator = Paginator(therapist_services_master, 100)
            page = request.GET.get('page')
            try:
                therapist_services_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                therapist_services_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                therapist_services_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/therapist_services_master_data_management.html',
                          {'therapist_services_master': therapist_services_master})
    except Exception as e:
        raise Http404

###################################################################
#Name - therapist_services_master_add_edit                        #
#Owner - Nishank                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def therapist_services_master_add_edit(request, therapist_services_master_id=None):
    try:
        if therapist_services_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = TherapistServices.objects.get(id=therapist_services_master_id)
                return render(request, 'admin/master_data_management/therapist_services_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = TherapistServices.objects.get(id=therapist_services_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Therapist edited successfully")
                    return redirect('therapist_services_master_data_page')
                else:
                    messages.error(request, "Please provide Therapist name")
                    return redirect(reverse("therapist_services_master_edit", args=[therapist_services_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/therapist_services_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = TherapistServices(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "Therapist edited successfully")
                    return redirect('therapist_services_master_data_page')
                else:
                    messages.error(request, "Please provide Therapist name")
                    return redirect(reverse("therapist_services_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - therapist_type_master_data                                #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def therapist_type_master_data(request):
    try:
        if request.method == "GET":
            therapist_type_master = Therapist_type_master.objects.all().order_by('name')
            paginator = Paginator(therapist_type_master, 100)
            page = request.GET.get('page')
            try:
                therapist_type_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                therapist_type_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                therapist_type_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/therapist_type_master_data_management.html',
                          {'therapist_type_master': therapist_type_master})
    except Exception as e:
        raise Http404

###################################################################
#Name - therapist_type_master_add_edit                            #
#Owner - Nishank                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def therapist_type_master_add_edit(request, therapist_type_master_id=None):
    try:

        if therapist_type_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Therapist_type_master.objects.get(id=therapist_type_master_id)
                return render(request, 'admin/master_data_management/therapist_type_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = Therapist_type_master.objects.get(id=therapist_type_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Therapist Type edited successfully")
                    return redirect('therapist_type_master_data_page')
                else:
                    messages.error(request, "Please provide Therapist Type name")
                    return redirect(reverse("therapist_type_master_edit", args=[therapist_type_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/therapist_type_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Therapist_type_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True

                    new_object.save()
                    messages.success(request, "New Therapist Type edited successfully")
                    return redirect('therapist_type_master_data_page')
                else:
                    messages.error(request, "Please provide Therapist Type name")
                    return redirect(reverse("therapist_type_master_add"))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - therapist_speciality_master_data                          #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def therapist_speciality_master_data(request):
    try:
        if request.method == "GET":
            therapist_speciality_master = Therapist_speciality_master.objects.all().order_by('name')
            paginator = Paginator(therapist_speciality_master, 100)
            page = request.GET.get('page')
            try:
                therapist_speciality_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                therapist_speciality_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                therapist_speciality_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/therapist_speciality_master_data_management.html',
                          {'therapist_speciality_master': therapist_speciality_master})
    except Exception as e:
        #print e
        raise Http404

###################################################################
#Name - therapist_speciality_master_add_edit                      #
#Owner - Nishank                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def therapist_speciality_master_add_edit(request, therapist_speciality_master_id=None):
    try:
        if therapist_speciality_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                speciality_obj = Therapist_speciality_master.objects.get(id=therapist_speciality_master_id)
                return render(request, 'admin/master_data_management/therapist_speciality_master_add_edit.html',
                              {'speciality_obj': speciality_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    speciality_obj = Therapist_speciality_master.objects.get(id=therapist_speciality_master_id)
                    speciality_obj.name = name
                    if status == '11':
                        speciality_obj.delete = False
                    else:
                        speciality_obj.delete = True
                    speciality_obj.save()
                    messages.success(request, "Therapist Type edited successfully")
                    return redirect('therapist_speciality_master_data_page')
                else:
                    messages.error(request, "Please provide Therapist Type name")
                    return redirect(reverse("therapist_speciality_master_edit", args=[therapist_speciality_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/therapist_speciality_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Therapist_speciality_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Therapist Type edited successfully")
                    return redirect('therapist_speciality_master_data_page')
                else:
                    messages.error(request, "Please provide Therapist Type name")
                    return redirect(reverse("therapist_speciality_master_add"))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - therapist_publisher_listing                               #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def therapist_publisher_listing(request):
    try:
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        stage_data_obj = Stage.objects.all()[3:5]
        category_data = Category.objects.all().order_by('name')
        category_filter = False
        stage_data_pub = None
        search_name = None
        try:
            search_name = request.GET['search_name']
        except:
            search_name = None
        try:
            stage_data_pub = request.GET['stage_data_pub']
        except:
            stage_data_pub = None
        try:
            category_id = request.GET['category']
        except:
            category_id = None
        if assign_id.is_publisher is True:
            publisher_id = request.user.id
        else:
            publisher_id = 0
        if publisher_id:
            if search_name :
                if category_id:
                    therapist_obj = Therapist.objects.filter(Q(name__icontains=search_name),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                    category_filter = int(category_id)
                else:
                    therapist_obj = Therapist.objects.filter(name__icontains=search_name,current_user_id =request.user.id,is_disable=False).order_by('name')

            elif stage_data_pub :
                if category_id:
                    therapist_obj = Therapist.objects.filter(Q(stage_id=stage_data_pub),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                    category_filter = int(category_id)
                else:
                    therapist_obj = Therapist.objects.filter(stage_id=stage_data_pub,current_user_id =request.user.id,is_disable=False).order_by('name')

            else:
                if category_id:
                    therapist_obj = Therapist.objects.filter(Q(stage_id__gte=4),Q(category_id=category_id), Q(current_user_id =request.user.id),Q(is_disable=False)).order_by('name')
                    category_filter = int(category_id)
                else:
                    therapist_obj = Therapist.objects.filter(stage_id__gte=4,current_user_id =request.user.id,is_disable=False).order_by('name')
            if len(therapist_obj) == 0:
                messages.error(request, "No Therapist found")
                return render(request, 'publisher/therapist/therapist_listing_publisher.html',
                              {'tab_listing': 'therapist-listing', 'tab': 'therapist-listing',
                               'stage_data': stage_data_obj,
                               'category_obj': category_data, 'category_filter': category_filter,
                               'stage_data_pub':stage_data_pub,'search_name':search_name})

            paginator = Paginator(therapist_obj, 50)
            page = request.GET.get('page')
            try:
                therapist_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                therapist_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                therapist_obj = paginator.page(paginator.num_pages)
            return render(request, 'publisher/therapist/therapist_listing_publisher.html',
                          dict(therapist_obj=therapist_obj, tab_listing='therapist-listing', tab='therapist-listing',
                               stage_data=stage_data_obj,
                               category_obj=category_data, category_filter=category_filter,stage_data_pub=stage_data_pub,
                               search_name=search_name))
        else:
            return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - therapist_assignment                                      #
#  Owner - Nishank                                                 #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
@csrf_exempt
def therapist_assignment(request):
    try:
        stage_filter = False
        user_filter = False
        state_filter = False
        city_filter = False
        locality_filter = False
        stage_data = Stage.objects.all()[:4]
        state_data_obj = State.objects.all().order_by('name')
        city_list = City.objects.all().order_by('name')
        locality_list = Locality.objects.all().order_by('name')
        user_data = User.objects.all().order_by('username')
        locality_obj = None
        city_obj = None
        current_user_id = None
        user_id_data = None
        stage_id = None
        stage_id_data = None
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            therapist_obj = Therapist.objects.filter(name__icontains=search_data).order_by('name')
            paginator = Paginator(therapist_obj, 100)
            page = request.GET.get('page')
            try:
                therapist_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                therapist_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                therapist_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/therapist_management/therapist_assign.html',
                    {'tab': 'data', 'crosal': 'therapistbymanage', 'stage_data': stage_data,
                    'therapist': therapist_obj, 'state_data_obj': state_data_obj,'search_data':search_data,
                     'city_list':city_list,'locality_list':locality_list})

        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'filter':
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = None
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = None
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            state_data = request.GET['state_id'].strip()
            if state_data:
                state_filter = int(state_data)
            city_data = request.GET['city_id'].strip()
            if city_data:
                city_filter = int(city_data)
                city_obj = City.objects.filter(state_id=state_filter).order_by('name')
            else:
                city_obj = []
            locality_data = request.GET['locality_id'].strip()
            if locality_data:
                locality_filter = int(locality_data)
            if state_data:
                if city_data and locality_data:
                    locality_obj = Locality.objects.filter(city_id=city_filter).order_by('name')

                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            therapist_obj = Therapist.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')
                        elif user_id_data:
                            therapist_obj = Therapist.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            therapist_obj = Therapist.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          locality_id=locality_data,
                                                          stage_id=stage_id_data).order_by('name')
                    else:
                        therapist_obj = Therapist.objects.filter(state_id=state_filter,
                                                  city_id=city_data,
                                                  locality_id=locality_data).order_by('name')

                    paginator = Paginator(therapist_obj, 100)
                    page = request.GET.get('page')
                    try:
                        therapist_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        therapist_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        therapist_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/therapist_management/therapist_assign.html',
                                  {'tab': 'data', 'crosal': 'therapistbymanage', 'stage_data': stage_data,
                                   'therapist': therapist_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                    'filter_name':filter_name,'state_data':state_data,
                                    'city_data':city_data,'locality_data':locality_data,
                                   'city_list':city_list,'locality_list':locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                elif city_data:
                    if user_id_data or stage_id_data:
                        if user_id_data and  stage_id_data :
                            therapist_obj = Therapist.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data,
                                                          stage_id=stage_id_data).order_by('name')
                        elif user_id_data:
                            therapist_obj = Therapist.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            therapist_obj = Therapist.objects.filter(state_id=state_filter,
                                                          city_id=city_data,
                                                          stage_id=stage_id_data).order_by('name')
                    else:
                        therapist_obj = Therapist.objects.filter(state=state_data, city=city_data).order_by(
                            'name')

                    paginator = Paginator(therapist_obj, 100)
                    page = request.GET.get('page')
                    try:
                        therapist_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        therapist_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        therapist_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/therapist_management/therapist_assign.html',
                                  {'tab': 'data', 'crosal': 'therapistbymanage', 'stage_data': stage_data,
                                   'therapist': therapist_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
                else:
                    if user_id_data or stage_id_data:
                        if user_id_data and stage_id_data:
                            therapist_obj = Therapist.objects.filter(state_id=state_filter,
                                                                     current_user_id=user_id_data,
                                                                     stage_id=stage_id_data).order_by('name')
                        elif user_id_data:
                            therapist_obj = Therapist.objects.filter(state_id=state_filter,
                                                                     current_user_id=user_id_data).order_by('name')
                        elif stage_id_data:
                            therapist_obj = Therapist.objects.filter(state_id=state_filter,
                                                                     stage_id=stage_id_data).order_by('name')
                    else:
                        therapist_obj = Therapist.objects.filter(state=state_data).order_by('name')
                    paginator = Paginator(therapist_obj, 100)
                    page = request.GET.get('page')
                    try:
                        therapist_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        therapist_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        therapist_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/therapist_management/therapist_assign.html',
                                  {'tab': 'data', 'crosal': 'therapistbymanage', 'stage_data': stage_data,
                                   'therapist': therapist_obj, 'state_data_obj': state_data_obj,
                                   'city_obj': city_obj, 'locality_obj': locality_obj,
                                   'locality_filter': locality_filter, 'city_filter': city_filter,
                                   'state_filter': state_filter,
                                   'filter_name': filter_name, 'state_data': state_data,
                                   'city_data': city_data, 'locality_data': locality_data,
                                   'city_list': city_list, 'locality_list': locality_list,
                                   'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                                   'current_user_id':user_id_data,'stage_id':stage_id_data
                                   })
            ##########
            elif not state_data and user_id_data or stage_id_data:
                if user_id_data or stage_id_data:
                    if user_id_data and stage_id_data:
                        therapist_obj = Therapist.objects.filter(current_user_id=user_id_data,
                                                               stage_id=stage_id_data).order_by('name')
                    elif user_id_data:
                        therapist_obj = Therapist.objects.filter(current_user_id=user_id_data).order_by('name')
                    elif stage_id_data:
                        therapist_obj = Therapist.objects.filter(stage_id=stage_id_data).order_by('name')
                else:
                    therapist_obj = None
                paginator = Paginator(therapist_obj, 100)
                page = request.GET.get('page')
                try:
                    therapist_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    therapist_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    therapist_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/therapist_management/therapist_assign.html',
                              {'tab': 'data', 'crosal': 'therapistbymanage', 'stage_data': stage_data,
                               'therapist': therapist_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'city_list': city_list, 'locality_list': locality_list,
                               'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                               'current_user_id':user_id_data,'stage_id':stage_id_data
                               })
            else:
                therapist_obj = Therapist.objects.all().order_by('name')
                paginator = Paginator(therapist_obj, 100)
                page = request.GET.get('page')
                try:
                    therapist_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    therapist_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    therapist_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/therapist_management/therapist_assign.html',
                              {'tab': 'data', 'crosal': 'therapistbymanage', 'stage_data': stage_data,
                               'therapist': therapist_obj, 'state_data_obj': state_data_obj,
                               'city_obj': city_obj, 'locality_obj': locality_obj,
                               'locality_filter': locality_filter, 'city_filter': city_filter,
                               'state_filter': state_filter,
                               'filter_name': filter_name, 'state_data': state_data,
                               'city_data': city_data, 'locality_data': locality_data,
                               'city_list': city_list, 'locality_list': locality_list,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'current_user_id': user_id_data, 'stage_id': stage_id_data
                               })
        else:
            filter_name = None
            state_data = None
            city_data = None
            locality_data = None
            therapist_obj = Therapist.objects.all().order_by('name')
            paginator = Paginator(therapist_obj, 100)
            page = request.GET.get('page')
            try:
                therapist_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                therapist_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                therapist_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/therapist_management/therapist_assign.html',
                          {'tab': 'data', 'crosal': 'therapistbymanage', 'stage_data': stage_data,
                           'therapist': therapist_obj, 'state_data_obj': state_data_obj,
                           'city_obj': city_obj, 'locality_obj': locality_obj,
                           'locality_filter': locality_filter, 'city_filter': city_filter,
                           'state_filter': state_filter,
                           'filter_name': filter_name, 'state_data': state_data,
                           'city_data': city_data, 'locality_data': locality_data,
                           'city_list': city_list, 'locality_list': locality_list,
                           'stage_filter': stage_filter, 'user_filter': user_filter,'user_data':user_data,
                           'current_user_id':user_id_data,'stage_id':stage_id_data
                           })
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - therapist_data_manage                                     #
# Owner - Jaydeep                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser, login_url='/')
@require_GET
def therapist_data_manage(request):
    try:
        return render(request, 'admin/therapist_management/therapist_management.html',
                      {'tab': 'data', 'crosal': 'therapistmanage'})
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name -  Therapist_data_by_users                                  #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def therapist_data_by_users(request):
    try:
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            user_data_obj = UserManagement.objects.all()
            therapist_all_data = Therapist.objects.filter(current_user_id=search_data).order_by('name')
            paginator = Paginator(therapist_all_data, 100)
            page = request.GET.get('page')
            try:
                therapist_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                therapist_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                therapist_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/therapist_management/therapist_by_user.html',
                      {'tab': 'data', 'crosal': 'therapistbymanage', 'therapist_all_data': therapist_all_data,
                       'user_data_obj': user_data_obj,'search_data':search_data})

        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            therapist_all_data = Therapist.objects.filter(name__icontains=search_data_two).order_by('name')
            paginator = Paginator(therapist_all_data, 100)
            page = request.GET.get('page')
            try:
                therapist_all_data = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                therapist_all_data = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                therapist_all_data = paginator.page(paginator.num_pages)
            return render(request, 'admin/therapist_management/therapist_by_user.html',
                          {'tab': 'data', 'crosal': 'therapistbymanage', 'therapist_all_data': therapist_all_data,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two})

        therapist_all_data = Therapist.objects.all().order_by('name')
        user_data_obj = UserManagement.objects.all()
        paginator = Paginator(therapist_all_data, 100)
        page = request.GET.get('page')
        try:
            therapist_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            therapist_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            therapist_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/therapist_management/therapist_by_user.html',
                      {'tab': 'data', 'crosal': 'therapistbymanage', 'therapist_all_data': therapist_all_data,
                       'user_data_obj': user_data_obj})
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - therapist_data_by_stages                                  #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def therapist_data_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            therapist_all_data = Therapist.objects.filter(stage_id=stage_id).order_by('name')
        else:
            therapist_all_data = Therapist.objects.all().order_by('name')
            stage_id=None
        stage_data = Stage.objects.all()[:5]
        paginator = Paginator(therapist_all_data, 100)
        page = request.GET.get('page')
        try:
            therapist_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            therapist_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            therapist_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/therapist_management/therapist_by_stages.html',
                      {'tab': 'data', 'crosal': 'therapistbymanage', 'therapist_all_data': therapist_all_data,
                       'stage_data': stage_data,'stage_no':stage_id})
    except:
        raise Http404

####################################################################
# Name - Therapist_listing                                         #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def therapist_listing(request):
    try:
        therapist_search_data = None
        try:
            therapist_search_data = request.GET.get('therapist_search_data')
        except:
            therapist_search_data = None
        assign_id = UserManagement.objects.get(user_id=request.user.id)
        state_data_obj = State.objects.all().order_by('name')
        if assign_id.is_caller is True:
            telecaller_id = request.user.id
            if therapist_search_data :
                therapist_obj = Therapist.objects.filter(current_user_id=telecaller_id, is_disable=False,name__icontains=therapist_search_data).order_by('name')
            else:
                therapist_obj = Therapist.objects.filter(current_user_id=telecaller_id,is_disable=False ).order_by('name')
        else:
            telecaller_id = 0
        if assign_id.is_reviewer is True:
            reviewer_id = request.user.id
            if therapist_search_data:
                therapist_obj = Therapist.objects.filter(current_user_id=reviewer_id, is_disable=False,name__icontains=therapist_search_data).order_by('name')
            else:
                therapist_obj = Therapist.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
        else:
            reviewer_id = 0

        if assign_id.is_publisher is True:
            publisher_id = request.user.id
            if therapist_search_data:
                therapist_obj = Therapist.objects.filter(current_user_id=publisher_id, is_disable=False,name__icontains=therapist_search_data).order_by('name')
            else:
                therapist_obj = Therapist.objects.filter(current_user_id=publisher_id,is_disable=False ).order_by('name')

        else:
            publisher_id = 0
        if telecaller_id or reviewer_id or publisher_id:
            # therapist_obj = Therapist.objects.filter(current_user_id=telecaller_id).order_by(
            #    'name')  # current_user_id=telecaller_id

            if len(therapist_obj) == 0:
                messages.error(request, "No Therapist found")

                return render(request, 'data_management/therapist_data/therapist_listing.html',
                              {'tab_listing': 'therapist_listing','therapist_search_data':therapist_search_data})
            elif len(therapist_obj) > 0:
                paginator = Paginator(therapist_obj, 50)
                page = request.GET.get('page')
                try:
                    therapist_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    therapist_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    therapist_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/therapist_data/therapist_listing.html',
                              dict(therapist=therapist_obj, tab_listing='therapist_listing', state_data_obj=state_data_obj,therapist_search_data=therapist_search_data))
        elif reviewer_id:
            therapist_obj = Therapist.objects.filter(current_user_id=reviewer_id,is_disable=False ).order_by('name')
            if len(therapist_obj) == 0:
                messages.error(request, "No Therapist found")
                return render(request, 'data_management/therapist_data/therapist_listing.html',
                              {'tab_listing': 'therapist_listing','therapist_search_data':therapist_search_data})
            elif len(therapist_obj) > 0:
                paginator = Paginator(therapist_obj, 50)
                page = request.GET.get('page')
                try:
                    therapist_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    therapist_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    therapist_obj = paginator.page(paginator.num_pages)
                return render(request, 'data_management/therapist_data/therapist_listing.html',
                              dict(therapist=therapist_obj, tab_listing='therapist_listing', state_data_obj=state_data_obj,therapist_search_data=therapist_search_data))
        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - add_therapist                                             #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def add_therapist(request):
    try:
        if request.method == "GET":
            country_obj = Country.objects.filter(delete=False)
            state_obj = State.objects.filter(delete=False)
            therapist_services = TherapistServices.objects.filter(delete=False)
            therapist_type = Therapist_type_master.objects.filter(delete=False)
            therapist_speciality = Therapist_speciality_master.objects.filter(delete=False)
            return render(request, 'data_management/therapist_data/add_therapist.html',
                          {'therapist_add': 'add', 'tab_listing': 'therapist-listing', 'country_obj': country_obj,
                           'state_obj': state_obj,
                           'therapist_services': therapist_services, 'therapist_type': therapist_type,
                           'therapist_speciality':therapist_speciality})
        elif request.method == "POST":
            name = request.POST['name'].strip()
            institution = request.POST['institution'].strip()
            qualification = request.POST['qualification'].strip()
            experience = request.POST['experience'].strip()
            services = request.POST.getlist('therapist_services')
            speciality= request.POST.getlist('therapist_speciality')
            type = request.POST.getlist('therapist_type')
            therapist_locality_coverage_from = request.POST['locality_idfrom'].strip()
            therapist_locality_coverage_to = request.POST['locality_idto'].strip()
            rates = request.POST['rates'].strip()
            address = request.POST['address'].strip()
            pincode = request.POST.get('apincode').strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip()
            location = request.POST['locality_id'].strip()
            email = request.POST['email'].strip()
            telephone = request.POST['telephone'].strip()
            alternate_telephone = request.POST['alternate_telephone'].strip()
            mobile = request.POST['mobile'].strip()
            remarks = request.POST['remarks'].strip()
            tempstr = ''
            cc = 0
            if services and services != []:
                for i in services:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            services = tempstr

            tempstr = ''
            cc = 0
            if speciality and speciality  != []:
                for i in speciality:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            speciality = tempstr

            tempstr = ''
            cc = 0
            if type and type != []:
                for i in type:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            type = tempstr

            therapist_obj = Therapist(name=name,address=address, pincode=pincode,
                                            country_id=country, state_id=state,
                                            city_id=city,
                                            locality_id=location,
                                            institution=institution,qualification=qualification, experience=experience,
                                            services=services, type=type,
                                            therapist_locality_coverage_from_id=therapist_locality_coverage_from,
                                            therapist_locality_coverage_to_id=therapist_locality_coverage_to,
                                            rates=rates, telephone=telephone,
                                            email=email,mobile=mobile,alternate_telephone=alternate_telephone,
                                            stage_id=2, current_user_id=request.user.id, free_text='',
                                            is_disable=False,remarks=remarks,speciality=speciality)

            therapist_obj.save()
            messages.success(request, "New Therapist added successfully")
            return HttpResponseRedirect(reverse('therapist-listing'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - therapist_listing_edit                                    #
# BY NISHANK                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def therapist_listing_edit(request, therapist_id=None):
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_therapist_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_therapist_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    country_obj = Country.objects.filter(delete=False)
    state_obj = State.objects.filter(delete=False)
    city = City.objects.filter(delete=False)
    locality = Locality.objects.filter(delete=False)
    therapist_type_master = Therapist_type_master.objects.filter(delete=False)
    therapist_services_master = TherapistServices.objects.filter(delete=False)
    therapist_speciality_master = Therapist_speciality_master.objects.filter(delete=False)
    therapist_services_list = None
    therapist_type_list = None
    therapist_speciality_list = None
    try:
        tab = request.GET.get('tab')
    except:
        tab = None
    try:
        if therapist_id is not None:
            therapist_obj = Therapist.objects.get(id=therapist_id)
            if(therapist_obj.current_user_id == request.user.id)or request.user.is_superuser:
                if tab == '1' and request.method == "GET":
                    therapist_obj = Therapist.objects.get(id=therapist_id)
                    if therapist_obj:
                        if therapist_obj.services :
                            therapist_services_list = therapist_obj.services.split(',')
                        else:
                            therapist_services_list = None

                        if therapist_obj.type :
                            therapist_type_list = therapist_obj.type.split(',')
                        else:
                            therapist_type_list = None

                        if therapist_obj.speciality :
                            therapist_speciality_list = therapist_obj.speciality.split(',')
                        else:
                            therapist_speciality_list = None
                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        return render(request, 'data_management/therapist_data/edit_therapist_data.html',
                                      {'tab_listing': 'therapist_listing', 'therapist_obj': therapist_obj,
                                       'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,
                                       'valid_choice': valid_choice, 'tab':'1',
                                        'therapist_services_list':therapist_services_list,
                                        'therapist_type_list':therapist_type_list,
                                        'therapist_services_master':therapist_services_master,
                                        'therapist_type_master':therapist_type_master,
                                        'therapist_speciality_master':therapist_speciality_master,
                                        'therapist_speciality_list':therapist_speciality_list,
                                        })
                    else:
                        messages.error(request,'Therapist could not be found')
                        return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=1')
                elif tab == '1' and request.method == "POST":
                    name = request.POST['name'].strip()
                    institution = request.POST['institution'].strip()
                    qualification = request.POST['qualification'].strip()
                    experience = request.POST['experience'].strip()
                    services = request.POST.getlist('therapist_services')
                    type = request.POST.getlist('therapist_type')
                    speciality = request.POST.getlist('therapist_speciality')
                    therapist_locality_coverage_from = request.POST['locality_idfrom'].strip()
                    therapist_locality_coverage_to = request.POST['locality_idto'].strip()
                    rates = request.POST['rates'].strip()
                    address = request.POST['address'].strip()
                    pincode = request.POST.get('apincode').strip()
                    country = request.POST['country_id'].strip()
                    state = request.POST['state_id'].strip()
                    city = request.POST['city_id'].strip()
                    location = request.POST['locality_id'].strip()
                    email = request.POST['email'].strip()
                    telephone = request.POST['telephone'].strip()
                    alternate_telephone = request.POST['alternate_telephone'].strip()
                    mobile = request.POST['mobile'].strip()
                    remarks = request.POST['remarks'].strip()

                    tempstr = ''
                    cc = 0
                    if services and services != []:
                        for i in services:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    services = tempstr

                    tempstr = ''
                    cc = 0
                    if speciality and speciality != []:
                        for i in speciality:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    speciality = tempstr


                    tempstr = ''
                    cc = 0
                    if type and type != [] :
                        for i in type:
                            cc += 1
                            if cc == 1:
                                tempstr = tempstr + i.strip()
                            else:
                                tempstr = tempstr + ',' + i.strip()
                    else:
                        tempstr = ''
                    type = tempstr


                    therapist_obj = Therapist.objects.get(pk=therapist_id)
                    if therapist_obj:
                        therapist_obj.name = name
                        therapist_obj.address = address
                        therapist_obj.pincode = pincode
                        therapist_obj.country_id = country
                        therapist_obj.state_id = state
                        therapist_obj.city_id = city
                        therapist_obj.locality_id = location
                        therapist_obj.rates = rates
                        therapist_obj.qualification = qualification
                        therapist_obj.institution = institution
                        therapist_obj.experience = experience
                        therapist_obj.services = services
                        therapist_obj.type = type
                        therapist_obj.rates = rates
                        therapist_obj.telephone = telephone
                        therapist_obj.alternate_telephone = alternate_telephone
                        therapist_obj.email = email
                        therapist_obj.mobile = mobile
                        therapist_obj.remarks = remarks
                        therapist_obj.speciality = speciality
                        if therapist_locality_coverage_to != 'msg':
                            therapist_obj.therapist_locality_coverage_to_id = therapist_locality_coverage_to
                        else:
                            therapist_obj.therapist_locality_coverage_to = None

                        if therapist_locality_coverage_from != 'msg':
                            therapist_obj.therapist_locality_coverage_from_id = therapist_locality_coverage_from
                        else:
                            therapist_obj.therapist_locality_coverage_from = None
                        therapist_obj.save()
                        messages.success(request, 'Therapist Data Successfully Updated')
                        return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=1')
                    else:
                        messages.error(request, 'Therapist Not Found in records')
                        return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=1')

                elif tab == '2' and request.method == "GET":
                    delete = None
                    package_id = None
                    therapist_obj = Therapist.objects.get(id=therapist_id)
                    try:
                        delete = request.GET.get('delete')
                        package_id = request.GET.get('package_id')

                    except:
                        delete = None
                        package_id = None

                    if delete and package_id and therapist_obj:
                        try:
                            packages = therapist_obj.packages
                            try:
                                del packages['package_list'][package_id]
                            except:
                                messages.success(request, "Package ID not found")
                                return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')
                        except:
                            packages = {'package_id': package_id, 'package_list': {}}
                            try:
                                del packages['package_list'][package_id]
                            except:
                                messages.success(request, "Package ID not found")
                                return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')

                        therapist_obj.packages = packages
                        therapist_obj.save()
                        messages.success(request, "Successfully Deleted Package")
                        return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')

                    elif therapist_obj:
                        try:
                            packages = therapist_obj.packages
                            if packages:
                                donothing = True
                            else:
                                packages = {'therapist_id': therapist_id, 'package_list': {}}
                        except:
                            packages = {'therapist_id': therapist_id, 'package_list': {}}

                        if len(packages['package_list'].keys()) < 1:
                            packages = {'therapist_id': therapist_id, 'package_list': {}}

                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        return render(request, 'data_management/therapist_data/edit_therapist_data.html',
                                      {'tab': '2', 'tab_listing': 'therapist_listing', 'therapist_obj': therapist_obj,
                                       'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,'valid_choice': valid_choice,
                                       'therapist_services_list': therapist_services_list,
                                       'therapist_type_list': therapist_type_list,
                                       'therapist_services_master': therapist_services_master,
                                       'therapist_type_master': therapist_type_master,
                                       'therapist_speciality_master ': therapist_speciality_master,
                                       'therapist_speciality_list': therapist_speciality_list,
                                       })
                    else:
                        messages.error(request, 'Something Bad Happened')
                        return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')

                if tab == '2' and request.method == "POST":
                    therapist_obj = Therapist.objects.get(id=therapist_id)
                    package_name_list = None
                    package_price_list = None
                    ackage_description_list = None
                    edit = None
                    package_name2 = None
                    package_price = None
                    package_description = None
                    package_id = None
                    try:
                        package_name_list = request.POST.getlist('package_name')
                        package_price_list = request.POST.getlist('package_price')
                        package_description_list = request.POST.getlist('package_description')
                    except:
                        package_name_list = None
                        package_price_list = None
                        package_description_list = None
                        package_id = None
                    try:
                        edit = request.POST.get('edit')
                        package_id = request.POST.get('package_id')
                        package_name2 = request.POST.get('package_name2')
                        package_price = request.POST.get('package_price')
                        package_description = request.POST.get('package_description')
                    except:
                        edit = None
                        package_name2 = None
                        package_price = None
                        package_description = None
                        package_id = None

                    if edit and package_id and therapist_obj:
                        try:
                            packages = therapist_obj.packages
                            if packages and package_id:
                                try:
                                    packages['package_list'][package_id]['package_name'] = package_name2
                                    packages['package_list'][package_id]['package_price'] = package_price
                                    packages['package_list'][package_id]['package_description'] = package_description
                                    therapist_obj.packages = packages
                                    therapist_obj.save()

                                    messages.success(request, "Therapist Package Successfully UPDATED")
                                    return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')
                                except:
                                    packages['package_list'].update({package_id: {'package_name': package_name2,
                                                                                  'package_price': package_price,
                                                                                  'package_description':
                                                                                      package_description}})
                                    therapist_obj.packages = packages
                                    therapist_obj.save()
                                    messages.success(request, "Therapist Plan Successfully ADDED")
                                    return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')
                            else:
                                if (not packages) and package_id:
                                    packages = {'therapist_id': therapist_id, 'package_list': {}}
                                    packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                                  'package_price':package_price,
                                                                                  'package_description':package_description}})
                                    therapist_obj.packages = packages
                                    therapist_obj.save()
                                    messages.success(request, "Therapist Plan Successfully ADDED")
                                    return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')
                                else:
                                    messages.error(request, "No Plan ID Received")
                                    return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')
                        except:

                            packages = {'therapist_id': therapist_id, 'package_list': {}}
                            packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                          'package_price':package_price,
                                                                          'package_description':package_description}})
                            therapist_obj.packages = packages
                            therapist_obj.save()
                            messages.success(request, "Therapist Package Successfully ADDED")
                            return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')

                    if package_name_list and package_price_list and package_description_list and therapist_obj:
                        try:
                            packages = therapist_obj.packages
                            if packages:
                                pass
                            else:
                                packages = {'therapist_id': therapist_id, 'package_list': {}}
                        except:
                            packages = {'therapist_id': therapist_id, 'package_list': {}}
                        if len(packages['package_list'].keys()) < 1:
                            packages = {'therapist_id': therapist_id, 'package_list': {}}

                        for i in range(0, len(package_name_list)):
                            package_id = str(uuid.uuid4())
                            packages['package_list'].update({package_id: {'package_name': package_name_list[i],
                                                                          'package_price': package_price_list[i],
                                                                          'package_description': package_description_list[i]}})
                        therapist_obj.packages = packages
                        therapist_obj.save()
                        messages.success(request, 'Test Details Successfully Updated')

                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True

                        return render(request, 'data_management/therapist_data/edit_therapist_data.html',
                                      {'tab': '2', 'tab_listing': 'therapist_listing', 'therapist_obj': therapist_obj,
                                       'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,'valid_choice': valid_choice,
                                       'therapist_services_list': therapist_services_list,
                                       'therapist_type_list': therapist_type_list,
                                       'therapist_services_master': therapist_services_master,
                                       'therapist_type_master': therapist_type_master,
                                       'therapist_speciality_master ': therapist_speciality_master,
                                       'therapist_speciality_list': therapist_speciality_list,
                                       })
                    else:
                        messages.error(request, 'Required data not received')
                        return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')

                if tab == '3' and request.method == "GET" and therapist_id:
                    therapist_obj = Therapist.objects.get(id=therapist_id)
                    try:
                        delog = request.GET.get('delog').strip()
                    except:
                        delog = None
                    try:
                        org_id = request.GET.get('org_id').strip()
                    except:
                        org_id = None

                    if therapist_obj and org_id and delog=='delog':
                        try:
                            attach_obj = Attach_therapist_organisation.objects.get(therapist_id=therapist_id,
                                                                                   organisation_id=org_id)
                        except:
                            attach_obj = None
                        if attach_obj:
                            attach_obj.delete()
                            messages.error(request, "ASSOCIATION SUCCESSFULLY DELETED")
                            return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")
                        else:
                            messages.error(request, "ASSOCIATION NOT FOUND- hence not deleted")
                            return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

                    elif therapist_obj:
                        attachlist = Attach_therapist_organisation.objects.filter(therapist_id=therapist_id)
                        if len(attachlist) < 1:
                            attachlist = None

                        user_is_publisher = None
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            user_is_publisher = True
                        department_obj = Department.objects.all().order_by('name')
                        return render(request, 'data_management/therapist_data/edit_therapist_data.html',
                                      {'tab': '3', 'tab_listing': 'therapist_listing', 'therapist_obj': therapist_obj,
                                       'country_obj': country_obj, 'state_obj': state_obj,
                                       'publisher_user_data': publisher_user_data,
                                       'reviewer_user_data': reviewer_user_data,
                                       'caller_user_data': caller_user_data,
                                       'user_is_publisher': user_is_publisher,
                                       'city': city, 'locality': locality,
                                       'valid_choice': valid_choice,
                                       'attachlist': attachlist,
                                       'therapist_services_list': therapist_services_list,
                                       'therapist_type_list': therapist_type_list,
                                       'therapist_services_master': therapist_services_master,
                                       'therapist_type_master': therapist_type_master,
                                       'department_obj':department_obj,
                                       'therapist_speciality_master ': therapist_speciality_master,
                                       'therapist_speciality_list': therapist_speciality_list,
                                       })
                    else:
                        messages.error(request, 'Required data not received')
                        return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

                if tab == '3' and request.method == "POST" and therapist_id:
                    therapist_obj = Therapist.objects.get(id=therapist_id)
                    if therapist_obj:
                        add = None
                        edit = None
                        try:
                            add = request.POST.get('add').strip()
                        except:
                            add = None
                        try:
                            edit = request.POST.get('edit').strip()
                        except:
                            edit = None

                        if add == "yes_please" :
                            try:
                                org_id = request.POST.get('diet_org_id').strip()
                            except:
                                org_id = None
                            try:
                                department_id = request.POST.get('department_id').strip()
                            except:
                                department_id = None

                            if org_id:
                                consultancy_fee = None
                                consultancy_fee = request.POST.get('consultancy_fee').strip()
                                attach_obj = None
                                attach_exists = False

                                try:
                                    attach_obj = Attach_therapist_organisation.objects.get(therapist_id=therapist_id,organisation_id=org_id)
                                except:
                                    attach_obj = None
                                if attach_obj:
                                    attach_obj.consultancy_fee = consultancy_fee
                                    attach_obj.org_department_id = department_id
                                    attach_obj.save()
                                    messages.error(request, "ASSOCIATION ALREADY EXISTS - CONSULTANCY FEE SUCCESSFULLY UPDFATED")
                                    return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")
                                else:
                                    attach_obj = Attach_therapist_organisation(therapist_id=therapist_id,organisation_id=org_id,consultancy_fee=consultancy_fee,org_department_id=department_id)
                                    attach_obj.save()
                                    messages.success(request, "ASSOCIATION CREATED")
                                    return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")
                            else:
                                messages.error(request, 'Organisation id not received')
                                return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

                        if edit == "edit" :
                            try:
                                org_id = request.POST.get('org_id').strip()
                            except:
                                org_id = None
                            try:
                                department_id = request.POST.get('department_id').strip()
                            except:
                                department_id = None

                            if org_id:
                                consultancy_fee = None
                                consultancy_fee = request.POST.get('consultancy_fee').strip()
                                attach_obj = None
                                attach_exists = False
                                try:
                                    attach_obj = Attach_therapist_organisation.objects.get(therapist_id=therapist_id,organisation_id=org_id)
                                except:
                                    attach_obj = None
                                if attach_obj:
                                    attach_obj.consultancy_fee = consultancy_fee
                                    attach_obj.org_department_id = department_id
                                    attach_obj.save()
                                    messages.success(request, "ASSOCIATION SUCCESSFULLY UPDFATED")
                                    return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")
                                else:
                                    attach_obj = Attach_therapist_organisation(therapist_id=therapist_id,organisation_id=org_id,consultancy_fee=consultancy_fee)
                                    attach_obj.save()
                                    messages.success(request, "ASSOCIATION NOT FOUND - NEW ASSOCIATION CREATED")
                                    return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

                            else:
                                messages.error(request, 'Organisation id not received')
                                return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

                        else:
                            messages.error(request, 'Add/ Edit action not specified')
                            return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

                    else:
                        messages.error(request, 'Therapist data not received')
                        return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

            else:
                messages.error(request, 'Access Denied')
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-therapist-listing'))
                return HttpResponseRedirect(reverse('therapist-listing'))

        else:
            messages.error(request,'Therapist Not Found')
            is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
            if len(is_publisher):
                return HttpResponseRedirect(reverse('publisher-therapist-listing'))
            return HttpResponseRedirect(reverse('therapist-listing'))

    except  Exception as e:
        #print e
        raise Http404

####################################################################
# Name - therapist_org_schedule                                    #
# NISHANK                                                          #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def therapist_org_schedule(request, therapist_id=None, organisation_id=None):
    try:
        therapist = Therapist.objects.get(id = therapist_id )
        organisation = OrganisationName.objects.get(id=organisation_id)
        disable_appointment = None
        try:
            asso_obj = Attach_therapist_organisation.objects.get(therapist_id =therapist_id,organisation_id=organisation_id)
        except:
            asso_obj = None
        if asso_obj:
            if request.method == "GET":
                try:
                    disable_appointment = request.GET.get('disable_appointment').strip()
                except:
                    disable_appointment = None

                if disable_appointment == 'yes':
                    asso_obj.by_appointment = False
                    asso_obj.save()
                try:
                    doctor_id = int(therapist_id)
                except:
                    raise Http404
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404

                #>> check = AttachWithDoctor.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                check = Attach_therapist_organisation.objects.filter(therapist_id=therapist_id, organisation_id=organisation_id)
                if len(check) == 1:
                    ## >> schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                    schedule_list = []
                    # This case add by jitendra dixit temporary use
                    by_check = None
                    schedule_id = None


                    schedule_list = asso_obj.schedule    #get the conetnt of json field
                    if schedule_list :
                        pass
                    else:
                        schedule_list = []

                    if type(schedule_list) is str:
                        schedule_list = json.loads(schedule_list)
                    #>> schedule_id = schedule_obj[0].id #Id of the whole scehdule table object saved in id column
                    asso_obj_id = asso_obj.id
                    by_check = asso_obj.by_appointment

                    return render(request, 'data_management/therapist_data/schedule_form.html',
                                  dict(schedule_list=schedule_list, therapist=therapist,
                                       asso_obj_id=asso_obj_id,day_list=day_list,organisation=organisation,
                                       tab_listing='therapist_listing',by_check=by_check))
                else:
                    raise Http404
            elif request.method == "POST":

                try:
                    therapist_id = int(therapist_id)
                except:
                    raise Http404
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404
                asso_obj = Attach_therapist_organisation.objects.filter(therapist_id =therapist_id,organisation_id=organisation_id)
                #>>schedule_obj = Schedule.objects.filter(doctor_id=doctor_id, organisation_id=organisation_id)
                #>>schedule_obj.update(by_appointment=False)
                asso_obj.by_appointment=False
                if len(asso_obj) == 1: #and len(schedule_obj) == 1:
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = asso_obj[0].schedule
                    if schedule_data == None:
                        schedule_data = []
                    try:
                        by_app = request.POST.getlist('by_app')
                    except:
                        by_app = []
                    if len(by_app) == 0:
                        by_app.append('0ff')

                    if by_app[0] == 'on':
                        asso_obj[0].by_appointment=True
                        asso_obj[0].save()
                        messages.success(request, 'Successfully  Set to By Apointment ')
                        return redirect(reverse('time-schedule-therapist', args=[therapist_id, organisation_id]))
                    else:
                        start_time = request.POST.getlist('start_time')

                        start_period = request.POST.getlist('start_period')
                        end_time = request.POST.getlist('end_time')
                        end_period = request.POST.getlist('end_period')
                        from_day = request.POST.get('from_day')
                        to_day = request.POST.get('to_day')
                        if start_time and start_period and end_period and end_time and from_day:
                            unique_id = str(uuid.uuid4())
                            for i in range(0, len(start_time)):
                                timing_dict = {}
                                timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                                timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                                timing_list.append(timing_dict)
                            add_schedule_dict['from_day'] = from_day
                            add_schedule_dict['to_day'] = to_day
                            add_schedule_dict['timing'] = timing_list
                            add_schedule_dict['id'] = unique_id
                            #while saving new schedule, the schedule is created as a dictionary which is then appended
                            #to the single listcontained in (schedule_data)
                            schedule_data.append(add_schedule_dict)
                            asso_obj[0].schedule=schedule_data
                            asso_obj[0].by_appointment=False
                            asso_obj[0].save()

                            messages.success(request, 'Successfully  Added Schedule')
                            return redirect(reverse('time-schedule-therapist', args=[therapist_id,organisation_id]))

                        else:
                            messages.error(request, 'Please Provide Timing details required field')
                            return redirect(reverse('time-schedule-therapist', args=[therapist_id, organisation_id]))
        else:
            messages.error(request, "ASSOCIATION OBJECT NOT FOUND")
            return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=3')
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - mark_as_complete_caller_therapist                         #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_caller_therapist(request):
    try:
        if request.method == 'POST':
            therapist_id = request.POST['therapist_id']

            reviewer_data_id = request.POST['reviewer_name']
            valid_choice_id = request.POST['validator_name']
            therapist_obj = Therapist.objects.get(id=therapist_id, current_user_id=request.user.id)
            if therapist_obj and reviewer_data_id and valid_choice_id:
                try:
                    therapist_obj.current_user = User.objects.get(id=reviewer_data_id)
                    therapist_obj.previous_user = request.user.id
                    therapist_obj.stage = Stage.objects.get(pk=3)
                    therapist_obj.free_text = ''
                    therapist_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    therapist_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('therapist-listing'))
                except:
                    raise Http404
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('therapist-listing'))
    except Exception as e:
        return HttpResponse("Something Bad Happened")

####################################################################
# Name - mark_as_complete_reviewer_therapist                       #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_reviewer_therapist(request):
    try:
        if request.method == 'POST':
            therapist_id = request.POST['therapist_id']
            publisher_data_id = request.POST['publisher_name']
            valid_choice_id = request.POST['validator_name']
            therapist_obj = Therapist.objects.get(id=therapist_id, current_user_id=request.user.id)
            if therapist_obj and publisher_data_id and valid_choice_id:
                try:
                    therapist_obj.current_user = User.objects.get(id=publisher_data_id)
                    therapist_obj.previous_user = request.user.id
                    therapist_obj.stage = Stage.objects.get(pk=4)
                    therapist_obj.free_text = ''
                    therapist_obj.resource_validate = ValidateByChoice(id=valid_choice_id)
                    therapist_obj.save()
                    messages.success(request, 'Successfully moved to next Stage')
                    return HttpResponseRedirect(reverse('therapist-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('therapist-listing'))
    except Exception as e:
        raise Http404
####################################################################
# Name - mark_as_reverse_caller_therapist                          #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_caller_therapist(request):
    try:
        if request.method == 'POST':
            therapist_id = request.POST['therapist_id']
            caller_data_id = request.POST['caller_name']
            free_text = request.POST['free_text']
            therapist_obj = Therapist.objects.get(id=therapist_id, current_user_id=request.user.id)
            if therapist_obj and caller_data_id and free_text:
                try:
                    therapist_obj.current_user = User.objects.get(id=caller_data_id)
                    therapist_obj.previous_user = request.user.id
                    therapist_obj.stage = Stage.objects.get(pk=2)
                    therapist_obj.free_text = free_text
                    therapist_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-therapist-listing'))
                    return HttpResponseRedirect(reverse('therapist-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
        if len(is_publisher):
            return HttpResponseRedirect(reverse('publisher-therapist-listing'))
        return HttpResponseRedirect(reverse('therapist-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_reverse_reviewer_therapist                         #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_reverse_reviewer_therapist(request):
    try:
        if request.method == 'POST':
            therapist_id = request.POST['therapist_id']
            reviewer_data_id = request.POST['reviewer_name']
            free_text = request.POST['free_text']
            therapist_obj = Therapist.objects.get(id=therapist_id, current_user_id=request.user.id)
            if therapist_obj and reviewer_data_id and free_text:
                try:
                    therapist_obj.current_user = User.objects.get(id=reviewer_data_id)
                    therapist_obj.previous_user = request.user.id
                    therapist_obj.stage = Stage.objects.get(pk=3)
                    therapist_obj.free_text = free_text
                    therapist_obj.save()
                    messages.success(request, 'Successfully moved to "Previous" Stage')
                    return HttpResponseRedirect(reverse('publisher-therapist-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('publisher-therapist-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name -mark_as_complete_publisher_therapist                       #
# Owner - Nishank Gupta                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def mark_as_complete_publisher_therapist(request):
    try:
        if request.method == 'POST':
            therapist_id = request.POST['therapist_id']
            therapist_obj = Therapist.objects.get(id=therapist_id, current_user_id=request.user.id)
            if therapist_obj:
                # find_doctor.current_user = reviewer_data_id
                # find_doctor.previous_user = request.user.id
                # find_doctor.stage = 3
                try:
                    therapist_obj.stage = Stage.objects.get(pk=5)
                    therapist_obj.save()
                    messages.success(request, 'Successfully Published To Live')
                    return HttpResponseRedirect(reverse('publisher-therapist-listing'))
                except:
                    pass
            else:
                messages.error(request, 'Select Reviewer and Validation Choice')
        else:
            messages.error(request, 'Other Method not allowed')
        return HttpResponseRedirect(reverse('publisher-therapist-listing'))
    except Exception as e:
        raise Http404

####################################################################
# Name - Therapist assignment                                      #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_therapist(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"
                nbslist = []
                nbflist = []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = Therapist.objects.filter(id=checkedValues[i]).update(
                            current_user_id=assign_user,
                            stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue
                my_send_mail(request, 'lab', nbslist, nbflist, 'Lab Assignment', 'Assigned')
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/therapist/assignment/users/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - disease_type_master_data                                  #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def disease_type_master_data(request):
    try:
        if request.method == "GET":
            disease_type_master = Disease_type_master.objects.all().order_by('name')

            paginator = Paginator(disease_type_master, 100)
            page = request.GET.get('page')
            try:
                disease_type_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                disease_type_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                disease_type_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/disease_type_master_data_management.html',
                          {'disease_type_master': disease_type_master})
    except Exception as e:
        raise Http404

###################################################################
#Name - disease_type_master_add_edit                              #
#Owner - Nishank                                                  #
###################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def disease_type_master_add_edit(request, disease_type_master_id=None):
    try:
        if disease_type_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Disease_type_master.objects.get(id=disease_type_master_id)

                return render(request, 'admin/master_data_management/disease_type_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = Disease_type_master.objects.get(id=disease_type_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Disease Type edited successfully")
                    return redirect('disease_type_master_data_page')
                else:
                    messages.error(request, "Please provide Disease Type name")
                    return redirect(reverse("disease_type_master_edit", args=[disease_type_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/disease_type_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Disease_type_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Disease Type edited successfully")
                    return redirect('disease_type_master_data_page')
                else:
                    messages.error(request, "Please provide Disease Type name")
                    return redirect(reverse("disease_type_master_add"))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - DELETEease                                                #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_disease(request,disease_id=None):
    import os
    from django.conf import settings
    try:
        if request.method == "POST":
            messages.error("Method not allowed")
            if request.user.is_superuser:
                return HttpResponseRedirect(reverse('disease-assignment'))
            User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
            if (len(User_management_obj)):
                return HttpResponseRedirect(reverse('publisher-disease-listing'))
            return redirect(reverse('disease-listing'))
        elif request.method == "GET":
            if disease_id :
                disease_obj = get_object_or_404(Disease,id=disease_id)
                try:
                    file =  disease_obj.disease_docx_file.name
                    file_deleted = file + "_DELETED"
                    back_to = os.getcwd()
                    os.chdir(settings.DOCX_PATH_DISEASE)
                    os.rename(file,file_deleted)
                    image = settings.DOCX_PATH_DISEASE +'/' +disease_obj.disease_image_file_name
                    image_deleted = settings.DOCX_PATH_DISEASE +'/' + disease_obj.disease_image_file_name + "_DELETED"
                    os.rename(image, image_deleted)
                    os.chdir(back_to)
                    #print("Files Removed!")
                except Exception as e:
                    print e
                    #print("Failed!")

                disease_obj.delete()
                messages.success(request,"Successfully Deleted Disease Article")
                if request.user.is_superuser:
                    return HttpResponseRedirect(reverse('disease-assignment'))

                User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if (len(User_management_obj)):
                    return HttpResponseRedirect(reverse('publisher-disease-listing'))
                return redirect(reverse('disease-listing'))

            else:
                messages.error("No Disease ID provided")
                if request.user.is_superuser:
                    return HttpResponseRedirect(reverse('disease-assignment'))

                User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if (len(User_management_obj)):
                    return HttpResponseRedirect(reverse('publisher-disease-listing'))
                return redirect(reverse('disease-listing'))
    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - DELETE Symptoms                                           #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_symptoms(request,symptoms_id=None):
    try:
        if request.method == "POST":
            messages.error("Method not allowed")
            if request.user.is_superuser:
                return HttpResponseRedirect(reverse('symptoms-assignment'))
            User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
            if (len(User_management_obj)):
                return HttpResponseRedirect(reverse('publisher-symptoms-listing'))
            return redirect(reverse('symptoms-listing'))
        elif request.method == "GET":
            if symptoms_id :
                symptoms_obj = get_object_or_404(Symptoms,id=symptoms_id)
                try:
                    file =  symptoms_obj.symptoms_docx_file.name
                    file_deleted = file + "_DELETED"
                    back_to = os.getcwd()
                    os.chdir(settings.DOCX_PATH_SYMPTOMS)
                    os.rename(file,file_deleted)
                    image = settings.DOCX_PATH_SYMPTOMS +'/' +symptoms_obj.symptoms_image_file_name
                    image_deleted = settings.DOCX_PATH_SYMPTOMS +'/' + symptoms_obj.symptoms_image_file_name + "_DELETED"
                    os.rename(image, image_deleted)
                    os.chdir(back_to)
                    #print("Files Removed!")
                except Exception as e:
                    print e
                    #print("Failed!")

                symptoms_obj.delete()
                messages.success(request,"Successfully Deleted Symptoms Article")
                if request.user.is_superuser:
                    return HttpResponseRedirect(reverse('symptoms-assignment'))

                User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if (len(User_management_obj)):
                    return HttpResponseRedirect(reverse('publisher-symptoms-listing'))
                return redirect(reverse('symptoms-listing'))

            else:
                messages.error("No Symptoms ID provided")
                if request.user.is_superuser:
                    return HttpResponseRedirect(reverse('symptoms-assignment'))

                User_management_obj = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if (len(User_management_obj)):
                    return HttpResponseRedirect(reverse('publisher-symptoms-listing'))
                return redirect(reverse('symptoms-listing'))

    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - publish_doctor                                            #
# Owner - Nishank                                                  #
####################################################################
from data_publisher import data_publisher, data_un_publisher
@login_required(login_url='/')
@csrf_exempt
@require_POST
def publish_newsfeed(request):
    response_data = {
        "Message": "Internal Server Error"
    }
    try:
        if request.method == "POST":
            type = request.POST.get('type')
            data_type = request.POST.get('data_type')
            checked_values = request.POST.get('checkedValues')
            if data_type == "news_feed" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"

            elif data_type == "organisation" and checked_values:
                if type == "publish":
                    checked_values = checked_values.split(',')
                    result = data_publisher(data_type, checked_values)
                    if result:
                        response_data['Message'] = "Data has been sucessfully published"
                elif type == "un-publish":
                    checked_values = checked_values.split(',')
                    result = data_un_publisher(data_type, checked_values)
                    if result:
                        response_data['Message'] = "Data has been sucessfully un-published"
    except Exception as e:
        raise Http404
    response_data = json.dumps(response_data)
    return HttpResponse(response_data)

####################################################################
# Name - kurables_type_master_data                                 #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def kurables_type_master_data(request):
    try:
        if request.method == "GET":
            kurables_type_master = Kurable_subtype_master.objects.all().order_by('name')
            paginator = Paginator(kurables_type_master, 100)
            page = request.GET.get('page')
            try:
                kurables_type_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                kurables_type_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                kurables_type_master = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/kurables_type_master_data_management.html',
                          {'kurables_type_master': kurables_type_master})
    except Exception as e:
        raise Http404

####################################################################
# Name - kurables_type_master_add_edit                             #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def kurables_type_master_add_edit(request, kurables_type_master_id=None):
    try:

        if kurables_type_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Kurable_subtype_master.objects.get(id=kurables_type_master_id)
                return render(request, 'admin/master_data_management/kurables_type_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = Kurable_subtype_master.objects.get(id=kurables_type_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Kurable Sub Type edited successfully")
                    return redirect('kurables_type_master_data_page')
                else:
                    messages.error(request, "Please provide Kurable Sub Type name")
                    return redirect(reverse("kurables_type_master_edit", args=[kurables_type_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/kurables_type_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object =  Kurable_subtype_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Kurable Sub Type edited successfully")
                    return redirect('kurables_type_master_data_page')
                else:
                    messages.error(request, "Please provide kurables Type name")
                    return redirect(reverse("kurables_type_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - healthoholic_type_master_data                             #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def healthoholic_type_master_data(request):
    try:
        if request.method == "GET":
            healthoholic_type_master = Healthoholic_subtype_master.objects.all().order_by('name')
            paginator = Paginator(healthoholic_type_master, 100)
            page = request.GET.get('page')
            try:
                healthoholic_type_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                healthoholic_type_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                healthoholic_type_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/healthoholic_type_master_data_management.html',
                          {'healthoholic_type_master': healthoholic_type_master})
    except Exception as e:
        raise Http404

####################################################################
# Name - healthoholic_type_master_add_edit                         #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def healthoholic_type_master_add_edit(request, healthoholic_type_master_id=None):
    try:
        if healthoholic_type_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Healthoholic_subtype_master.objects.get(id=healthoholic_type_master_id)

                return render(request, 'admin/master_data_management/healthoholic_type_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = Healthoholic_subtype_master.objects.get(id=healthoholic_type_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Kurable Sub Type edited successfully")
                    return redirect('healthoholic_type_master_data_page')
                else:
                    messages.error(request, "Please provide Kurable Sub Type name")
                    return redirect(reverse("healthoholic_type_master_edit", args=[healthoholic_type_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/healthoholic_type_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object =  Healthoholic_subtype_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Healthoholic Sub Type edited successfully")
                    return redirect('healthoholic_type_master_data_page')
                else:
                    messages.error(request, "Please provide Healthoholic Type name")
                    return redirect(reverse("healthoholic_type_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - caresidense_type_master_data                              #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def caresidense_type_master_data(request):
    try:
        if request.method == "GET":
            caresidense_type_master = CaResidense_subtype_master.objects.all().order_by('name')
            paginator = Paginator(caresidense_type_master, 100)
            page = request.GET.get('page')
            try:
                caresidense_type_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                caresidense_type_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                caresidense_type_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/caresidense_type_master_data_management.html',
                          {'caresidense_type_master': caresidense_type_master})
    except Exception as e:
        raise Http404

####################################################################
# Name - caresidense_type_master_add_edit                          #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def caresidense_type_master_add_edit(request, caresidense_type_master_id=None):
    try:
        if caresidense_type_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = CaResidense_subtype_master.objects.get(id=caresidense_type_master_id)

                return render(request, 'admin/master_data_management/caresidense_type_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = CaResidense_subtype_master.objects.get(id=caresidense_type_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Kurable Sub Type edited successfully")
                    return redirect('caresidense_type_master_data_page')
                else:
                    messages.error(request, "Please provide Kurable Sub Type name")
                    return redirect(reverse("caresidense_type_master_edit", args=[caresidense_type_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/caresidense_type_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object =  CaResidense_subtype_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New CaResidense Sub Type Added successfully")
                    return redirect('caresidense_type_master_data_page')
                else:
                    messages.error(request, "Please provide CaResidense Type name")
                    return redirect(reverse("caresidense_type_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - doc_care_services_master_data                             #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def doc_care_services_master_data(request):
    try:
        if request.method == "GET":
            doc_care_services_master = Doc_Care_services_master.objects.all().order_by('name')
            paginator = Paginator(doc_care_services_master, 100)
            page = request.GET.get('page')
            try:
                doc_care_services_master = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doc_care_services_master = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doc_care_services_master = paginator.page(paginator.num_pages)
            return render(request, 'admin/master_data_management/doc_care_services_master_data_management.html',
                          {'doc_care_services_master': doc_care_services_master})
    except Exception as e:
        raise Http404

####################################################################
# Name - doc_care_services_master_add_edit                         #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def doc_care_services_master_add_edit(request, doc_care_services_master_id=None):
    try:
        if doc_care_services_master_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                type_obj = Doc_Care_services_master.objects.get(id=doc_care_services_master_id)
                return render(request, 'admin/master_data_management/doc_care_services_master_add_edit.html',
                              {'type_obj': type_obj, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    type_obj = Doc_Care_services_master.objects.get(id=doc_care_services_master_id)
                    type_obj.name = name
                    if status == '11':
                        type_obj.delete = False
                    else:
                        type_obj.delete = True
                    type_obj.save()
                    messages.success(request, "Doctor Home Care Service edited successfully")
                    return redirect('doc_care_services_master_data_page')
                else:
                    messages.error(request, "Please provide Doctor Home Care Service name")
                    return redirect(reverse("doc_care_services_master_edit", args=[doc_care_services_master_id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/doc_care_services_master_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['name'].strip()
                if 'active' in request.POST:
                    status = request.POST['active'].strip()
                else:
                    status = 'not found'
                if name:
                    new_object = Doc_Care_services_master(name=name)
                    if status == '11':
                        new_object.delete = False
                    else:
                        new_object.delete = True
                    new_object.save()
                    messages.success(request, "New Doctor Home Care Servicem Added successfully")
                    return redirect('doc_care_services_master_data_page')
                else:
                    messages.error(request, "Please provide CaResidense Type name")
                    return redirect(reverse("doc_care_services_master_add"))
    except Exception as e:
        raise Http404

####################################################################
# Name - facility_data                                             #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def facility_data(request):
    try:
        if request.method == "GET":
            facility_obj = Facility.objects.all().order_by('name')
            return render(request, 'admin/master_data_management/facility_data_management.html',
                          {'facility_obj': facility_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - facility_add_edit                                         #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def facility_add_edit(request, facility_id=None):
    try:
        if facility_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                facility = Facility.objects.get(id=facility_id)
                return render(request, 'admin/master_data_management/facility_add_edit.html',
                              {'facility': facility, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['facility_name'].strip()
                facility = Facility.objects.get(id=facility_id)
                if name:
                    facility.name = name
                    facility.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='facility',
                    #                                               id=facility.id, edit='Yes')
                    messages.success(request, "facility Edited successfully")
                    return redirect('facility_data_page')
                else:
                    messages.error(request, "Please provide facility name ")
                    return redirect(reverse("facility_edit", args=[facility.id, ]))

        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/facility_add_edit.html',
                              {'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['facility_name'].strip()
                if name:
                    facility_list = Facility.objects.all()
                    for i in facility_list:
                        if i.name.lower() == name.lower():
                            messages.error(request, "Facility name already exists ")
                            return redirect("facility_add")
                    facility = Facility(name=name)
                    facility.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='facility',
                    #                                               id=facility.id, edit=None)

                    messages.success(request, "New facility add successfully")
                    return redirect('facility_data_page')
                else:
                    messages.error(request, "Please provide facility name ")
                    return redirect("facility_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - department_data                                           #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def department_data(request):
    try:
        if request.method == "GET":
            department_obj = Department.objects.all().order_by('name')
            return render(request, 'admin/master_data_management/department_data_management.html',
                          {'department_obj': department_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - department_add_edit                                       #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def department_add_edit(request, department_id=None):
    try:
        if department_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                department = Department.objects.get(id=department_id)
                return render(request, 'admin/master_data_management/department_add_edit.html',
                              {'department': department, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['department_name'].strip()
                department = Department.objects.get(id=department_id)
                if name:
                    department.name = name
                    department.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='department',
                    #                                               id=department.id, edit='Yes')
                    messages.success(request, "department Edited successfully")
                    return redirect('department_data_page')
                else:
                    messages.error(request, "Please provide department name ")
                    return redirect(reverse("department_edit", args=[department.id, ]))

        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/department_add_edit.html',
                              {'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['department_name'].strip()
                if name:
                    department_list = Department.objects.all()
                    for i in department_list:
                        if i.name.lower() == name.lower():
                            messages.error(request, "Department name already exists ")
                            return redirect("department_add")
                    department = Department(name=name)
                    department.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='department',
                    #                                               id=department.id, edit=None)

                    messages.success(request, "New department add successfully")
                    return redirect('department_data_page')
                else:
                    messages.error(request, "Please provide department name ")
                    return redirect("department_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - Publish Locality master                                   #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def publish_locality_master(request):
    try:
        Locality_obj = Locality.objects.filter(delete=False)
        for locality in Locality_obj:
            data = {}
            data['id'] = locality.id
            data['name'] = locality.name
            data['name'].strip()
            data['city_id'] = locality.city_id
            response = elasticsearch_client.index_data('master', 'locality', locality.id, data)
            if response:
                pass
            else:
                messages.error(request, "Error while Publishing Locality master")
                return HttpResponseRedirect(reverse('users-dashboard'))
        messages.success(request,'SUCCESSFULLY Published Locality master' )
        return HttpResponseRedirect(reverse('users-dashboard'))
    except Exception as e:
        #print e
        messages.error(request, "Error while Publishing Locality master")
        return HttpResponseRedirect(reverse('users-dashboard'))




# LIVE DOCTOR VIEWS  : BY NISHANK
#------------------------------------

####################################################################
# Name - live_doctor_type                                          #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
# Disabled by Nishank to enable the use of single view and single template to server both admin and non admion users
# @user_passes_test(lambda u: u.is_superuser)
@require_GET
def live_doctor_type(request):
    return render(request, 'data_management/live_doctor_data/live_doctor_type.html',
                  {'tab': 'live_doctor_listing'})

####################################################################
# Name - live_doctor_new_registrations_listing                     #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def live_doctor_new_registrations_listing(request):
    try:
        #new_doc_regis = Live_Doctor.objects.filter(activate=False,edit=True,is_disable=False,current_user_id = str(request.user.id)).order_by('-createdAt')
        new_doc_regis = Live_Doctor.objects.filter(is_disable=False,current_user_id = str(request.user.id)).order_by('-createdAt')
        user_data = User.objects.all()
        return render(request, 'data_management/live_doctor_data/live_doctor_new_registrations_listing.html',
                      {'tab_listing': 'live_doctor_listing',
                       'new_doc_regis':new_doc_regis,
                       'user_data':user_data})

    except Exception as e:
        #print e, '   ---!!!!!-------------'
        raise Http404

####################################################################
# Name - live_doctor_listing_edit                                  #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def live_doctor_listing_edit(request, doctor_id=None):

    try:
        tab = None
        try:
            tab = request.GET['tab']
        except:
            tab = None
        if tab and doctor_id is not None:
            year_list =["1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982",
                         "1983","1984","1985","1986","1987","1988","1989","1990","1991","1992","1993","1994","1995",
                         "1996","1997","1998","1999","2000", "2001", "2002","2003","2004","2005","2006","2007","2008",
                         "2009","2010","2011","2012","2013","2014","2015","2016","2017"]

            live_doctor = Live_Doctor.objects.get(id=doctor_id)
            live_doc_exp_list = Live_Doctor_Experience.objects.filter(doctor_id=doctor_id)
            live_doc_rewardrecog_list = Live_Doctor_Rewardrecog.objects.filter(doctor_id=doctor_id)
            live_doc_memb_list = Live_Doctor_Membership.objects.filter(doctor_id=doctor_id)
            live_doc_education_list = Live_Doctor_Education.objects.filter(doctor_id=doctor_id)
            live_doc_manage_account = Live_Doctor_Manage_Account.objects.filter(livedoctor_id=doctor_id)
            category_obj = Category.objects.filter(delete=False).order_by('name')
            zone_obj = Zone.objects.filter(delete=False)
            privateimages = []
            try:
                images = live_doctor.privateimagepath
                privateimages = images.split(',')
            except:
                privateimages = []
            try:
                current_zone_id = live_doctor.zone_id
                dummy = int(current_zone_id)
                current_zone = live_doctor.zone
                zone_based_locations = ZoneLocation.objects.filter(delete=False, zone_id=current_zone_id )
            except:
                current_zone = None
                zone_based_locations = None
            try:
                current_zone_location_id = live_doctor.zone_location_id
                dummy = int(current_zone_location_id)
                current_zone_location = live_doctor.zone_location
            except:
                current_zone_location = None

            if live_doctor.category and live_doctor.category != '' and live_doctor.category != [] and live_doctor.category :
                cat = live_doctor.category       #curent_cat = Category.objects.get(name=cat)
                curent_cat = cat

                speciality = live_doctor.speciality
                current_specialities = []
                temp = []
                speciality_all = Speciality.objects.filter(delete=False)
                temp_list = []
                if speciality and speciality != [] :
                    for obj in speciality:
                        temp_list.append(obj['id'])
                if temp_list != []:
                    for i in temp_list:
                        for j in speciality_all:
                            if int(i) == j.id and j.category_id == curent_cat :
                                temp.append(j)
                    current_specialities = temp
                else:
                    current_specialities = []
                speciality = Speciality.objects.filter(category_id=curent_cat, delete=False)


                New_SPE_Final_in_association = Doc_Cat_SO_Speciality_Association_Final.objects.get(category=live_doctor.category ).Specialities
                if New_SPE_Final_in_association != '' and New_SPE_Final_in_association != [] and New_SPE_Final_in_association != ' ':
                    New_SPE_Final_in_association = New_SPE_Final_in_association.strip().split(',')
                    New_SPE_Final_in_association = [Doctor_Speciality_New.objects.get(id= int(iiids)) for iiids in New_SPE_Final_in_association if iiids != '']
                else:
                    New_SPE_Final_in_association = []
                Current_New_SPE_Final_in_live_doctor = live_doctor.new_speciality_final
                temp_list = []
                temp_list5 = []
                if Current_New_SPE_Final_in_live_doctor and Current_New_SPE_Final_in_live_doctor != []:
                    for obj in Current_New_SPE_Final_in_live_doctor:
                        temp_list.append(obj['id'])
                if temp_list != []:
                    for iids in temp_list:
                        #j= Doctor_Speciality_New.objects.get(id= int(iids))
                        temp_list5.append(int(iids))
                    Current_New_SPE_Final_in_live_doctor = temp_list5
                else:
                    Current_New_SPE_Final_in_live_doctor = []



                ser_off = live_doctor.serviceOffered
                current_seroff = []
                temp = []
                seroff_all = Service_Offred.objects.filter(delete=False)
                temp_list = []
                if ser_off and ser_off != []:
                    for obj in ser_off:
                        temp_list.append(obj['id'])

                if temp_list != []:
                    for i in temp_list:
                        for j in seroff_all:
                            if int(i) == j.id and j.delete == False and j.category_id == curent_cat:
                                temp.append(j)
                    current_seroff = temp
                else:
                    current_seroff = []
                serviceOffered = Service_Offred.objects.filter(category_id=curent_cat, delete=False)

                New_SO_Final_in_association = Doc_Cat_SO_Speciality_Association_Final.objects.get(category=live_doctor.category).ServiceOffered
                if New_SO_Final_in_association != '' and New_SO_Final_in_association != [] and New_SO_Final_in_association != ' ':
                    New_SO_Final_in_association = New_SO_Final_in_association.strip().split(',')
                    New_SO_Final_in_association = [Doctor_ServiceOffered_New.objects.get(id=int(iiids)) for iiids in New_SO_Final_in_association if iiids != '']
                else:
                    New_SO_Final_in_association = []
                Current_New_SO_Final_in_live_doctor = live_doctor.new_service_offered_final
                temp_list = []
                temp_list5 = []
                if Current_New_SO_Final_in_live_doctor and Current_New_SO_Final_in_live_doctor != []:
                    for obj in Current_New_SO_Final_in_live_doctor:
                        temp_list.append(obj['id'])
                if temp_list != []:
                    for iids in temp_list:
                        #j = Doctor_ServiceOffered_New.objects.get(id=int(iids))
                        temp_list5.append(int(iids))
                    Current_New_SO_Final_in_live_doctor = temp_list5
                else:
                    Current_New_SO_Final_in_live_doctor = []

            else:
                cat = ''
                curent_cat = None
                current_specialities = []
                current_seroff = []
                speciality = []
                serviceOffered = []
                New_SPE_Final_in_association = []
                Current_New_SPE_Final_in_live_doctor = []
                New_SO_Final_in_association = []
                Current_New_SO_Final_in_live_doctor = []

            if UserManagement.objects.filter(user_id=request.user.id, is_caller=True):
                # user_data = UserManagement.audioobjects.filter(is_reviewer=True, is_live_doctor_reviewer=True).values('user_id')
                user_data = UserManagement.objects.filter(is_reviewer=True, is_doctor_reviewer=True).values(
                    'user_id')
                user_publisher_data = []
            elif UserManagement.objects.filter(user_id=request.user.id, is_reviewer=True):
                user_data = UserManagement.objects.filter(is_caller=True, is_doctor_caller=True).values('user_id')
                # user_data = UserManagement.objects.filter(is_caller=True, is_doctor_caller=True).values('user_id')
                user_publisher_data = UserManagement.objects.filter(is_publisher=True).values('user_id')
            else:
                user_data = []
                user_publisher_data = []
            reviewer_user_data = User.objects.filter(id__in=user_data, is_active=True)
            publisher_user_data = User.objects.filter(id__in=user_publisher_data, is_active=True)
            valid_choice = ValidateByChoice.objects.all()
            user_data_complete = UserManagement.objects.all()
            emer_localities_list = []
            try:
                asso_obj = Live_Doctor_Associated_Data.objects.get(doctor_id=doctor_id)
                if asso_obj.localities and asso_obj.localities != '' and asso_obj.localities != []:
                    emer_localities_list = asso_obj.localities.split(',')
            except:
                emer_localities_list = []
                asso_obj = None

            if asso_obj:
                qualification = asso_obj.qualification_data
                talk_to_doc = asso_obj.talk_to_doc
                talk_fee = asso_obj.talk_fee
                audio = asso_obj.audio
                video = asso_obj.video
                chat = asso_obj.chat
                totalexperience = asso_obj.totalexperience
                consultancy_schedule = asso_obj.consultancy_schedule
                if consultancy_schedule != None and consultancy_schedule != [] and consultancy_schedule != {}:
                    pass
                else:
                    consultancy_schedule = None

            else:
                qualification = None
                talk_to_doc = False
                talk_fee = 0
                totalexperience = None
                audio = None
                video = None
                chat = None
                consultancy_schedule = None

            country_obj = Country.objects.filter(delete=False)
            state_obj = State.objects.filter(delete=False)
            city = City.objects.filter(delete=False)
            locality = Locality.objects.filter(delete=False)
            global hostname
            global port
            hostport = hostname + port


            gallery_image_obj_list = None
            try:
                gallery_image_obj_list = Live_Doctor_Imagegallery.objects.filter(doctor_id=int(doctor_id))
                if len(gallery_image_obj_list) != 0 :
                    gallery_image_obj_list = gallery_image_obj_list
                else:
                    gallery_image_obj_list = None
            except:
                gallery_image_obj_list = None


            all_departments = Department.objects.all().order_by('name')
            sche_dep = Live_Doctor_Commonworkschedule.objects.filter(doctor_id= doctor_id)
            org_with_current_dep = {}
            for schdeppt in sche_dep :
                if schdeppt.department != None and schdeppt.department != '' and schdeppt.department != ' ':
                    current_departments = schdeppt.department.split(',')
                    org_with_current_dep.update({schdeppt.clinic_id:current_departments})
                else:
                    pass


            # -----------------SCHEDULE DEFAULT FOR ALL TABS STARTS HERE---
            # -------------------------------------------------------------

            #organisation_all = OrganisationName.objects.filter(is_disable=False,stage_id__gte=4).order_by('name')
            country_obj = Country.objects.filter(delete=False)
            state_obj = State.objects.filter(delete=False)
            locality = Locality.objects.filter(delete=False)

            appointment_minutes = ['5', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55']

            list_of_schedules = Live_Doctor_Commonworkschedule.objects.filter(Q(doctor_id=doctor_id),~Q(status='delete'))
            mylist = []
            for i in list_of_schedules :
                str = i.time
                schclinic= OrganisationName.objects.get(id = i.clinic_id)
                clinic_details = schclinic.name+' '+schclinic.street+' '+schclinic.locality.name
                if i.time_type == 'single' or i.time_type == 'single_double':
                    temp = json.loads(str)
                    temp.update({'time_type':i.time_type})
                    temp.update({'clinic_id':i.clinic_id})
                    temp.update({'clinic_details':clinic_details})
                    temp.update({'schedule_id':i.id})
                    temp.update({'consultingCharge':i.consultingCharge})
                    temp.update({'appointmentMinute':i.appointmentMinute})
                    temp.update({'did':i.did})
                    temp.update({'extension':i.extension})

                    mylist.append(temp)
                    #print mylist

                if i.time_type == 'multi_double':
                    str2 = i.time
                    temp2 = json.loads(str2)
                    ss_template = {
                        'time_type': i.time_type,
                        'clinic_id': i.clinic_id,
                        'clinic_details':clinic_details,
                        'schedule_id': i.id,
                        'consultingCharge': i.consultingCharge,
                        'appointmentMinute': i.appointmentMinute,
                        'did':i.did,
                        'extension':i.extension,
                        'Mon': {
                            u'value': False,
                            u'name': u'Mon',
                            u'session2': {
                                u'to': u'',
                                u'from': u''
                            },
                            u'session1': {
                                u'to': u'',
                                u'from': u''
                            }
                        },
                         'Tue': {
                            u'value': False,
                            u'name': u'Tue',
                            u'session2': {
                                u'to': u'',
                                u'from': u''
                            },
                            u'session1': {
                                u'to': u'',
                                u'from': u''
                            }
                        },
                        'Wed':{
                            u'value': False,
                            u'name': u'Wed',
                            u'session2': {
                                u'to': u'',
                                u'from': u''
                            },
                            u'session1': {
                                u'to': u'',
                                u'from': u''
                            }
                        },
                        'Thu':{
                            u'value': False,
                            u'name': u'Thu',
                            u'session2': {
                                u'to': u'',
                                u'from': u''
                            },
                            u'session1': {
                                u'to': u'',
                                u'from': u''
                            }
                        },
                        'Fri':{
                            u'value': False,
                            u'name': u'Fri',
                            u'session2': {
                                u'to': u'',
                                u'from': u''
                            },
                            u'session1': {
                                u'to': u'',
                                u'from': u''
                            }
                        },
                        'Sat':{
                            u'value': False,
                            u'name': u'Sat',
                            u'session2': {
                                u'to': u'',
                                u'from': u''
                            },
                            u'session1': {
                                u'to': u'',
                                u'from': u''
                            }
                        },
                        'Sun':{
                            u'value': False,
                            u'name': u'Sun',
                            u'session2': {
                                u'to': u'',
                                u'from': u''
                            },
                            u'session1': {
                                u'to': u'',
                                u'from': u''
                            }
                        }
                    }

                    for jj in temp2 :
                        if jj['name'] == 'Mon':
                            ss_template['Mon']['value'] = jj['value']
                            ss_template['Mon']['session1']['from'] = jj['session1']['from']
                            ss_template['Mon']['session1']['to'] = jj['session1']['to']
                            ss_template['Mon']['session2']['from'] = jj['session2']['from']
                            ss_template['Mon']['session2']['to'] = jj['session2']['to']
                        if jj['name'] == 'Tue':
                            ss_template['Tue']['value'] = jj['value']
                            ss_template['Tue']['session1']['from'] = jj['session1']['from']
                            ss_template['Tue']['session1']['to'] = jj['session1']['to']
                            ss_template['Tue']['session2']['from'] = jj['session2']['from']
                            ss_template['Tue']['session2']['to'] = jj['session2']['to']
                        if jj['name'] == 'Wed':
                            ss_template['Wed']['value'] = jj['value']
                            ss_template['Wed']['session1']['from'] = jj['session1']['from']
                            ss_template['Wed']['session1']['to'] = jj['session1']['to']
                            ss_template['Wed']['session2']['from'] = jj['session2']['from']
                            ss_template['Wed']['session2']['to'] = jj['session2']['to']
                        if jj['name'] == 'Thu':
                            ss_template['Thu']['value'] = jj['value']
                            ss_template['Thu']['session1']['from'] = jj['session1']['from']
                            ss_template['Thu']['session1']['to'] = jj['session1']['to']
                            ss_template['Thu']['session2']['from'] = jj['session2']['from']
                            ss_template['Thu']['session2']['to'] = jj['session2']['to']
                        if jj['name'] == 'Fri':
                            ss_template['Fri']['value'] = jj['value']
                            ss_template['Fri']['session1']['from'] = jj['session1']['from']
                            ss_template['Fri']['session1']['to'] = jj['session1']['to']
                            ss_template['Fri']['session2']['from'] = jj['session2']['from']
                            ss_template['Fri']['session2']['to'] = jj['session2']['to']
                        if jj['name'] == 'Sat':
                            ss_template['Sat']['value'] = jj['value']
                            ss_template['Sat']['session1']['from'] = jj['session1']['from']
                            ss_template['Sat']['session1']['to'] = jj['session1']['to']
                            ss_template['Sat']['session2']['from'] = jj['session2']['from']
                            ss_template['Sat']['session2']['to'] = jj['session2']['to']
                        if jj['name'] == 'Sun':
                            ss_template['Sun']['value'] = jj['value']
                            ss_template['Sun']['session1']['from'] = jj['session1']['from']
                            ss_template['Sun']['session1']['to'] = jj['session1']['to']
                            ss_template['Sun']['session2']['from'] = jj['session2']['from']
                            ss_template['Sun']['session2']['to'] = jj['session2']['to']
                    #print ":::::::",ss_template
                    mylist.append(ss_template)



            list_of_schedules  =   mylist
            # -----------------SCHEDULE DEFAULT FOR ALL TABS ENDS HERE------
            # -----------------VERIFIED FIELDS------------------------------

            fields_json = live_doctor.verified_fields

            full_list = []
            verified_list = []
            try:
                for i in fields_json:
                    for k, v in i.items():
                        full_list.append(k)
                        if v == True:
                            verified_list.append(k)
            except:
                print 1
            #print full_list
            #print verified_list

            merge_list = live_doctor.merge_fields
            spe = []
            list = []
            exp = []
            exp_list = []
            if merge_list != [] and merge_list != None:
                count = 0
                for i in merge_list[0]:
                    count += 1
                    list.append(count)
                    # i = i.encode('utf-8')
                    for k, v in i.items():
                        if v != "" and v != 0 and v != None and k != "SPECIALITY" and k != "SERVICES_OFFERED" and k != "EXPERIENCE":
                            k = k.encode('utf-8')
                            v = v.encode('utf-8')
                            list.append({k: v})
                        if k == "SPECIALITY" or k == "SERVICES_OFFERED":
                            if v != "" and v != 0 and v != None:
                                for j in v:
                                    #for x, y in j.items():
                                    #    if x == "name":
                                    #        y = y.encode('utf-8')
                                    #        spe.append(y)
                                    tempj = j.encode('utf-8')
                                    spe.append(tempj)
                                k = k.encode('utf-8')
                                list.append({k:spe})
                                spe = []
                        if k == "EXPERIENCE":
                            if v != "" and v != None:
                                c = 0
                                for j in v:
                                    c += 1
                                    exp.append(c)
                                    for x, y in j.items():
                                        x = x.encode('utf-8')
                                        if y != "" or y != None:
                                            y = y.encode('utf-8')
                                        exp.append({x:y})
                                k = k.encode('utf-8')
                                list.append({k:exp})
                                exp = [] 
                                    


                            # count += 1

            # -----------------VERIFIED FIELDS------------------------------

            # -------------------------------------------------------------


            # TAB 1----START-----------------------------------------------
            # city = City.objects.all()
            # if request.method == 'POST':
            #     cl_obj = Live_Doctor.objects.get(id=int(doctor_id))
            #     u = User.objects.get(id=request.user.id)
            #     p = u.__str__()
            #     if request.method == 'POST':
            #         cl_obj.updated_via = p
            #         cl_obj.save()
            if tab == '1' and request.method == 'GET':

                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list, 'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list, 'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list':year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete,'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality':speciality,'serviceOffered':serviceOffered,'zone_obj': zone_obj,
                    'current_zone':current_zone,'current_zone_location':current_zone_location,
                    'zone_based_locations':zone_based_locations,'privateimages':privateimages,
                    'appointment_minutes':appointment_minutes,'list_of_schedules':list_of_schedules,
                    'qualification':qualification,'talk_to_doc':talk_to_doc,'talk_fee':talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,'totalexperience':totalexperience,
                    'city': city, 'locality': locality,'asso_obj':asso_obj,
                    'emer_localities_list':emer_localities_list,'hostport':hostport,
                    'gallery_image_obj_list':gallery_image_obj_list,'country_obj':country_obj,'state_obj':state_obj,
                    'locality':locality,'all_departments':all_departments,'org_with_current_dep':org_with_current_dep,
                    'full_list': full_list, 'verified_list': verified_list, 'merge_list': list,
                    'New_SPE_Final_in_association':New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor':Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association':New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor':Current_New_SO_Final_in_live_doctor,
                     'consultancy_schedule':consultancy_schedule
                    })
            if tab == '1' and request.method == 'POST':

                try:
                    zone_id = request.POST['zone'].strip()
                    dummy = int(zone_id)
                    zone = Zone.objects.get(id = dummy)
                except:
                    zone = None
                try:
                    zone_location_id = request.POST['zone_location'].strip()
                    dummy = int(zone_location_id)
                    zone_location = ZoneLocation.objects.get(id= dummy)
                except:
                    zone_location = None

                try:
                    live_did = request.POST['live_did'].strip()
                except:
                    live_did = ''

                try:
                    live_extension = request.POST['live_extension'].strip()
                except:
                    live_extension = ''

                try:
                    firstName = request.POST['firstName'].strip()
                except:
                    firstName = ''
                try:
                    lastName = request.POST['lastName'].strip()
                except:
                    lastName = ''
                try:
                    category = request.POST['category'].strip()
                    temp = int(category)
                    category = temp
                except:
                    category = None

                try:
                    service_offered3 = request.POST.getlist('serviceoffer3')
                except:
                    service_offered3 = []
                if service_offered3 and service_offered3 != [] and service_offered3 != '':
                    temp = ''
                    #print "so  = ",service_offered
                    #print type(service_offered)
                    json_list_so = []
                    for i in service_offered3:
                        obj = Doctor_ServiceOffered_New.objects.get(id=int(i))
                        json_list_so.append({"id": int(i), "name": obj.name})
                    service_offered3 = json_list_so

                try:
                    speciality3 = request.POST.getlist('specialty3')
                except:
                    speciality3 = []
                if speciality3 and speciality3 != [] and speciality3 != '':
                    #print speciality
                    #print type(speciality)
                    json_list_spe = []
                    for i in speciality3:
                        obj = Doctor_Speciality_New.objects.get(id=int(i))
                        json_list_spe.append({"id": int(i), "name": obj.name})
                    speciality3 = json_list_spe

                try:
                    gender = request.POST['gender'].strip()
                except:
                    gender = ''
                try:
                    DOB = request.POST['DOB'].strip()
                except Exception as e:
                    DOB = ''
                try:
                    phone = request.POST['phone'].strip()
                except Exception as e:
                    phone = ''
                try:
                    fax = request.POST['fax'].strip()
                except Exception as e:
                    fax = ''
                try:
                    mobile = request.POST['mobile'].strip()
                except Exception as e:
                    mobile = ''
                try:
                    skype = request.POST['skype'].strip()
                except Exception as e:
                    skype = ''
                try:
                    email = request.POST['email'].strip()
                except Exception as e:
                    email = ''
                try:
                    secondary_email = request.POST['secondary_email'].strip()
                except Exception as e:
                    secondary_email = ''

                if firstName != '' and lastName != '' and gender != '' and mobile != '' and email != '' and category and category != '':
                    live_doctor.firstName=firstName
                    live_doctor.lastName=lastName
                    live_doctor.category=category
                    #live_doctor.serviceOffered=service_offered
                    #live_doctor.speciality=speciality

                    live_doctor.new_service_offered_final = service_offered3
                    live_doctor.new_speciality_final = speciality3

                    live_doctor.gender=gender
                    live_doctor.dob=DOB
                    live_doctor.phoneNo=phone
                    live_doctor.fax=fax
                    live_doctor.mobileNo=mobile
                    live_doctor.skypeId=skype
                    live_doctor.email=email
                    live_doctor.alternateEmail=secondary_email
                    live_doctor.did=live_did
                    live_doctor.extension=live_extension

                    if zone:
                        live_doctor.zone = zone
                    if zone_location:
                        live_doctor.zone_location = zone_location

                    u = User.objects.get(id=request.user.id)
                    p = u.__str__()
                    if request.method == 'POST':
                        live_doctor.updated_via = p

                    live_doctor.save()
                    get_notice = Live_Doctor_Notification.objects.all().order_by("-id")[0]
                    get_notice.update_Type = 'Basic Profile Updated'
                    get_notice.save()

                    messages.success(request, "Doctor Profile Updatedd Successfully")
                    return redirect(reverse('live_doctor_listing_edit', args=[live_doctor.id]) + "?tab=1")
                else:
                    messages.error(request, "Please Provide all required fields")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            # TAB 1----END-------------------------------------------------

            # TAB 2----START-----------------------------------------------
            if tab == '2' and request.method == 'GET':
                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list,
                    'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list,
                    'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered, 'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,'privateimages':privateimages,
                    'appointment_minutes': appointment_minutes, 'list_of_schedules': list_of_schedules,
                    'qualification': qualification, 'talk_to_doc': talk_to_doc, 'talk_fee': talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,'totalexperience':totalexperience,
                    'city': city, 'locality': locality, 'asso_obj': asso_obj,
                    'emer_localities_list': emer_localities_list,'hostport':hostport,
                    'gallery_image_obj_list':gallery_image_obj_list,'country_obj':country_obj,'state_obj':state_obj,
                    'locality':locality,'all_departments':all_departments,'org_with_current_dep':org_with_current_dep,
                    'full_list': full_list, 'verified_list': verified_list,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })

            # TAB 2----END-------------------------------------------------


            # TAB 3----START-----------------------------------------------
            if tab == '3' and request.method == 'GET':
                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list, 'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list, 'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered,'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,'totalexperience':totalexperience,
                    'appointment_minutes': appointment_minutes,'list_of_schedules':list_of_schedules,
                    'qualification':qualification,'talk_to_doc':talk_to_doc,'talk_fee':talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,'privateimages':privateimages,
                    'city': city, 'locality': locality,'asso_obj':asso_obj,
                    'emer_localities_list': emer_localities_list,'hostport':hostport,
                    'gallery_image_obj_list':gallery_image_obj_list,'country_obj':country_obj,'state_obj':state_obj,
                    'locality':locality,'all_departments':all_departments,'org_with_current_dep':org_with_current_dep,
                    'full_list': full_list, 'verified_list': verified_list,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })
            if tab == '3' and request.method == 'POST':
                degree = None
                try:
                    degree = request.POST['degree']
                except:
                    degree = None

                college = request.POST['college']
                year = request.POST['year']

                if degree:
                    import datetime
                    now = datetime.datetime.now()
                    new_education = Live_Doctor_Education(doctor_id=doctor_id, degree=degree,
                                                          createdAt=now,
                                                          college=college, year=int(year))
                    new_education.save()


                    ldoc3 = Live_Doctor.objects.filter(id=doctor_id)
                    qua_points = 0
                    ldoc3.update(qualification_points=qua_points)
                    ldoc3_education_list = Live_Doctor_Education.objects.filter(doctor_id=doctor_id)
                    if ldoc3_education_list != [] :
                        for edu in ldoc3_education_list :
                            if edu.degree.strip().lower() == 'MBBS'.lower() or edu.degree.strip().lower() == 'BHMS'.lower():
                                qua_points  =  qua_points + 6
                                break
                        for edu in ldoc3_education_list :
                            if edu.degree.strip().lower() == 'MD'.lower() or edu.degree.strip().lower() == 'MS'.lower():
                                qua_points  =  qua_points + 11
                                break
                        if len(ldoc3_education_list) > 1:
                            qua_points = qua_points + 3
                    else:
                        qua_points = 0

                    u = User.objects.get(id=request.user.id)
                    p = u.__str__()
                    if request.method == 'POST':
                        ldoc3[0].updated_via = p
                    ldoc3.update(qualification_points=qua_points)



                    messages.success(request, "Successfully Added Education Entry")
                    return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + '?tab=3')
                else:
                    messages.error(request, "Please provide value for Degree field")
                    return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + '?tab=3')
            # TAB 3----END-------------------------------------------------



            #TAB 4----START-----------------------------------------------
            if tab == '4' and request.method == 'GET' :


                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html',{
                    'tab_listing': 'live_doctor_listing','tab':tab,
                    'live_doctor':live_doctor, 'doctor_id':doctor_id,
                    'live_doc_exp_list':live_doc_exp_list,'live_doc_rewardrecog_list':live_doc_rewardrecog_list,
                    'live_doc_memb_list':live_doc_memb_list,'live_doc_education_list':live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete,'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered,'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,'totalexperience':totalexperience,
                    'appointment_minutes': appointment_minutes,'list_of_schedules':list_of_schedules,
                    'qualification': qualification,'talk_to_doc':talk_to_doc,'talk_fee':talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,'privateimages':privateimages,
                    'city': city, 'locality': locality,'asso_obj':asso_obj,
                    'emer_localities_list': emer_localities_list,'hostport':hostport,
                    'gallery_image_obj_list':gallery_image_obj_list,'country_obj':country_obj,'state_obj':state_obj,
                    'locality':locality,'all_departments':all_departments,'org_with_current_dep':org_with_current_dep,
                    'full_list': full_list, 'verified_list': verified_list,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })
            if tab == '4' and request.method == 'POST':
                experience = None
                try:
                    experience = request.POST['experience']
                except:
                    experience = None

                fromYear = request.POST['fromYear']
                toYear = request.POST['toYear']
                designation = request.POST['designation']
                city = request.POST['city']

                if fromYear:
                    pass
                else:
                    fromYear=0
                if toYear:
                    pass
                else:
                    toYear=0

                if experience:
                    import datetime
                    now = datetime.datetime.now()
                    new_experience =  Live_Doctor_Experience(doctor_id = doctor_id,name = experience,createdAt = now,
                                                             fromYear=int(fromYear),toYear=int(toYear),designation=designation,city=city)
                    new_experience.save()


                    ldoc2 = Live_Doctor.objects.filter(id = doctor_id )
                    ldoc2_experience_list =  Live_Doctor_Experience.objects.filter(doctor_id = doctor_id)
                    total = 0
                    if ldoc2_experience_list != []:
                        for i in ldoc2_experience_list:
                            if i.toYear != None and i.fromYear != None :
                                total = total + (int(i.toYear) - int(i.fromYear))
                            else:
                                pass
                        exppoints = 0
                        if total < 5 :
                            exppoints = 3.5
                        elif total >= 5 and total <= 10:
                            exppoints = 5
                        elif total >= 10:
                            exppoints = 6.5
                    else:
                        exppoints = 0

                    ldoc2.update(experience_points = exppoints)

                    u = User.objects.get(id=request.user.id)
                    p = u.__str__()
                    if request.method == 'POST':
                        ldoc2.update(updated_via = p)


                    messages.success(request,"Successfully Added Experience Entry")
                    return redirect(reverse('live_doctor_listing_edit',args=[doctor_id])+'?tab=4')
                else:
                    messages.error(request, "Please provide value for Experience field")
                    return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + '?tab=4')
            # TAB 4----END-------------------------------------------------


            # TAB 5----START-----------------------------------------------
            if tab == '5' and request.method == 'GET':

                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list, 'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list, 'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete,'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered,'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,'privateimages':privateimages,
                    'appointment_minutes': appointment_minutes,'list_of_schedules':list_of_schedules,
                    'qualification': qualification,'talk_to_doc':talk_to_doc,'talk_fee':talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,'totalexperience':totalexperience,
                    'city': city, 'locality': locality,'asso_obj':asso_obj,
                    'emer_localities_list': emer_localities_list,'hostport':hostport,
                    'gallery_image_obj_list':gallery_image_obj_list,'country_obj':country_obj,'state_obj':state_obj,
                    'locality':locality,'all_departments':all_departments,'org_with_current_dep':org_with_current_dep,
                    'full_list': full_list, 'verified_list': verified_list,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })
            if tab == '5' and request.method == 'POST':

                time_type = request.POST['schedule'].strip()
                hospital_id = request.POST['diet_org_id'].strip()
                designation = request.POST['designation'].strip()
                app_minutes = request.POST['app_minutes'].strip()
                consultation_charges = request.POST['consultation_charges'].strip()
                live_schedule_did = request.POST['live_schedule_did'].strip()
                live_schedule_extension = request.POST['live_schedule_extension'].strip()
                AssoObj = Live_Doctor_Commonworkschedule.objects.filter(doctor_id=doctor_id,clinic_id=int(hospital_id))
                if hospital_id == None or hospital_id == '' or hospital_id == ' ':
                    messages.error(request,"Please select an Organisation")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                #if list(AssoObj) == [] or (AssoObj != [] and AssoObj[0].status == 'delete'):
                if len(AssoObj) == 0 or (len(AssoObj) != 0 and AssoObj[0].status == 'delete'):
                    import datetime
                    # now = datetime.datetime.now()
                    # new_sch_obj = Live_Doctor_Commonworkschedule(designation=designation, clinic_id=hospital_id,
                    #                                              time_type=time_type, appointmentMinute=app_minutes,
                    #                                              consultingCharge=consultation_charges,
                    #                                              createdAt=now,doctor_id=doctor_id)

                    if time_type == "multi_double" :

                        varr = [
                              {
                                "value": False,
                                "name": "Mon",
                                "session1": {
                                  "from": "",
                                  "to": ""
                                },
                                "session2": {
                                  "from": "",
                                  "to": ""
                                }
                              },
                              {
                                "value": False,
                                "name": "Tue",
                                "session1": {
                                  "from": "",
                                  "to": ""
                                },
                                "session2": {
                                  "from": "",
                                  "to": ""
                                }
                              },
                              {
                                "value": False,
                                "name": "Wed",
                                "session1": {
                                  "from": "",
                                  "to": ""
                                },
                                "session2": {
                                  "from": "",
                                  "to": ""
                                }
                              },
                              {
                                "value": False,
                                "name": "Thu",
                                "session1": {
                                  "from": "",
                                  "to": ""
                                },
                                "session2": {
                                  "from": "",
                                  "to": ""
                                }
                              },
                              {
                                "value": False,
                                "name": "Fri",
                                "session1": {
                                  "from": "",
                                  "to": ""
                                },
                                "session2": {
                                  "from": "",
                                  "to": ""
                                }
                              },
                              {
                                "value": False,
                                "name": "Sat",
                                "session1": {
                                  "from": "",
                                  "to": ""
                                },
                                "session2": {
                                  "from": "",
                                  "to": ""
                                }
                              },
                              {
                                "value": False,
                                "name": "Sun",
                                "session1": {
                                  "from": "",
                                  "to": ""
                                },
                                "session2": {
                                  "from": "",
                                  "to": ""
                                }
                              }
                            ]


                        try:
                            monday = request.POST['Moncheck']
                        except:
                            monday = "NotChecked"
                        if monday == 'Monyes':
                            from1 = request.POST['monFROM1']
                            to1 = request.POST['monTO1']
                            from2 = request.POST['monFROM2']
                            to2 = request.POST['monTO2']
                            varr[0]['session1']['from'] = from1
                            varr[0]['session2']['from'] = from2
                            varr[0]['session1']['to'] = to1
                            varr[0]['session2']['to'] = to2
                            varr[0]['value'] = True


                        from1 = to1 = from2 = to2 = ""
                        try:
                            tuesday = request.POST['Tuecheck']
                        except:
                            tuesday = "NotChecked"
                        if tuesday == 'Tueyes':
                            from1 = request.POST['tueFROM1']
                            to1 = request.POST['tueTO1']
                            from2 = request.POST['tueFROM2']
                            to2 = request.POST['tueTO2']
                            # list_schedule[1]['session1']['from'] = from1
                            # list_schedule[1]['session1']['to'] = to1
                            # list_schedule[1]['session2']['from'] = from2
                            # list_schedule[1]['session2']['to'] = to2
                            varr[1]['session1']['from'] = from1
                            varr[1]['session2']['from'] = from2
                            varr[1]['session1']['to'] = to1
                            varr[1]['session2']['to'] = to2
                            varr[1]['value'] = True

                        from1 = to1 = from2 = to2 = ""
                        try:
                            wednesday = request.POST['Wedcheck']
                        except:
                            wednesday = "NotChecked"
                        if wednesday == 'Wedyes':
                            from1 = request.POST['wedFROM1']
                            to1 = request.POST['wedTO1']
                            from2 = request.POST['wedFROM2']
                            to2 = request.POST['wedTO2']
                            varr[2]['session1']['from'] = from1
                            varr[2]['session2']['from'] = from2
                            varr[2]['session1']['to'] = to1
                            varr[2]['session2']['to'] = to2
                            varr[2]['value'] = True

                        from1 = to1 = from2 = to2 = ""
                        try:
                            thursday = request.POST['Thucheck']
                        except:
                            thursday = "NotChecked"
                        if thursday == 'Thuyes':
                            from1 = request.POST['thuFROM1']
                            to1 = request.POST['thuTO1']
                            from2 = request.POST['thuFROM2']
                            to2 = request.POST['thuTO2']
                            varr[3]['session1']['from'] = from1
                            varr[3]['session2']['from'] = from2
                            varr[3]['session1']['to'] = to1
                            varr[3]['session2']['to'] = to2
                            varr[3]['value'] = True

                        from1 = to1 = from2 = to2 = ""
                        try:
                            friday = request.POST['Fricheck']
                        except:
                            friday = "NotChecked"
                        if friday == 'Friyes':
                            from1 = request.POST['friFROM1']
                            to1 = request.POST['friTO1']
                            from2 = request.POST['friFROM2']
                            to2 = request.POST['friTO2']
                            varr[4]['session1']['from'] = from1
                            varr[4]['session2']['from'] = from2
                            varr[4]['session1']['to'] = to1
                            varr[4]['session2']['to'] = to2
                            varr[4]['value'] = True

                        from1 = to1 = from2 = to2 = ""
                        try:
                            saturday = request.POST['Satcheck']
                        except:
                            saturday = "NotChecked"
                        if saturday == 'Satyes':
                            from1 = request.POST['satFROM1']
                            to1 = request.POST['satTO1']
                            from2 = request.POST['satFROM2']
                            to2 = request.POST['satTO2']
                            varr[5]['session1']['from'] = from1
                            varr[5]['session2']['from'] = from2
                            varr[5]['session1']['to'] = to1
                            varr[5]['session2']['to'] = to2
                            varr[5]['value'] = True

                        from1 = to1 = from2 = to2 = ""
                        try:
                            sunday = request.POST['Suncheck']
                        except:
                            sunday = "NotChecked"
                        if sunday == 'Sunyes':
                            from1 = request.POST['sunFROM1']
                            to1 = request.POST['sunTO1']
                            from2 = request.POST['sunFROM2']
                            to2 = request.POST['sunTO2']
                            varr[6]['session1']['from'] = from1
                            varr[6]['session2']['from'] = from2
                            varr[6]['session1']['to'] = to1
                            varr[6]['session2']['to'] = to2
                            varr[6]['value'] = True

                        xyz = json.dumps(varr)
                        kkk = json.loads(xyz)
                        template_service= {
                            'hit_from': 'CMS',
                            "doctor_id": 0,
                            "hospital": {
                                "name": "",
                                "id": "",

                            },
                            "designation": "",
                            "appointmentMinute": "",
                            "consultingCharge": "",
                            "time_type": "",
                            "time": {

                            }
                        }

                        template_service["doctor_id"] = int(doctor_id)
                        template_service["hospital"]["id"] = int(hospital_id)
                        org_single = OrganisationName.objects.get(id = int(hospital_id))
                        template_service["hospital"]["name"] = org_single.name
                        template_service["designation"] = designation
                        #template_service["appointmentMinute"] = int(app_minutes)
                        try:
                            template_service["appointmentMinute"] = int(app_minutes)
                        except:
                            template_service["appointmentMinute"] = 15
                        template_service["consultingCharge"] = float(consultation_charges)
                        template_service["did"] = live_schedule_did
                        template_service["extension"] = live_schedule_extension

                        template_service["time_type"] = time_type
                        template_service["time"] = kkk

                        global authToken
                        template_service['authToken'] = authToken
                        #template_service['hit_from'] = 'CMS'

                        global hostname
                        global port
                        url_p3 = "/api/v2/doctor/add_work_schedule/"
                        urlc = hostname + port + url_p3
                        # print urlc
                        import requests
                        url = urlc
                        try:
                            r = requests.post(url, json=template_service )

                            # tempresp = json.dumps(r.text)
                            # print r.text
                            # print type(r.text)
                            resp = json.loads(r.text)
                            # print type(resp)
                            # print resp

                            if r.status_code == 200 or r.status_code == '200':

                                if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                                    now = datetime.datetime.now()
                                    lvdr = None
                                    lvdr = Live_Doctor.objects.get(id=doctor_id)
                                    Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                            livedoctor_id=lvdr.id,
                                                                            livedoctorCrAt=lvdr.createdAt,
                                                                            livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                            livedoctorStage=lvdr.stage.stage_name,
                                                                            update_Type='Schedule Created',
                                                                            updatedBy='CMS')
                                    if lvdr.is_subscribed == True:
                                        Key_CC_RANK = org_single.city_id.__str__() + '-' + lvdr.category.__str__()
                                        key_CLC_RANK = org_single.city_id.__str__() + '-' + org_single.locality_id.__str__() + '-' + lvdr.category.__str__()
                                        rrank = None
                                        ccrank_already_exists = None
                                        clcrank_already_exists = None

                                        # We check if Subscribed CC occupied ranks exist for this , if not we create a
                                        # blank  entry and give rank 1 other wise we give largest value + 1
                                        try:
                                            cc_occu_obj = subs_occupied_cc_ranks.objects.get(key=Key_CC_RANK)
                                        except:
                                            cc_occu_obj = subs_occupied_cc_ranks.objects.create(key=Key_CC_RANK,ranklist=[])
                                        cc_occu_list = cc_occu_obj.ranklist
                                        if cc_occu_list == None or cc_occu_list == '':
                                            cc_occu_list = list()


                                        # If a schedule already exists with this CC then the CC subscribed rank
                                        # must already be there and we need not set the CC subscribed rank for this CC
                                        # Else we set it

                                        ccrank_already_exists = lvdr.subscribed_rank['CC_RANK_list'].get(Key_CC_RANK,"DoesNotExist" )
                                        if ccrank_already_exists == "DoesNotExist" :
                                            if cc_occu_list != []:
                                                cc_occu_list.sort()
                                                rrank = cc_occu_list[-1] + 1
                                                cc_occu_list.append(rrank)
                                            else:
                                                rrank = 1
                                                cc_occu_list.append(rrank)
                                            cc_occu_obj.ranklist = cc_occu_list
                                            cc_occu_obj.save()
                                            lvdr.subscribed_rank['CC_RANK_list'][Key_CC_RANK] = rrank

                                        # We check if Subscribed CLC occupied ranks exist for this , if not we create a
                                        # blank  entry and give rank 1 other wise we give largest value + 1
                                        try:
                                            clc_occu_obj = subs_occupied_clc_ranks.objects.get(key=key_CLC_RANK)
                                        except:
                                            clc_occu_obj = subs_occupied_clc_ranks.objects.create(key=key_CLC_RANK,ranklist=[])
                                        clc_occu_list = clc_occu_obj.ranklist
                                        if clc_occu_list == None or clc_occu_list == '':
                                            clc_occu_list = list()

                                        # If a schedule already exists with this CLC then the CLC subscribed rank
                                        # must already be there and we need not set the CLC subscribed rank for this CLC
                                        # Else we set it
                                        rrank = None
                                        clcrank_already_exists = lvdr.subscribed_rank['CLC_RANK_list'].get(key_CLC_RANK,"DoesNotExist")
                                        if clcrank_already_exists == "DoesNotExist":
                                            if clc_occu_list != []:
                                                clc_occu_list.sort()
                                                rrank = clc_occu_list[-1] + 1
                                                clc_occu_list.append(rrank)
                                            else:
                                                rrank = 1
                                                clc_occu_list.append(rrank)
                                            clc_occu_obj.ranklist = clc_occu_list
                                            clc_occu_obj.save()
                                            lvdr.subscribed_rank['CLC_RANK_list'][key_CLC_RANK] = rrank
                                        if ccrank_already_exists == "DoesNotExist"  and clcrank_already_exists == "DoesNotExist":
                                            messages.success(request, "Successfully Updated Schedule, BOTH CC & CLC Subscribed ranks SET")
                                        if ccrank_already_exists != "DoesNotExist"  and clcrank_already_exists != "DoesNotExist":
                                            messages.success(request, "Successfully Updated Schedule, BOTH CC & CLC Subscribed ranks ALREADY EXIST-NOT SET")
                                        if ccrank_already_exists != "DoesNotExist"  and clcrank_already_exists == "DoesNotExist":
                                            messages.success(request, "Successfully Updated Schedule, CC Subscribed rank ALREADY EXISTS-NOT SET, CLC Subscribed ranks SET")
                                        if ccrank_already_exists == "DoesNotExist"  and clcrank_already_exists != "DoesNotExist":
                                            messages.success(request, "Successfully Updated Schedule, CC Subscribed ranks SET, CLC Subscribed rank ALREADY EXISTS-NOT SET")
                                        lvdr.save()
                                        rrank = None
                                        ccrank_already_exists = None
                                        clcrank_already_exists = None
                                    else:
                                        rrank = None
                                        ccrank_already_exists = None
                                        clcrank_already_exists = None
                                        messages.success(request,"Successfully Updated Schedule But Subscribed ranks NOT set as doctor is not marked as Subscribed")

                                    return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")

                                else:
                                    messages.error(request, resp['statusMessage'])
                                    messages.success(request, "Updated Schedule But Problem with timing and time_obj")
                                    return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")

                            else:
                                messages.error(request, resp['statusMessage'])
                                messages.success(request, "Updated Schedule But Problem with timing and time_obj")
                                return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")

                        except Exception as e:
                            messages.error(request, e)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


                            # messages.success(request, "Successfully Updated Type 3Schedule")
                        # return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")

    # ---------------------------------------------------------------------------------------------------------------------------------------------
                    else:
                        schedule_json = {}
                        day = {"Mon": "",  "Tue": "", "Wed": "", "Thu": "", "Fri": "", "Sat": "", "Sun": ""}
                        session1 = {"from":"","to": ""}
                        session2 = {"from": "","to": ""}
                        schedule_json.update({'day':day})
                        schedule_json.update({'session1':session1})
                        schedule_json.update({'session2':session2})





                    if time_type == 'single':
                        try:
                            Mon =  request.POST['single1']
                        except:
                            Mon = False
                        try:
                            Tue =  request.POST['single2']
                        except:
                            Tue = False
                        try:
                            Wed =  request.POST['single3']
                        except:
                            Wed = False
                        try:
                            Thu =  request.POST['single4']
                        except:
                            Thu = False
                        try:
                            Fri =  request.POST['single5']
                        except:
                            Fri = False
                        try:
                            Sat =  request.POST['single6']
                        except:
                            Sat = False
                        try:
                            Sun =  request.POST['single7']
                        except:
                            Sun = False


                        from_time = request.POST['singleFromtime'].strip()
                        to_time = request.POST['singleTotime'].strip()
                        schedule_json['session1']['from'] = from_time
                        schedule_json['session1']['to'] = to_time
                        schedule_json['session2']['from'] = ""
                        schedule_json['session2']['to'] = ""

                    if time_type == 'single_double':
                        try:
                            Mon = request.POST['single_double1']
                        except:
                            Mon = False
                        try:
                            Tue = request.POST['single_double2']
                        except:
                            Tue = False
                        try:
                            Wed = request.POST['single_double3']
                        except:
                            Wed = False
                        try:
                            Thu = request.POST['single_double4']
                        except:
                            Thu = False
                        try:
                            Fri = request.POST['single_double5']
                        except:
                            Fri = False
                        try:
                            Sat = request.POST['single_double6']
                        except:
                            Sat = False
                        try:
                            Sun = request.POST['single_double7']
                        except:
                            Sun = False


                        from_times1 = request.POST['single_double_sess1_Fromtime'].strip()
                        to_times1 = request.POST['single_double_sess1_Totime'].strip()
                        from_times2 = request.POST['single_double_sess2_Fromtime'].strip()
                        to_times2 = request.POST['single_double_sess2_Totime'].strip()
                        schedule_json['session1']['from'] = from_times1
                        schedule_json['session1']['to'] = to_times1
                        schedule_json['session2']['from'] = from_times2
                        schedule_json['session2']['to'] = to_times2

                    if time_type == 'single' or time_type == 'single_double':

                        if Mon == 'on':
                            schedule_json['day']['Mon'] = True
                        else:
                            schedule_json['day']['Mon'] = False

                        if Tue == 'on':
                            schedule_json['day']['Tue'] = True
                        else:
                            schedule_json['day']['Tue'] = False

                        if Wed == 'on':
                            schedule_json['day']['Wed'] =True
                        else:
                            schedule_json['day']['Wed'] = False

                        if Thu == 'on':
                            schedule_json['day']['Thu'] = True
                        else:
                            schedule_json['day']['Thu'] = False

                        if Fri == 'on':
                            schedule_json['day']['Fri'] = True
                        else:
                            schedule_json['day']['Fri'] = False

                        if Sat == 'on':
                            schedule_json['day']['Sat'] =True
                        else:
                            schedule_json['day']['Sat'] = False

                        if Sun == 'on':
                            schedule_json['day']['Sun'] = True
                        else:
                            schedule_json['day']['Sun'] = False

                        xyz = json.dumps(schedule_json)
                        kkk = json.loads(xyz)
                        template_service = {
                            'hit_from': 'CMS',
                            "doctor_id": 0,
                            "hospital": {
                                "name": "",
                                "id": "",

                            },
                            "designation": "",
                            "appointmentMinute": "",
                            "consultingCharge": "",
                            "time_type": "",
                            "time": {

                            }
                        }

                        template_service["doctor_id"] = int(doctor_id)
                        template_service["hospital"]["id"] = int(hospital_id)
                        org_single = OrganisationName.objects.get(id=int(hospital_id))
                        template_service["hospital"]["name"] = org_single.name
                        template_service["designation"] = designation
                        #template_service["appointmentMinute"] = int(app_minutes)
                        try:
                            template_service["appointmentMinute"] = int(app_minutes)
                        except:
                            template_service["appointmentMinute"] = 15
                        template_service["consultingCharge"] = float(consultation_charges)
                        template_service["did"] = live_schedule_did
                        template_service["extension"] = live_schedule_extension

                        template_service["time_type"] = time_type
                        template_service["time"] = kkk

                        global authToken
                        template_service['authToken'] = authToken
                        #template_service['hit_from'] = 'CMS'

                        global hostname
                        global port
                        url_p3 = "/api/v2/doctor/add_work_schedule/"
                        urlc = hostname + port + url_p3
                        # print urlc
                        import requests
                        url = urlc
                        try:
                            r = requests.post(url, json=template_service )
                            # tempresp = json.dumps(r.text)
                            # print r.text
                            # print type(r.text)
                            resp = json.loads(r.text)
                            # print type(resp)
                            # print resp

                            if r.status_code == 200 or r.status_code == '200':

                                if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                                    now = datetime.datetime.now()
                                    lvdr = None
                                    lvdr = Live_Doctor.objects.get(id=doctor_id)
                                    Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                            livedoctor_id=lvdr.id,
                                                                            livedoctorCrAt=lvdr.createdAt,
                                                                            livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                            livedoctorStage=lvdr.stage.stage_name,
                                                                            update_Type='Schedule Created',
                                                                            updatedBy='CMS')

                                    if lvdr.is_subscribed == True:
                                        Key_CC_RANK = org_single.city_id.__str__() + '-' + lvdr.category.__str__()
                                        key_CLC_RANK = org_single.city_id.__str__() + '-' + org_single.locality_id.__str__()+ '-' + lvdr.category.__str__()
                                        rrank = None
                                        ccrank_already_exists = None
                                        clcrank_already_exists = None

                                        # We check if Subscribed CC occupied ranks exist for this , if not we create a
                                        # blank  entry and give rank 1 other wise we give largest value + 1
                                        try:
                                            cc_occu_obj = subs_occupied_cc_ranks.objects.get(key=Key_CC_RANK)
                                        except:
                                            cc_occu_obj = subs_occupied_cc_ranks.objects.create(key=Key_CC_RANK,ranklist=[])
                                        cc_occu_list = cc_occu_obj.ranklist
                                        if cc_occu_list == None or cc_occu_list == '':
                                            cc_occu_list = list()


                                        # If a schedule already exists with this CC then the CC subscribed rank
                                        # must already be there and we need not set the CC subscribed rank for this CC
                                        # Else we set it

                                        ccrank_already_exists = lvdr.subscribed_rank['CC_RANK_list'].get(Key_CC_RANK,"DoesNotExist" )
                                        if ccrank_already_exists == "DoesNotExist" :
                                            if cc_occu_list != []:
                                                cc_occu_list.sort()
                                                rrank = cc_occu_list[-1] + 1
                                                cc_occu_list.append(rrank)
                                            else:
                                                rrank = 1
                                                cc_occu_list.append(rrank)
                                            cc_occu_obj.ranklist = cc_occu_list
                                            cc_occu_obj.save()
                                            lvdr.subscribed_rank['CC_RANK_list'][Key_CC_RANK] = rrank

                                        # We check if Subscribed CLC occupied ranks exist for this , if not we create a
                                        # blank  entry and give rank 1 other wise we give largest value + 1
                                        try:
                                            clc_occu_obj = subs_occupied_clc_ranks.objects.get(key=key_CLC_RANK)
                                        except:
                                            clc_occu_obj = subs_occupied_clc_ranks.objects.create(key=key_CLC_RANK,ranklist=[])
                                        clc_occu_list = clc_occu_obj.ranklist
                                        if clc_occu_list == None or clc_occu_list == '':
                                            clc_occu_list = list()

                                        # If a schedule already exists with this CLC then the CLC subscribed rank
                                        # must already be there and we need not set the CLC subscribed rank for this CLC
                                        # Else we set it
                                        rrank = None
                                        clcrank_already_exists = lvdr.subscribed_rank['CLC_RANK_list'].get(key_CLC_RANK,"DoesNotExist")
                                        if clcrank_already_exists == "DoesNotExist":
                                            if clc_occu_list != []:
                                                clc_occu_list.sort()
                                                rrank = clc_occu_list[-1] + 1
                                                clc_occu_list.append(rrank)
                                            else:
                                                rrank = 1
                                                clc_occu_list.append(rrank)
                                            clc_occu_obj.ranklist = clc_occu_list
                                            clc_occu_obj.save()
                                            lvdr.subscribed_rank['CLC_RANK_list'][key_CLC_RANK] = rrank



                                        if ccrank_already_exists == "DoesNotExist"  and clcrank_already_exists == "DoesNotExist":
                                            messages.success(request, "Successfully Updated Schedule, BOTH CC & CLC Subscribed ranks SET")
                                        if ccrank_already_exists != "DoesNotExist"  and clcrank_already_exists != "DoesNotExist":
                                            messages.success(request, "Successfully Updated Schedule, BOTH CC & CLC Subscribed ranks ALREADY EXIST-NOT SET")
                                        if ccrank_already_exists != "DoesNotExist"  and clcrank_already_exists == "DoesNotExist":
                                            messages.success(request, "Successfully Updated Schedule, CC Subscribed rank ALREADY EXISTS-NOT SET, CLC Subscribed ranks SET")
                                        if ccrank_already_exists == "DoesNotExist"  and clcrank_already_exists != "DoesNotExist":
                                            messages.success(request, "Successfully Updated Schedule, CC Subscribed ranks SET, CLC Subscribed rank ALREADY EXISTS-NOT SET")
                                        lvdr.save()
                                        rrank = None
                                        ccrank_already_exists = None
                                        clcrank_already_exists = None
                                    else:
                                        rrank = None
                                        ccrank_already_exists = None
                                        clcrank_already_exists = None
                                        messages.success(request,"Successfully Updated Schedule But Subscribed ranks NOT set as doctor is not marked as Subscribed")
                                    return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")

                                else:
                                    messages.error(request, resp['statusMessage'])
                                    messages.success(request, "Updated Schedule But Problem with timing and time_obj")
                                    return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")

                            else:
                                messages.error(request, resp['statusMessage'])
                                messages.success(request, "Updated Schedule But Problem with timing and time_obj")
                                return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")

                        except Exception as e:
                            messages.error(request, e)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                        # messages.success(request, "Successfully Updated Schedule")
                        # return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)])+"?tab=5")
                else:
                    messages.error(request, "Schedule Already exists for the given doctor and organisation pair")
                    return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")
            # TAB 5----END-------------------------------------------------


            # TAB 6----START-----------------------------------------------

            if tab == '6' and request.method == 'GET':
                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list, 'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list, 'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete,'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered,'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,'privateimages':privateimages,
                    'appointment_minutes': appointment_minutes,'list_of_schedules':list_of_schedules,
                    'qualification': qualification,'talk_to_doc':talk_to_doc,'talk_fee':talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,'totalexperience':totalexperience,
                    'city': city, 'locality': locality,'asso_obj':asso_obj,
                    'emer_localities_list': emer_localities_list,'hostport':hostport,
                    'gallery_image_obj_list':gallery_image_obj_list,'country_obj':country_obj,'state_obj':state_obj,
                    'locality':locality,'all_departments':all_departments,'org_with_current_dep':org_with_current_dep,
                    'full_list': full_list, 'verified_list': verified_list,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })
            if tab == '6' and request.method == 'POST':
                rewardrecog = None
                try:
                    rewardrecog = request.POST['name']
                except:
                    rewardrecog = None

                year = request.POST['year']

                if rewardrecog and year :
                    import datetime
                    now = datetime.datetime.now()
                    new_rewardrecog = Live_Doctor_Rewardrecog(doctor_id=doctor_id, name=rewardrecog,year=int(year),
                                                              createdAt=now)
                    new_rewardrecog.save()
                    messages.success(request, "Successfully Added Reward Recognition Entry")
                    return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + '?tab=6')
                else:
                    messages.error(request, "Please provide All Values")
                    return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + '?tab=6')
            # TAB 6----End-----------------------------------------------



            # TAB 7----START-----------------------------------------------
            if tab == '7' and request.method == 'GET':
                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list, 'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list, 'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete,'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered,'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,'privateimages':privateimages,
                    'appointment_minutes': appointment_minutes,'list_of_schedules':list_of_schedules,
                    'qualification': qualification,'talk_to_doc':talk_to_doc,'talk_fee':talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,'totalexperience':totalexperience,
                    'city': city, 'locality': locality,'asso_obj':asso_obj,
                    'emer_localities_list': emer_localities_list,'hostport':hostport,
                    'gallery_image_obj_list':gallery_image_obj_list,'country_obj':country_obj,'state_obj':state_obj,
                    'locality':locality,'all_departments':all_departments,'org_with_current_dep':org_with_current_dep,
                    'full_list': full_list, 'verified_list': verified_list,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })
            if tab == '7' and request.method == 'POST':
                membership = None
                try:
                    membership = request.POST['membership']
                except:
                    membership = None
                if membership:
                    import datetime
                    now = datetime.datetime.now()
                    new_membership = Live_Doctor_Membership(doctor_id=doctor_id, name=membership,
                                                            createdAt=now)
                    new_membership.save()
                    messages.success(request, "Successfully Added Membership Entry")
                    return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + '?tab=7')


            # TAB 7----END-------------------------------------------------

            # TAB 8----START-----------------------------------------------

            if tab == '8' and request.method == 'GET':
                #print live_doctor
                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list, 'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list, 'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete,'valid_choice': valid_choice,
                    'category_obj': category_obj,'privateimages':privateimages,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered,'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,
                    'appointment_minutes': appointment_minutes,'list_of_schedules':list_of_schedules,
                    'qualification': qualification,'talk_to_doc':talk_to_doc,'talk_fee':talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,'totalexperience':totalexperience,
                    'city': city, 'locality': locality,'asso_obj':asso_obj,
                    'emer_localities_list': emer_localities_list,'hostport':hostport,
                    'gallery_image_obj_list':gallery_image_obj_list,'country_obj':country_obj,'state_obj':state_obj,
                    'locality':locality,'all_departments':all_departments,'org_with_current_dep':org_with_current_dep,
                    'full_list': full_list, 'verified_list': verified_list,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })

            if tab == '8' and request.method == 'POST':
                import datetime
                type = request.POST.get('type')

                if type == "trial":
                    trialstartdate = request.POST.get('trialstartDate')
                    stdt = None
                    if trialstartdate:
                        stdt = datetime.datetime.strptime(trialstartdate, "%d/%m/%Y")

                    trialenddate = request.POST.get('trialendDate')
                    enddt = None
                    if trialenddate:
                        enddt = datetime.datetime.strptime(trialenddate, "%d/%m/%Y")

                    Live_Doctor_Manage_Account(livedoctor_id=doctor_id, startdate=stdt, enddate=enddt, plan_name="Trial Period", amount="0.00", payment_mode="Free").save()
                    messages.success(request, "Successfully Added Trail Period")
                    return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + '?tab=8')
                else:
                    plan = request.POST.get('plan')
                    short_desc = request.POST.get('desc')
                    subs_startdate = request.POST.get('invoiceStartDate')
                    substdt = None
                    if subs_startdate:
                        substdt = datetime.datetime.strptime(subs_startdate, "%d/%m/%Y")
                    subs_enddate = request.POST.get('invoiceEndDate')
                    subenddt = None
                    if subs_enddate:
                        subenddt = datetime.datetime.strptime(subs_enddate, "%d/%m/%Y")
                    amount = request.POST.get('amount')
                    mode = request.POST.get('paymentMode')
                    remarks = request.POST.get('remarks')
                    # uploadReceipt = request.POST.get('uploadReceipt')

                    Live_Doctor_Manage_Account(livedoctor_id=doctor_id, startdate=substdt, enddate=subenddt, remarks=remarks,
                                               plan_name=plan, short_description=short_desc, amount=amount, payment_mode=mode).save()
                    messages.success(request, "Successfully Added Subscrption Details")
                    return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + '?tab=8')
                messages.error(request, 'Something Bad Happened')
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                # TAB 8----END-------------------------------------------------


                # TAB 9----START-----------------------------------------------

            if tab == '9' and request.method == 'GET':
                # print live_doctor
                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list, 'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list, 'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered, 'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,
                    'appointment_minutes': appointment_minutes, 'list_of_schedules': list_of_schedules,
                    'qualification': qualification,'talk_to_doc':talk_to_doc,'talk_fee':talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,
                    'totalexperience':totalexperience,'privateimages':privateimages,
                    'city': city, 'locality': locality,'asso_obj':asso_obj,
                    'emer_localities_list': emer_localities_list,'hostport':hostport,
                    'gallery_image_obj_list':gallery_image_obj_list,'country_obj':country_obj,'state_obj':state_obj,
                    'locality':locality,'all_departments':all_departments,'org_with_current_dep':org_with_current_dep,
                    'full_list': full_list, 'verified_list': verified_list,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })
                    # TAB 9----END-------------------------------------------------

                # TAB 10----START-----------------------------------------------

            if tab == '10' and request.method == 'GET':
                # print live_doctor
                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list, 'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list, 'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered, 'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,'privateimages':privateimages,
                    'appointment_minutes': appointment_minutes, 'list_of_schedules': list_of_schedules,
                    'qualification': qualification, 'talk_to_doc': talk_to_doc, 'talk_fee': talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,
                    'city': city, 'locality': locality, 'asso_obj': asso_obj,
                    'emer_localities_list': emer_localities_list, 'hostport': hostport,
                    'gallery_image_obj_list': gallery_image_obj_list, 'country_obj': country_obj,
                    'state_obj': state_obj,
                    'locality': locality, 'all_departments': all_departments,
                    'org_with_current_dep': org_with_current_dep,'totalexperience':totalexperience,
                    'full_list': full_list, 'verified_list': verified_list,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })
                # TAB 10----END-------------------------------------------------
            if tab == '11' and request.method == 'GET':
                # print live_doctor
                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list, 'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list, 'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered, 'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,
                    'appointment_minutes': appointment_minutes, 'list_of_schedules': list_of_schedules,
                    'qualification': qualification, 'talk_to_doc': talk_to_doc, 'talk_fee': talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,
                    'city': city, 'locality': locality, 'asso_obj': asso_obj,
                    'emer_localities_list': emer_localities_list, 'hostport': hostport,
                    'gallery_image_obj_list': gallery_image_obj_list, 'country_obj': country_obj,
                    'state_obj': state_obj,
                    'locality': locality, 'all_departments': all_departments,
                    'org_with_current_dep': org_with_current_dep, 'privateimages': privateimages,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })

            # TAB 12----Start-------------------------------------------------
            if tab == '12' and request.method == 'GET':
                # live_doctor_data = Live_Doctor.objects.filter(id=doctor_id)
                # fields_json = live_doctor_data[0].verified_fields
                #
                # full_list = []
                # verified_list = []
                # for i in fields_json:
                #     for k, v in i.items():
                #         full_list.append(k)
                #         if v == True:
                #             verified_list.append(k)
                # print full_list
                # print verified_list

                # merge_list = live_doctor.merged_fields
                # merge_dict = {}
                # list = []
                # if merge_list != []:
                #     for i in merge_list:
                #         for j in merge_list[i]:
                #             count = 0
                #             for k, v in j.items():
                #                 if v != "" and v != 0 and v != None:
                #                     merge_dict[count] = {k:v}
                #                     count += 1


                                # if k == "experience":
                                #     for l in v:
                                #         for m, n in l:
                                #             if m == ""




                return render(request, 'data_management/live_doctor_data/edit_live_doctor_data.html', {
                    'tab_listing': 'live_doctor_listing', 'tab': tab,
                    'live_doctor': live_doctor, 'doctor_id': doctor_id,
                    'live_doc_exp_list': live_doc_exp_list, 'live_doc_rewardrecog_list': live_doc_rewardrecog_list,
                    'live_doc_memb_list': live_doc_memb_list, 'live_doc_education_list': live_doc_education_list,
                    'live_doc_manage_account':live_doc_manage_account, 'year_list': year_list,'audio':audio,'video':video,'chat':chat,
                    'reviewer_user_data': reviewer_user_data,
                    'publisher_user_data': publisher_user_data,
                    'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                    'category_obj': category_obj,
                    'curent_cat': curent_cat, 'current_seroff': current_seroff,
                    'current_specialities': current_specialities,
                    'speciality': speciality, 'serviceOffered': serviceOffered, 'zone_obj': zone_obj,
                    'current_zone': current_zone, 'current_zone_location': current_zone_location,
                    'zone_based_locations': zone_based_locations,
                    'appointment_minutes': appointment_minutes, 'list_of_schedules': list_of_schedules,
                    'qualification': qualification, 'talk_to_doc': talk_to_doc, 'talk_fee': talk_fee,
                    'country_obj': country_obj, 'state_obj': state_obj,
                    'totalexperience': totalexperience, 'privateimages': privateimages,
                    'city': city, 'locality': locality, 'asso_obj': asso_obj,
                    'emer_localities_list': emer_localities_list, 'hostport': hostport,
                    'gallery_image_obj_list': gallery_image_obj_list, 'country_obj': country_obj,
                    'state_obj': state_obj,
                    'locality': locality, 'all_departments': all_departments,
                    'org_with_current_dep': org_with_current_dep,
                    'full_list': full_list, 'verified_list': verified_list, 'merge_list': list,
                    'New_SPE_Final_in_association': New_SPE_Final_in_association,
                    'Current_New_SPE_Final_in_live_doctor': Current_New_SPE_Final_in_live_doctor,
                    'New_SO_Final_in_association': New_SO_Final_in_association,
                    'Current_New_SO_Final_in_live_doctor': Current_New_SO_Final_in_live_doctor,
                    'consultancy_schedule': consultancy_schedule
                })

            if tab == '12' and request.method == 'POST':
                field_names = request.POST.getlist('vfields')
                fields_json = live_doctor.verified_fields
                full_list = []
                for i in fields_json:
                    for k, v in i.items():
                        full_list.append(k)
                for i in full_list:
                    if i in field_names:
                        c = -1
                        for x in fields_json:
                            c += 1
                            for k, v in x.items():
                                if k == i:
                                    fields_json[c] = {k: True}
                    else:
                        c = -1
                        for x in fields_json:
                            c += 1
                            for k, v in x.items():
                                if k == i:
                                    fields_json[c] = {k: False}

                checkj = json.dumps(fields_json)
                # live_doctor_data.save(verified_fields=fields_json)
                live_doctor.verified_fields=fields_json
                u = User.objects.get(id=request.user.id)
                p = u.__str__()
                if request.method == 'POST':
                    live_doctor.updated_via = p
                live_doctor.save()
                get_notice = Live_Doctor_Notification.objects.all().order_by("-id")[0]
                get_notice.update_Type = 'Verified Fields Updated'
                get_notice.save()

                messages.success(request, "Successfully Updated Field Meta Data")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            # TAB 12----END-------------------------------------------------


        else:
            return HttpResponseRedirect(reverse('live-doctor-type'))

    except Exception as e:
        #print e
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    raise Http404




####################################################################
# Name - live_doctor_listing_add                                   #
# BY - Jaydeep Verma                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def live_doctor_listing_add(request):

    try:
        try:
            tab = request.GET['tab']
        except:
            tab = '1'
        category_obj = Category.objects.filter(delete=False).order_by('name')
        year_list =["1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982",
                         "1983","1984","1985","1986","1987","1988","1989","1990","1991","1992","1993","1994","1995",
                         "1996","1997","1998","1999","2000", "2001", "2002","2003","2004","2005","2006","2007","2008",
                         "2009","2010","2011","2012","2013","2014","2015","2016","2017"]
    #
    #         live_doctor = Live_Doctor.objects.get(id=doctor_id)
    #         live_doc_exp_list = Live_Doctor_Experience.objects.filter(doctor_id=doctor_id)
    #         live_doc_rewardrecog_list = Live_Doctor_Rewardrecog.objects.filter(doctor_id=doctor_id)
    #         live_doc_memb_list = Live_Doctor_Membership.objects.filter(doctor_id=doctor_id)
    #         live_doc_education_list = Live_Doctor_Education.objects.filter(doctor_id=doctor_id)
    #
        if UserManagement.objects.filter(user_id=request.user.id, is_caller=True):
            user_data = UserManagement.objects.filter(is_reviewer=True, is_doctor_reviewer=True).values('user_id')
            user_publisher_data = []
        elif UserManagement.objects.filter(user_id=request.user.id, is_reviewer=True):
            user_data = UserManagement.objects.filter(is_caller=True, is_doctor_caller=True).values('user_id')
            user_publisher_data = UserManagement.objects.filter(is_publisher=True).values('user_id')
        else:
            user_data = []
            user_publisher_data = []
        reviewer_user_data = User.objects.filter(id__in=user_data, is_active=True)
        publisher_user_data = User.objects.filter(id__in=user_publisher_data, is_active=True)
        valid_choice = ValidateByChoice.objects.all()
        user_data_complete = UserManagement.objects.all()
        zone_obj = Zone.objects.filter(delete=False)


        # TAB 1----START-----------------------------------------------
        if tab == '1' and request.method == 'GET':
            # live_doctor = None
            return render(request, 'data_management/live_doctor_data/add_live_doctor_data.html', {
                'tab': tab,
                'year_list':year_list,
                'reviewer_user_data': reviewer_user_data,
                'publisher_user_data': publisher_user_data,
                'user_data_complete': user_data_complete,
                'valid_choice': valid_choice,
                'category_obj':category_obj,'zone_obj': zone_obj
            })

        elif tab == '1' and request.method == 'POST':

            try:
                zone_id = request.POST['zone'].strip()
                dummy = int(zone_id)
            except:
                zone = None
            try:
                zone_location_id = request.POST['zone_location'].strip()
                dummy = int(zone_location_id)
            except:
                zone_location_id = None

            try:
                live_did = request.POST['live_did'].strip()
            except:
                live_did = ''

            try:
                live_extension = request.POST['live_extension'].strip()
            except:
                live_extension = ''

            try:
                firstName = request.POST['firstName'].strip()
            except:
                firstName = ''

            try:
                lastName = request.POST['lastName'].strip()
            except:
                lastName = ''

            category = request.POST['category'].strip()
            if category and category != '':
                #temp = Category.objects.get(id = int(category))
                #category = temp.name
                temp = int(category)
                category = temp
            else:
                category = None
            try:
                service_offered3 = request.POST.getlist('serviceoffer3')
            except:
                service_offered3 = []
            if service_offered3 and service_offered3 != [] and service_offered3 != '':
                json_list_so = []
                for i in service_offered3:
                    obj = Doctor_ServiceOffered_New.objects.get(id=int(i))
                    json_list_so.append({"id":int(i),"name":obj.name})
                service_offered3 = json_list_so

            try:
                speciality3 = request.POST.getlist('specialty3')
            except:
                speciality3 = []
            if speciality3 and speciality3 != [] and speciality3 != '':
                json_list_spe = []
                for i in speciality3:
                    obj = Doctor_Speciality_New.objects.get(id=int(i))
                    json_list_spe.append({"id": int(i), "name": obj.name})
                speciality3 = json_list_spe


            try:
                gender =  request.POST['gender'].strip()
            except:
                gender = ''
            try:
                DOB = request.POST['DOB'].strip()
            except Exception as e:
                DOB = ''
            try:
                phone = request.POST['phone'].strip()
            except Exception as e:
                phone = ''
            try:
                fax = request.POST['fax'].strip()
            except Exception as e:
                fax = ''
            try:
                mobile = request.POST['mobile'].strip()
            except Exception as e:
                mobile = ''
            try:
                skype = request.POST['skype'].strip()
            except Exception as e:
                skype = ''
            try:
                email = request.POST['email'].strip()
            except Exception as e:
                email = ''
            try:
                secondary_email = request.POST['secondary_email'].strip()
            except Exception as e:
                secondary_email = ''
            import datetime
            now = datetime.datetime.now()
            if firstName != '' and lastName != '' and gender != '' and mobile != '' and email != '' and category :
                if zone_id and zone_location_id :
                    new_live_doctor =  Live_Doctor(firstName=firstName,lastName=lastName,category=category,
                                               new_service_offered_final=service_offered3,new_speciality_final=speciality3,
                                               gender=gender,dob=DOB,phoneNo=phone,fax=fax,mobileNo=mobile,
                                               skypeId=skype,email=email,alternateEmail=secondary_email,zone_id=zone_id,
                                               zone_location_id=zone_location_id,activate=False,edit=True,
                                               createdAt= now,did=live_did,extension=live_extension )
                else:
                    new_live_doctor = Live_Doctor(firstName=firstName, lastName=lastName, category=category,
                                                  new_service_offered_final=service_offered3, new_speciality_final=speciality3,
                                                  gender=gender, dob=DOB, phoneNo=phone, fax=fax, mobileNo=mobile,
                                                  skypeId=skype, email=email, alternateEmail=secondary_email,
                                                  activate=False,edit=True, createdAt= now,did=live_did,extension=live_extension )


            else:
                messages.error(request, "Please Provide all required fields")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            new_live_doctor.save()
            new_associated_data = Live_Doctor_Associated_Data(doctor_id=new_live_doctor.id, talk_to_doc=False,
                                                              provides_home_care=False, is_emergency=False)
            new_associated_data.save()
            #print "id =   ", new_live_doctor.id
            messages.success(request, "New Doctor created Successfully")
            return redirect (reverse('live_doctor_listing_edit',args=[new_live_doctor.id])+"?tab=1")
            #return HttpResponse("Added")

        # TAB 1----END-------------------------------------------------

    except Exception as e:
        #print e
        messages.error(request, "Error")
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    raise Http404




####################################################################
# Name - delete_live_doctor_membership                             #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def delete_live_doctor_membership(request,doctor_id=None,memship_id=None):
    try:
        if doctor_id and memship_id:
            try:
              memship_obj = Live_Doctor_Membership.objects.get(id = int(memship_id),doctor_id=doctor_id)
              memship_obj.save({'DELETE': 'YES'})
              memship_obj.delete()

              messages.success(request, "Membership Object Successfully deleted")
              return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except:
                messages.error(request, "Membership Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Membership ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - delete_live_doctor_experience                             #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def delete_live_doctor_experience(request, doctor_id=None, exp_id=None):
    try:
        if doctor_id and exp_id:
            try:
                exp_obj = Live_Doctor_Experience.objects.get(id=int(exp_id))
                exp_obj.delete()

                messages.success(request, "Experience Object Successfully deleted")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except:
                messages.error(request, "Experience Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Experience ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - delete_live_doctor_experience                             #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def delete_live_doctor_experience(request, doctor_id=None, exp_id=None):
    try:
        if doctor_id and exp_id:
            try:
                exp_obj = Live_Doctor_Experience.objects.get(id=int(exp_id),doctor_id=doctor_id)
                exp_obj.save({'DELETE': 'YES'})
                exp_obj.delete()

                messages.success(request, "Experience Object Successfully deleted")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except:
                messages.error(request, "Experience Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Experience ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404


####################################################################
# Name - delete_live_doctor_reward_recog                           #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def delete_live_doctor_reward_recog(request, doctor_id=None, reward_id=None):
    try:
        if doctor_id and reward_id:
            try:
                reward_obj = Live_Doctor_Rewardrecog.objects.get(id=int(reward_id),doctor_id=doctor_id)
                reward_obj.save({'DELETE': 'YES'})
                reward_obj.delete()

                messages.success(request, "Reward_obj Object Successfully deleted")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except:
                messages.error(request, "Reward Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Reward ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - live_doctor_update_registration                           #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def live_doctor_update_registration(request, doctor_id=None):
    try:
        if doctor_id :
            try:
                doc_obj = Live_Doctor.objects.get(id=int(doctor_id))

                mci = request.POST['mci']
                board = request.POST['board']
                year = request.POST['nishyear']

                doc_obj.mciRegistrationNo = mci.strip()
                doc_obj.registrationBoard = board.strip()
                doc_obj.registrationYear = int(year.strip())
                doc_obj.save()
                get_notice = Live_Doctor_Notification.objects.all().order_by("-id")[0]
                get_notice.update_Type = 'Registration Change'
                get_notice.save()

                messages.success(request, "Registration Details Successfully Updated")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except:
                messages.error(request, "Doctor Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - live_doctor_delete_education                              #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def live_doctor_delete_education(request, doctor_id=None,edu_id=None):
    try:
        if doctor_id:
            try:
                edu_obj = Live_Doctor_Education.objects.get(id=int(edu_id),doctor_id=doctor_id)
                edu_obj.save({'DELETE': 'YES'})
                edu_obj.delete()

                messages.success(request, "Education Object Successfully deleted")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except:
                messages.error(request, "Doctor Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - upload_registration_pic                                   #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def upload_registration_pic(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                doc_obj = Live_Doctor.objects.get(id=int(doctor_id))
                if len(request.FILES) == 1:
                    file = request.FILES['DegreeImage']
                    file_name = request.FILES['DegreeImage'].name
                    #print type(file)
                    #print file_name

                    # "http://" +$sails.hostname + ":" +$sails.port + "/api/v2/doctor/update_degree_cert_picture/" + authToken + "/" + doctor_id + "";

                    global hostname
                    global port
                    url_p3 = "/api/v2/doctor/update_degree_cert_picture/"
                    global authToken
                    doc_id = str(doctor_id) + '/'

                    urlc = hostname + port + url_p3 + authToken + '/' +doc_id
                    #print urlc
                    import requests
                    url = urlc

                    from django.core.files.storage import FileSystemStorage
                    filepath = settings.DOC_REG + '/' + file_name
                    fs = FileSystemStorage()
                    #filename = fs.save(settings.DOC_REG, file)
                    filename = fs.save(filepath, file)
                    uploaded_file_url = fs.url(filename)
                    #print uploaded_file_url

                    try:
                        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                        with open(filepath, "rb") as image_file:
                            #print ">>>>>>>>>   ", type(image_file) , "   <<<<<<<<<<<<<<<<<"
                            files = {'uploadFile': image_file}

                            #cookie = {cookiename: token.value}
                            #r = requests.post(url,headers=headers ,files=files)
                            r = requests.post(url, data={'hit_from':'CMS'} , files=files)
                            #print r.request.headers
                            #print r.status_code
                            #print r.text

                            if r.status_code == 200 or r.status_code == '200':
                                from datetime import datetime
                                now = datetime.now()
                                lvdr = None
                                lvdr = Live_Doctor.objects.get(id=doctor_id)
                                Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                        livedoctor_id=lvdr.id,
                                                                        livedoctorCrAt=lvdr.createdAt,
                                                                        livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                        livedoctorStage=lvdr.stage.stage_name,
                                                                        update_Type='Degree Image Change',
                                                                        updatedBy='CMS')

                                messages.success(request, "Successfully Uploaded Registration Image")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                messages.success(request, "Registration Image Upload Failed")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


                    except Exception as e:
                        messages.error(request, e)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as e:
                #print e
                messages.error(request, e)
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - upload_aadhar_pic                                         #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def upload_aadhar_pic(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                doc_obj = Live_Doctor.objects.get(id=int(doctor_id))
                if len(request.FILES) == 1:
                    file = request.FILES['aadharImage']
                    file_name = request.FILES['aadharImage'].name
                    #print type(file)
                    #print file_name

                    # "http://" +$sails.hostname + ":" +$sails.port + "/api/v2/doctor/update_degree_cert_picture/" + authToken + "/" + doctor_id + "";

                    global hostname
                    global port
                    url_p3 = "/api/v2/doctor/update_aadhar_picture/"
                    global authToken
                    doc_id = str(doctor_id) + '/'

                    urlc = hostname + port + url_p3 + authToken + '/' + doc_id
                    #print urlc
                    import requests
                    url = urlc
                    #print settings.DOC_AADHAR
                    from django.core.files.storage import FileSystemStorage
                    filepath = settings.DOC_AADHAR + '/' + file_name
                    fs = FileSystemStorage()
                    # filename = fs.save(settings.DOC_REG, file)
                    filename = fs.save(filepath, file)
                    uploaded_file_url = fs.url(filename)
                    #print uploaded_file_url

                    try:
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                        with open(filepath, "rb") as image_file:
                            #print ">>>>>>>>>   ", type(image_file), "   <<<<<<<<<<<<<<<<<"
                            files = {'uploadFile': image_file}

                            # cookie = {cookiename: token.value}
                            # r = requests.post(url,headers=headers ,files=files)
                            r = requests.post(url, data={'hit_from':'CMS'} ,files=files)
                            #print r.request.headers
                            #print r.status_code
                            #print r.text

                            if r.status_code == 200 or r.status_code == '200':
                                from datetime import datetime
                                now = datetime.now()
                                lvdr = None
                                lvdr = Live_Doctor.objects.get(id=doctor_id)
                                Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                        livedoctor_id=lvdr.id,
                                                                        livedoctorCrAt=lvdr.createdAt,
                                                                        livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                        livedoctorStage=lvdr.stage.stage_name,
                                                                        update_Type='Aadhar Image Change',
                                                                        updatedBy='CMS')

                                messages.success(request, "Successfully Uploaded Aadhar Image")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                messages.success(request, "Aadhar Image Upload Failed")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


                    except Exception as e:
                        messages.error(request, e)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as e:
                #print e
                messages.error(request, e)
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - upload_stamp_pic                                          #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def upload_stamp_pic(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                doc_obj = Live_Doctor.objects.get(id=int(doctor_id))
                if len(request.FILES) == 1:
                    file = request.FILES['StampImage']
                    file_name = request.FILES['StampImage'].name

                    global hostname
                    global port
                    url_p3 = "/api/v2/doctor/update_stamp_picture/"
                    global authToken
                    doc_id = str(doctor_id) + '/'

                    urlc = hostname + port + url_p3 + authToken + '/' +doc_id
                    import requests
                    url = urlc
                    #print settings.DOC_STAMP
                    from django.core.files.storage import FileSystemStorage
                    filepath = settings.DOC_STAMP + '/' + file_name
                    fs = FileSystemStorage()
                    # filename = fs.save(settings.DOC_REG, file)
                    filename = fs.save(filepath, file)
                    uploaded_file_url = fs.url(filename)
                    # print uploaded_file_url

                    try:
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                        with open(filepath, "rb") as image_file:
                            # print ">>>>>>>>>   ", type(image_file), "   <<<<<<<<<<<<<<<<<"
                            files = {'uploadFile': image_file}

                            # cookie = {cookiename: token.value}
                            # r = requests.post(url,headers=headers ,files=files)
                            r = requests.post(url, data={'hit_from':'CMS'} , files=files)
                            # print r.request.headers
                            # print r.status_code
                            # print r.text

                            if r.status_code == 200 or r.status_code == '200':
                                from datetime import datetime
                                now = datetime.now()
                                lvdr = None
                                lvdr = Live_Doctor.objects.get(id=doctor_id)
                                Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                        livedoctor_id=lvdr.id,
                                                                        livedoctorCrAt=lvdr.createdAt,
                                                                        livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                        livedoctorStage=lvdr.stage.stage_name,
                                                                        update_Type='Stamp Image Change',
                                                                        updatedBy='CMS')

                                messages.success(request, "Successfully Uploaded Stamp Image")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                messages.success(request, "Stamp Image Upload Failed")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


                    except Exception as e:
                        messages.error(request, e)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as e:
                #print e
                messages.error(request, e)
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - upload_signature_pic                                      #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def upload_signature_pic(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                doc_obj = Live_Doctor.objects.get(id=int(doctor_id))
                if len(request.FILES) == 1:
                    file = request.FILES['SignatureImage']
                    file_name = request.FILES['SignatureImage'].name

                    global hostname
                    global port
                    url_p3 = "/api/v2/doctor/update_signature_picture/"
                    global authToken
                    doc_id = str(doctor_id) + '/'

                    urlc = hostname + port + url_p3 + authToken + '/' +doc_id
                    import requests
                    url = urlc
                    print settings.DOC_SIGNATURE
                    from django.core.files.storage import FileSystemStorage
                    filepath = settings.DOC_SIGNATURE + '/' + file_name
                    fs = FileSystemStorage()
                    # filename = fs.save(settings.DOC_REG, file)
                    filename = fs.save(filepath, file)
                    uploaded_file_url = fs.url(filename)
                    # print uploaded_file_url

                    try:
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                        with open(filepath, "rb") as image_file:
                            # print ">>>>>>>>>   ", type(image_file), "   <<<<<<<<<<<<<<<<<"
                            files = {'uploadFile': image_file}

                            # cookie = {cookiename: token.value}
                            # r = requests.post(url,headers=headers ,files=files)
                            r = requests.post(url, data={'hit_from':'CMS'} , files=files )
                            # print r.request.headers
                            # print r.status_code
                            # print r.text

                            if r.status_code == 200 or r.status_code == '200':
                                from datetime import datetime
                                now = datetime.now()
                                lvdr = None
                                lvdr = Live_Doctor.objects.get(id=doctor_id)
                                Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                        livedoctor_id=lvdr.id,
                                                                        livedoctorCrAt=lvdr.createdAt,
                                                                        livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                        livedoctorStage=lvdr.stage.stage_name,
                                                                        update_Type='Signature Image Change',
                                                                        updatedBy='CMS')

                                messages.success(request, "Successfully Uploaded Signature Image")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                messages.success(request, "Signature Image Upload Failed")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


                    except Exception as e:
                        messages.error(request, e)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as e:
                # print e
                messages.error(request, e)
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - upload_profile_pic                                        #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def upload_profile_pic(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                doc_obj = Live_Doctor.objects.get(id=int(doctor_id))
                if len(request.FILES) == 1:
                    file = request.FILES['ProfileImage']
                    file_name = request.FILES['ProfileImage'].name

                    global hostname
                    global port
                    url_p3 = "/api/v2/doctor/update_profile_picture/"
                    global authToken
                    doc_id = str(doctor_id) + '/'

                    urlc = hostname + port + url_p3 + authToken + '/' + doc_id
                    import requests
                    url = urlc
                    #print settings.DOC_PROFILE
                    from django.core.files.storage import FileSystemStorage
                    filepath = settings.DOC_PROFILE + '/' + file_name
                    fs = FileSystemStorage()
                    # filename = fs.save(settings.DOC_REG, file)
                    filename = fs.save(filepath, file)
                    uploaded_file_url = fs.url(filename)
                    # print uploaded_file_url

                    try:
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0',
                        'hit_from':'CMS'}
                        with open(filepath, "rb") as image_file:
                            # print ">>>>>>>>>   ", type(image_file), "   <<<<<<<<<<<<<<<<<"
                            files = {'uploadFile': image_file}

                            # cookie = {cookiename: token.value}
                            # r = requests.post(url,headers=headers ,files=files)
                            r = requests.post(url,  data={'hit_from':'CMS'}, files=files)
                            #r = requests.post(url, files=files)
                            #print "@@@@@@@@@@@@@@@@@@@@@  "
                            #print r.request.body
                            #print "  @@@@@@@@@@@@@@@@@@@@@@@@@  "
                            # print r.request.headers
                            # print r.status_code
                            # print r.text

                            if r.status_code == 200 or r.status_code == '200':
                                from datetime import datetime
                                now = datetime.now()
                                lvdr = None
                                lvdr = Live_Doctor.objects.get(id=doctor_id)
                                Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                        livedoctor_id=lvdr.id,
                                                                        livedoctorCrAt=lvdr.createdAt,
                                                                        livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                        livedoctorStage=lvdr.stage.stage_name,
                                                                        update_Type='Profile Image Change',
                                                                        updatedBy='CMS')

                                messages.success(request, "Successfully Uploaded Profile Image")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                messages.success(request, "Profile Image Upload Failed")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


                    except Exception as e:
                        messages.error(request, e)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as e:
                # print e
                messages.error(request, e)
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - upload_gallery_pic                                        #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def upload_gallery_pic(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                doc_obj = Live_Doctor.objects.get(id=int(doctor_id))
                if len(request.FILES) == 1:
                    file = request.FILES['galleryrImage']
                    file_name = request.FILES['galleryrImage'].name

                    global hostname
                    global port
                    url_p3 = "/api/v2/doctor/add_gallery_image/"
                    global authToken
                    doc_id = str(doctor_id) + '/'

                    urlc = hostname + port + url_p3 + authToken + '/' + doc_id
                    import requests
                    url = urlc
                    #print settings.DOC_GALLERY
                    from django.core.files.storage import FileSystemStorage
                    filepath = settings.DOC_GALLERY + '/' + file_name
                    fs = FileSystemStorage()
                    # filename = fs.save(settings.DOC_REG, file)
                    filename = fs.save(filepath, file)
                    uploaded_file_url = fs.url(filename)
                    # print uploaded_file_url

                    try:
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                        with open(filepath, "rb") as image_file:
                            # print ">>>>>>>>>   ", type(image_file), "   <<<<<<<<<<<<<<<<<"
                            files = {'uploadFile': image_file}

                            # cookie = {cookiename: token.value}
                            # r = requests.post(url,headers=headers ,files=files)
                            r = requests.post(url, data={'hit_from':'CMS'} ,files=files)
                            # print r.request.headers
                            # print r.status_code
                            # print r.text

                            if r.status_code == 200 or r.status_code == '200':
                                from datetime import datetime
                                now = datetime.now()
                                lvdr = None
                                lvdr = Live_Doctor.objects.get(id=doctor_id)
                                Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                        livedoctor_id=lvdr.id,
                                                                        livedoctorCrAt=lvdr.createdAt,
                                                                        livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                        livedoctorStage=lvdr.stage.stage_name,
                                                                        update_Type='Gallery Image Change',
                                                                        updatedBy='CMS')

                                messages.success(request, "Successfully Uploaded Gallery Image")
                                return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=2")
                            else:
                                messages.success(request, "Gallery Image Upload Failed")
                                return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=2")


                    except Exception as e:
                        messages.error(request, e)
                        return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=2")

            except Exception as e:
                # print e
                messages.error(request, e)
                return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=2")
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404


####################################################################
# Name - live_doctor_publisher_listing                             #
# Owner - Visnu Badal                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def live_doctor_publisher_listing(request):
    try:
        # try:
        #     stage_id = request.GET['stage_id']
        # except:
        #     stage_id = None
        # try:
        #     search_name = request.GET['search_name']
        # except:
        #     search_name = None
        # assign_id = UserManagement.objects.get(user_id=request.user.id)
        # stage_data_obj = Stage.objects.all()[3:5]
        # category_data = Category.objects.all().order_by('name')
        # category_filter = False
        # try:
        #     category_id = request.GET['category']
        # except:
        #     category_id = None
        # if assign_id.is_publisher is True:
        #     publisher_id = request.user.id
        # else:
        #     publisher_id = 0
        #
        # if publisher_id and stage_id:
        #     doctor_obj = Live_Doctor.objects.filter(stage_id=int(stage_id), current_user_id=request.user.id).order_by('name')
        # elif publisher_id and search_name:
        #     doctor_obj = Live_Doctor.objects.filter(name__icontains=search_name, current_user_id=request.user.id).order_by('name')
        # elif publisher_id != None and stage_id == None and search_name == None:
        #     if category_id:
        #         doctor_obj = Doctor.objects.filter(Q(stage_id__gte=4), Q(category_id=category_id),
        #                                            Q(current_user_id=request.user.id),
        #                                            Q(is_disable=False)).order_by('name')
        #         category_filter = int(category_id)
        #     else:
        #         doctor_obj = Doctor.objects.filter(stage_id__gte=4, current_user_id=request.user.id,
        #                                            is_disable=False).order_by('name')
        #     if len(doctor_obj) == 0:
        #         messages.error(request, "No Doctor found")
        #         return render(request, 'publisher/doctor/doctor_listing_publisher.html',
        #                       {'tab_listing': 'doctor_listing', 'tab': 'publish_doctor_data',
        #                        'stage_data': stage_data_obj,
        #                        'category_obj': category_data, 'category_filter': category_filter,
        #                        'category': category_id,
        #                        'stage_id': stage_id, 'search_name': search_name})

        #doctor_obj = Live_Doctor.objects.filter(activate=False,is_disable=False,edit=True,current_user_id= request.user.id).order_by('-createdAt')
        doctor_obj = Live_Doctor.objects.filter(is_disable=False,current_user_id= request.user.id).order_by('-createdAt')

        paginator = Paginator(doctor_obj, 50)
        page = request.GET.get('page')
        try:
            doctor_obj = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            doctor_obj = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            doctor_obj = paginator.page(paginator.num_pages)
        return render(request, 'publisher/live_doctor/live_doctor_listing_publisher.html',
                      dict(doctor=doctor_obj, tab_listing='live_doctor_listing', tab='live_doctor_listing'
                           ))
        # else:
        #     return HttpResponseRedirect(reverse('users-logout'))
    except Exception as e:
        # print e
        raise Http404

####################################################################
# Name - create user Account                                       #
# BY - Jaydeep                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def create_user_account(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                doc_obj = Live_Doctor.objects.get(id=int(doctor_id))
                if doc_obj:
                    #print request
                    inputJSON = {}
                    #email = request.POST['email']
                    #gender = request.POST['gender']
                    password = request.POST['setp']
                    cPassword = request.POST['confpa']
                    #mobileNo = request.POST['mobile']
                    # firstName = request.POST['firstName']
                    # lastName = request.POST['lastName']
                    global authToken

                    inputJSON.update({'doctor_id': int(doctor_id)})
                    inputJSON.update({'userType': "doctor"})
                    #inputJSON.update({'email': email.strip()})
                    #inputJSON.update({'gender': gender.strip()})
                    inputJSON.update({'password': password.strip()})
                    inputJSON.update({'cPassword': cPassword.strip()})
                    #inputJSON.update({'mobileNo': mobileNo.strip()})
                    #inputJSON.update({'firstName': firstName.strip()})
                    #inputJSON.update({'lastName': lastName.strip()})
                    inputJSON.update({'terms_condition': True})
                    inputJSON.update({'authToken': authToken})
                    temp = json.dumps(inputJSON)
                    inputJSON = json.loads(temp)
                    global hostname
                    global port
                    url_p3 = "/api/v2/doctor/sign-up-from-cms/"
                    urlc = hostname + port + url_p3
                    #print urlc
                    import requests
                    url = urlc

                    try:
                        r = requests.post(url, json=inputJSON,headers={'hit_from':'CMS'})
                        tempresp = json.dumps(r.text)
                        #print r.text
                        #print type(r.text)
                        resp = json.loads(r.text)
                        #print type(resp)
                        #print resp
                        if (r.status_code == 200 or r.status_code == '200'):
                            if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                                import datetime as datetimeforthis
                                now = datetimeforthis.datetime.now()
                                lvdr = None
                                lvdr = Live_Doctor.objects.get(id=doctor_id)
                                Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                        livedoctor_id=lvdr.id,
                                                                        livedoctorCrAt=lvdr.createdAt,
                                                                        livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                        livedoctorStage=lvdr.stage.stage_name,
                                                                        update_Type='Doctor Login Created',
                                                                        updatedBy='CMS')

                                messages.success(request, "Account Created successfully...!!!")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                messages.error(request, resp['statusMessage'])
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                        else:
                            messages.error(request, "Something bad happend...!!!")
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                    except Exception as e:
                        messages.error(request, "Exception")
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as e:
                #print e
                messages.error(request, e)
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - activate_doctor_account                                   #
# BY - Jaydeep                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def activate_doctor_account(request, doctor_id):
    try:
        if doctor_id:
            global hostname
            global port
            url_p3 = "/api/v2/user/user-activation"
            urlc = hostname + port + url_p3
            #print urlc
            import requests
            url = urlc

            try:
                r = requests.post(url, json={'doctor_id': int(doctor_id),'hit_from':'CMS'},headers={'hit_from':'CMS'})

                #tempresp = json.dumps(r.text)
                #print r.text
                #print type(r.text)
                resp = json.loads(r.text)
                #print type(resp)
                #print resp

                if r.status_code == 200 or r.status_code == '200':

                    if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                        import datetime as datetimeforthis
                        now = datetimeforthis.datetime.now()
                        lvdr = None
                        lvdr = Live_Doctor.objects.get(id=doctor_id)
                        Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                livedoctor_id=lvdr.id, livedoctorCrAt=lvdr.createdAt,
                                                                livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                livedoctorStage=lvdr.stage.stage_name,
                                                                update_Type='Doctor Account Activated',
                                                                updatedBy='CMS')

                        messages.success(request, "Account activated successfully...!!!")
                        return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=8")

                    else:
                        messages.error(request, resp['statusMessage'])
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                else:
                    messages.success(request, "Account activation has been failed...!!!")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as e:
                messages.error(request, "Exception")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


    except Exception as e:
        raise Http404

####################################################################
# Name - deactivate_doctor_account                                 #
# BY - Jaydeep                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def deactivate_doctor_account(request, doctor_id):
    try:
        if doctor_id:
            global hostname
            global port
            url_p3 = "/api/v2/user/user-deactivation"
            urlc = hostname + port + url_p3
            #print urlc
            import requests
            url = urlc

            try:
                r = requests.post(url, json={'doctor_id': int(doctor_id),'hit_from':'CMS'},headers={'hit_from':'CMS'})
                tempresp = json.dumps(r.text)
                #print r.text
                #print type(r.text)
                resp = json.loads(r.text)
                #print type(resp)
                #print resp

                if r.status_code == 200 or r.status_code == '200':

                    if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                        import datetime as datetimeforthis
                        now = datetimeforthis.datetime.now()
                        lvdr = None
                        lvdr = Live_Doctor.objects.get(id=doctor_id)
                        Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                livedoctor_id=lvdr.id, livedoctorCrAt=lvdr.createdAt,
                                                                livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                livedoctorStage=lvdr.stage.stage_name,
                                                                update_Type='Doctor Account De-Activated',
                                                                updatedBy='CMS')

                        messages.success(request, "Account deactivated successfully...!!!")
                        return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=8")
                    else:
                        messages.error(request, resp['statusMessage'])
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                else:
                    messages.success(request, "Account deactivation has been failed...!!!")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


            except Exception as e:
                messages.error(request, "Exception")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


    except Exception as e:
        raise Http404

####################################################################
# Name - live_doctor_delete_schedule                               #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def live_doctor_delete_schedule(request, doctor_id=None, sch_id=None):
    try:
        if doctor_id and sch_id:
            #print type(doctor_id)
            #print type(sch_id)

            try:
                template_service = {
                    'hit_from': 'CMS',
                    "doctor_id": 0,
                    "authToken": "",
                    "id": 0,
                }

                scheduleobj = Live_Doctor_Commonworkschedule.objects.get(id=int(sch_id), doctor_id=doctor_id)
                lvdoc = Live_Doctor.objects.get(id=int(doctor_id))
                organi = OrganisationName.objects.get(id=scheduleobj.clinic_id)
                Key_CC_RANK = organi.city_id.__str__() + '-' + lvdoc.category.__str__()
                key_CLC_RANK = organi.city_id.__str__() + '-' + organi.locality_id.__str__() + '-' + lvdoc.category.__str__()
                rrank = None

                # scheduleobj.delete()
                global authToken
                template_service['authToken'] = authToken
                template_service['doctor_id'] = int(doctor_id)
                template_service['id'] = int(sch_id)

                global hostname
                global port
                url_p3 = "/api/v2/doctor/delete_work_schedule/"
                urlc = hostname + port + url_p3
                # print urlc
                import requests
                url = urlc
                try:
                    r = requests.post(url, json=template_service,headers={'hit_from':'CMS'})
                    # tempresp = json.dumps(r.text)
                    # print r.text
                    # print type(r.text)
                    resp = json.loads(r.text)
                    # print type(resp)
                    # print resp

                    if r.status_code == 200 or r.status_code == '200':

                        if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                            now = datetime.now()
                            lvdr = None
                            lvdr = Live_Doctor.objects.get(id=doctor_id)
                            Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                    livedoctor_id=lvdr.id,
                                                                    livedoctorCrAt=lvdr.createdAt,
                                                                    livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                    livedoctorStage=lvdr.stage.stage_name,
                                                                    update_Type='Schedule Deleted',
                                                                    updatedBy='CMS')

                            CC_exists = False
                            CLC_exists = False
                            all_schedules_of_this_doctor = Live_Doctor_Commonworkschedule.objects.filter(doctor_id=doctor_id).exclude(id=int(sch_id))
                            all_schedules_of_this_doctor =  [x for x in all_schedules_of_this_doctor if x.status != 'delete']
                            if all_schedules_of_this_doctor != [] and all_schedules_of_this_doctor != None:
                                for schs in all_schedules_of_this_doctor:
                                    temp_lvdoc = Live_Doctor.objects.get(id=schs.doctor_id)
                                    temp_organi = OrganisationName.objects.get(id=schs.clinic_id)
                                    tempKey_CC_RANK = temp_organi.city_id.__str__() + '-' + temp_lvdoc.category.__str__()
                                    tempkey_CLC_RANK = temp_organi.city_id.__str__() + '-' + temp_organi.locality_id.__str__() + '-' + temp_lvdoc.category.__str__()
                                    if tempKey_CC_RANK == Key_CC_RANK:
                                        CC_exists = True
                                    if tempkey_CLC_RANK ==  key_CLC_RANK:
                                        CLC_exists = True
                            current_CCRANK = None
                            current_CLCRANK = None

                            if CC_exists == False and CLC_exists == False:
                                current_CCRANK = lvdoc.subscribed_rank['CC_RANK_list'][Key_CC_RANK]
                                current_CLCRANK = lvdoc.subscribed_rank['CLC_RANK_list'][key_CLC_RANK]
                                del lvdoc.subscribed_rank['CC_RANK_list'][Key_CC_RANK]
                                del lvdoc.subscribed_rank['CLC_RANK_list'][key_CLC_RANK]
                                # Delkete the ranks from Occupied ranks too
                                try:
                                    cc_subs_occu_rank_obj = subs_occupied_cc_ranks.objects.get(key=Key_CC_RANK)
                                except Exception as e:
                                    cc_subs_occu_rank_obj = "$$$$"
                                rankl = None
                                if cc_subs_occu_rank_obj != "$$$$":
                                    rankl = cc_subs_occu_rank_obj.ranklist
                                    if rankl != None and rankl != '':
                                        while current_CCRANK in rankl:
                                            rankl.remove(current_CCRANK)
                                    rankl.sort()
                                    cc_subs_occu_rank_obj.ranklist = rankl
                                    cc_subs_occu_rank_obj.save()

                                try:
                                    clc_subs_occu_rank_obj = subs_occupied_clc_ranks.objects.get(key=key_CLC_RANK)
                                except Exception as e:
                                    clc_subs_occu_rank_obj = "$$$$"
                                rankl = None
                                if clc_subs_occu_rank_obj != "$$$$":
                                    rankl = clc_subs_occu_rank_obj.ranklist
                                    if rankl != None and rankl != '':
                                        while current_CLCRANK in rankl:
                                            rankl.remove(current_CLCRANK)
                                    rankl.sort()
                                    clc_subs_occu_rank_obj.ranklist = rankl
                                    clc_subs_occu_rank_obj.save()

                                messages.success(request,"Successfully Updated Schedule and BOTH CC and CLC Subscribed ranks deleted")
                            if CC_exists == False and CLC_exists == True:
                                current_CCRANK = lvdoc.subscribed_rank['CC_RANK_list'][Key_CC_RANK]
                                del lvdoc.subscribed_rank['CC_RANK_list'][Key_CC_RANK]
                                # Delkete the ranks from Occupied ranks too
                                try:
                                    cc_subs_occu_rank_obj = subs_occupied_cc_ranks.objects.get(key=Key_CC_RANK)
                                except Exception as e:
                                    cc_subs_occu_rank_obj = "$$$$"
                                rankl = None
                                if cc_subs_occu_rank_obj != "$$$$":
                                    rankl = cc_subs_occu_rank_obj.ranklist
                                    if rankl != None and rankl != '':
                                        while current_CCRANK in rankl:
                                            rankl.remove(current_CCRANK)
                                    rankl.sort()
                                    cc_subs_occu_rank_obj.ranklist = rankl
                                    cc_subs_occu_rank_obj.save()
                                messages.success(request,"Successfully Updated Schedule and ONLY CC Subscribed rank deleted NOT CLC Subscribed rank")
                            if CC_exists == True and CLC_exists == False:
                                current_CLCRANK = lvdoc.subscribed_rank['CLC_RANK_list'][key_CLC_RANK]
                                del lvdoc.subscribed_rank['CLC_RANK_list'][key_CLC_RANK]
                                try:
                                    clc_subs_occu_rank_obj = subs_occupied_clc_ranks.objects.get(key=key_CLC_RANK)
                                except Exception as e:
                                    clc_subs_occu_rank_obj = "$$$$"
                                rankl = None
                                if clc_subs_occu_rank_obj != "$$$$":
                                    rankl = clc_subs_occu_rank_obj.ranklist
                                    if rankl != None and rankl != '':
                                        while current_CLCRANK in rankl:
                                            rankl.remove(current_CLCRANK)
                                    rankl.sort()
                                    clc_subs_occu_rank_obj.ranklist = rankl
                                    clc_subs_occu_rank_obj.save()
                                messages.success(request,"Successfully Updated Schedule and ONLY CLC Subscribed rank deleted NOT CC Subcribed rank")
                            if CC_exists == True and CLC_exists == True:
                                messages.success(request, "Successfully Updated Schedule But Subcribed Ranks, Both CC and CLC Subscribed ranks not deleted")
                            lvdoc.save()
                            return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")

                        else:
                            messages.error(request, resp['statusMessage'])
                            messages.success(request, "Updated Schedule But Problem with timing and time_obj")
                            return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")

                    else:
                        messages.error(request, resp['statusMessage'])
                        messages.success(request, "Updated Schedule But Problem with timing and time_obj")
                        return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=5")

                except Exception as e:
                    messages.error(request, e)
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


                messages.success(request, "Schedule Object Successfully deleted")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as E:
                messages.error(request, "Schedule Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Schedule ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - live_doctor_add_qualification                             #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def live_doctor_add_qualification(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                asso_obj = Live_Doctor_Associated_Data.objects.get(doctor_id = doctor_id)
                qualification = request.POST['qualification']
                asso_obj.qualification_data = qualification
                asso_obj.save()
                get_notice = Live_Doctor_Notification.objects.all().order_by("-id")[0]
                get_notice.update_Type = 'Qualification Updated'
                get_notice.save()
                messages.success(request, "Qualification data Successfully saved")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as E:
                messages.error(request, "Association Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

# ####################################################################
# # Name - live_doctor_talk_to_doc                                   #
# # BY - Nishank Gupta                                               #
# ####################################################################
# @login_required(login_url='/')
# @csrf_exempt
# @require_POST
# def live_doctor_talk_to_doc(request, doctor_id=None):
#     try:
#         if doctor_id:
#             try:
#                 asso_obj = Live_Doctor_Associated_Data.objects.get(doctor_id=doctor_id)
#
#                 try:
#                     talk_to_doc = request.POST['talk_to_doc'].strip()
#                 except:
#                     talk_to_doc = 0
#
#                 try:
#                     audio = request.POST['audio'].strip()
#                 except:
#                     audio = 0
#
#                 try:
#                     video = request.POST['video'].strip()
#                 except:
#                     video = 0
#
#                 try:
#                     chat = request.POST['chat'].strip()
#                 except:
#                     chat = 0
#
#                 if audio == 'on' or audio =='1':
#                     audio = True
#                 else:
#                     audio = False
#
#                 if video == 'on' or video =='1':
#                     video = True
#                 else:
#                     video = False
#
#                 if chat == 'on' or chat == '1':
#                     chat = True
#                 else:
#                     chat = False
#
#                 if talk_to_doc == 'on' or talk_to_doc =='1':
#                     talk_to_doc = True
#                 else:
#                     talk_to_doc = False
#
#                 if talk_to_doc == True:
#                     talk_fee = request.POST['talk_fee'].strip()
#                 else:
#                     talk_fee = ''
#                 asso_obj.talk_to_doc = talk_to_doc
#                 asso_obj.talk_fee = talk_fee
#                 asso_obj.audio= audio
#                 asso_obj.video = video
#                 asso_obj.chat = chat
#                 asso_obj.save()
#                 get_notice = Live_Doctor_Notification.objects.all().order_by("-id")[0]
#                 get_notice.update_Type = '"Talk To Doc" Updated'
#                 get_notice.save()
#                 messages.success(request, "Talk To Doc data Successfully Updated")
#                 return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
#
#             except Exception as E:
#                 messages.error(request, "Association Object Not found")
#                 return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
#         else:
#             messages.error(request, "Doctor ID Not Provided")
#             return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
#
#     except Exception as e:
#         raise Http404

####################################################################
# Name - live_doctor_talk_to_doc                                   #
# BY - Nishank Gupta                                               #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def live_doctor_talk_to_doc(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                asso_obj = Live_Doctor_Associated_Data.objects.get(doctor_id=doctor_id)
                print request.POST
                try:
                    talk_to_doc = request.POST['talk_to_doc'].strip()
                except:
                    talk_to_doc = 0

                if talk_to_doc == 'on' or talk_to_doc =='1':
                    talk_to_doc = True
                    try:
                        talk_fee = request.POST['talk_fee'].strip()
                    except:
                        talk_fee = ''
                else:
                    talk_to_doc = False
                    talk_fee = ''


                try:
                    chat = request.POST['chatService'].strip()
                except:
                    chat = 0

                if chat == 'on' or chat == '1':
                    chat = True
                    try:
                        chat_fee = request.POST['chat_fee'].strip()
                    except:
                        chat_fee = ''
                    try:
                        chat_days = request.POST['chat_days'].strip()
                    except:
                        chat_days = ''
                else:
                    chat = False
                    chat_fee = ''
                    chat_days = ''


                try:
                    audio = request.POST['audioService'].strip()
                except:
                    audio = 0

                if audio == 'on' or audio == '1':
                    audio = True
                    try:
                        audio_fee = request.POST['audio_fee'].strip()
                    except:
                        audio_fee = ''
                    try:
                        audio_minutes = request.POST['audio_minutes'].strip()
                    except:
                        audio_minutes = ''
                else:
                    audio = False
                    audio_fee = ''
                    audio_minutes = ''


                try:
                    video = request.POST['videoService'].strip()
                except:
                    video = 0

                if video == 'on' or video == '1':
                    video = True
                    try:
                        video_fee = request.POST['video_fee'].strip()
                    except:
                        video_fee = ''
                    try:
                        video_minutes = request.POST['video_minutes'].strip()
                    except:
                        video_minutes = ''
                else:
                    video = False
                    video_fee = ''
                    video_minutes = ''

                asso_obj.talk_to_doc = talk_to_doc
                asso_obj.talk_fee = talk_fee

                asso_obj.chat = chat
                asso_obj.chat_fee = chat_fee
                asso_obj.chat_days =  chat_days

                asso_obj.audio= audio
                asso_obj.audio_fee= audio_fee
                asso_obj.audio_minutes= audio_minutes

                asso_obj.video = video
                asso_obj.video_fee = video_fee
                asso_obj.video_minutes = video_minutes
                asso_obj.save()


                schedule_obj = Live_Doctor_Associated_Data.objects.filter(doctor_id=doctor_id)
                if len(schedule_obj) == 1:
                    add_schedule_dict = {}
                    timing_list = []
                    schedule_data = schedule_obj[0].consultancy_schedule
                    if schedule_data == None or schedule_data == {} or schedule_data == []:
                        schedule_data = []

                    start_time = request.POST.getlist('totime[]')
                    end_time = request.POST.getlist('fromtime[]')

                    from_day = request.POST.getlist('fromDay[]')
                    to_day = request.POST.getlist('toDay[]')

                    schedule_chat = request.POST.getlist("chatvalues")[0].split(',')
                    schedule_audio = request.POST.getlist('audiovalues')[0].split(',')
                    schedule_video = request.POST.getlist('videovalues')[0].split(',')

                    #unique_id = str(uuid.uuid4())


                    for i in range(0, len(from_day)):
                        unique_id = str(uuid.uuid4())
                        add_schedule_dict = {}
                        timing_dict = {}
                        timing_list = []
                        timing_dict['start_time'] = start_time[i] #+ ' ' + str(start_period[i]).upper()
                        timing_dict['end_time'] = end_time[i] #+ ' ' + str(end_period[i]).upper()
                        timing_list.append(timing_dict)
                        add_schedule_dict['from_day'] = from_day[i]
                        add_schedule_dict['to_day'] = to_day[i]
                        add_schedule_dict['timing'] = timing_list
                        add_schedule_dict['id'] = unique_id

                        if schedule_chat[i] == 'Yes':
                            add_schedule_dict['chat_available'] = True
                        else:
                            add_schedule_dict['chat_available'] = False

                        if schedule_audio[i] == 'Yes':
                            add_schedule_dict['audio_available'] = True
                        else:
                            add_schedule_dict['audio_available'] = False

                        if schedule_video[i] == 'Yes':
                            add_schedule_dict['video_available'] = True
                        else:
                            add_schedule_dict['video_available'] = False
                        schedule_data.append(add_schedule_dict)
                    schedule_obj.update(consultancy_schedule=schedule_data)




                get_notice = Live_Doctor_Notification.objects.all().order_by("-id")[0]
                get_notice.update_Type = '"Talk To Doc" Updated'
                get_notice.save()
                messages.success(request, "Talk To Doc data Successfully Updated")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as E:
                messages.error(request, "Association Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404


###################################################################
# Name - live_doctor_emergency                                    #
# BY - Nishank Gupta                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def live_doctor_emergency(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                asso_obj = Live_Doctor_Associated_Data.objects.get(doctor_id=doctor_id)

                emergency_fee = request.POST['emergency_fee'].strip()
                try:
                    country_id = request.POST['country_id'].strip()
                    country_id = int(country_id)
                except:
                    country_id = None
                try:
                    state_id = request.POST['state_id'].strip()
                    state_id = int(state_id)
                except:
                    state_id = None
                try:
                    city_id = request.POST['city_id'].strip()
                    city_id = int(city_id)
                except:
                    city_id = None
                localities = request.POST.getlist('locality_id')


                try:
                    is_emergency = request.POST['is_emergency'].strip()
                except:
                    is_emergency = 0
                if is_emergency == '1':
                    is_emergency = True
                else:
                    is_emergency = False


                if is_emergency == True:
                    if localities and localities != []:
                        loc_str = ''
                        count = 0
                        for i in localities:
                            count += 1
                            if count == 1:
                                loc_str = loc_str + i
                            else:
                                loc_str = loc_str + ',' + i
                        localities = loc_str
                    else:
                        localities = ''

                else:
                    emergency_fee = ''
                    country_id = None
                    state_id = None
                    city_id = None
                    localities = ''

                #######POINTS CODE#######
                if asso_obj.is_emergency == False and is_emergency == True :
                    ldoc = Live_Doctor.objects.get(id=doctor_id)
                    ldoc.emergency_points =  5
                    ldoc.save()
                elif asso_obj.is_emergency == True and is_emergency == False:
                    ldoc = Live_Doctor.objects.get(id=doctor_id)
                    ldoc.emergency_points = 0
                    ldoc.save()
                #######POINTS CODE END#######

                asso_obj.is_emergency = is_emergency
                asso_obj.localities = localities
                asso_obj.country_id = country_id
                asso_obj.state_id = state_id
                asso_obj.city_id = city_id
                asso_obj.emergency_fee = emergency_fee

                asso_obj.save()
                get_notice = Live_Doctor_Notification.objects.all().order_by("-id")[0]
                get_notice.update_Type = 'Emergency Services Updated'
                get_notice.save()
                messages.success(request, "Talk To Doc data Successfully Updated")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as E:
                messages.error(request, "Association Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

###################################################################
# Name - delete_live_doc_gallery_images                           #
# BY - Nishank Gupta                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def delete_live_doc_gallery_images(request, doctor_id=None):
    try:
        if doctor_id:
            image_obj_id_list = request.POST.getlist('Images')
            image_obj_id_list = [int(img) for img in image_obj_id_list]
            if image_obj_id_list != []:
                # for obj_id in image_obj_id_list :
                #     ooo =  Live_Doctor_Imagegallery.objects.get(id = int(obj_id))
                #     ooo.delete()

                image_list = {
                    'hit_from': 'CMS',
                    "id": [],
                    "doctor_id":int(doctor_id),
                    "authToken": "",
                }
                image_list['id'] = image_obj_id_list
                image_list['authToken'] = authToken
                global hostname
                global port
                url_p3 = "/api/v2/doctor/delete_gallery_image"
                urlc = hostname + port + url_p3
                print urlc
                import requests
                url = urlc
                try:
                    r = requests.post(url, json=image_list, headers={'hit_from': 'CMS'})
                    resp = json.loads(r.text)
                    print resp

                    if r.status_code == 200 or r.status_code == '200':
                        if resp['statusCode'] == 200 or resp['statusCode'] == '200':

                            from datetime import datetime
                            now = datetime.now()
                            lvdr = None
                            lvdr = Live_Doctor.objects.get(id=doctor_id)
                            Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                    livedoctor_id=lvdr.id,
                                                                    livedoctorCrAt=lvdr.createdAt,
                                                                    livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                    livedoctorStage=lvdr.stage.stage_name,
                                                                    update_Type='Gallery Image Delete',
                                                                    updatedBy='CMS')
                            messages.success(request, "Successfully Deleted Gallery Images")
                            return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=2")
                        else:
                            messages.error(request, resp['statusMessage'])
                            return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=2")
                    else:
                        messages.success(request, "Image(s) Not Deleted")
                        return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=2")
                except Exception as e:
                    messages.success(request, e)
                    return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=2")
            else:
                messages.success(request, "Image ID(s) Not Provided")
                return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=2")
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        messages.error(request,e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

###################################################################
# Name - live_doc_update_login                                    #
# BY - Nishank Gupta                                              #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def live_doc_update_login(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                dmail = request.POST['gtmail']
                dmobile = request.POST['gtmobile']
            except:
                messages.error(request, 'Mail / Mobile values not received')

            ldocObj = Live_Doctor.objects.get(id=doctor_id)
            template_service = {"user_id":"","email":"","mobileNo":"","authToken":""}
            template_service["user_id"] = ldocObj.user_id
            template_service["email"] = dmail
            template_service["mobileNo"] = str(dmobile)
            global authToken
            template_service['authToken'] = authToken

            global hostname
            global port
            url_p3 = "/api/v2/user/change_mobile_no_email/"
            urlc = hostname + port + url_p3
            # print urlc
            import requests
            url = urlc
            try:
                
                r = requests.post(url, json=template_service,headers={'hit_from':'CMS'} )
                # tempresp = json.dumps(r.text)
                # print r.text
                # print type(r.text)
                resp = json.loads(r.text)
                # print type(resp)
                # print resp

                if r.status_code == 200 or r.status_code == '200':

                    if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                        import datetime as datetimeforthis
                        now = datetimeforthis.datetime.now()
                        lvdr = None
                        lvdr = Live_Doctor.objects.get(id=doctor_id)
                        Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                                livedoctor_id=lvdr.id, livedoctorCrAt=lvdr.createdAt,
                                                                livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                                livedoctorStage=lvdr.stage.stage_name,
                                                                update_Type='Doctor Login Changed',
                                                                updatedBy='CMS')

                        messages.success(request, "Successfully Updated Account")
                        return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=10")

                    else:
                        messages.error(request, resp['statusMessage'])
                        return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=10")

                else:
                    messages.error(request, resp['statusMessage'])
                    return redirect(reverse('live_doctor_listing_edit', args=[int(doctor_id)]) + "?tab=10")

            except Exception as e:
                messages.error(request, e)
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


###################################################################
# Name - view_duplicates                                          #
# BY - Nishank Gupta                                              #
###################################################################
@login_required(login_url='/')
@csrf_exempt
def view_duplicates(request, doctor_id=None):
    try:
        live_doc_list = []
        doc_list = []
        live_doc_mci_match_list = []
        doc_mci_match_list = []

        if doctor_id:
            live_doctor_obj = Live_Doctor.objects.get(id= int(doctor_id))
            #if live_doctor_obj.mciRegistrationNo != None and live_doctor_obj.mciRegistrationNo != '':
            live_doc_list = Live_Doctor.objects.all().exclude(id = int(doctor_id))
            if list(live_doc_list) != []:
                for i in live_doc_list:
                    if live_doctor_obj.mciRegistrationNo != None and live_doctor_obj.mciRegistrationNo !='':
                        if i.mciRegistrationNo != None and i.mciRegistrationNo != '':
                            if live_doctor_obj.mciRegistrationNo.strip() == i.mciRegistrationNo.strip():
                                live_doc_mci_match_list.append(i)
                    if live_doctor_obj.email != None and live_doctor_obj.email != '':
                        if i.email != None and i.email != '':
                            if live_doctor_obj.email.strip() == i.email.strip():
                                if i not in live_doc_mci_match_list:
                                    live_doc_mci_match_list.append(i)
                    if live_doctor_obj.mobileNo != None and live_doctor_obj.mobileNo != '':
                        if i.mobileNo != None and i.mobileNo != '':
                            if live_doctor_obj.mobileNo.strip() == i.mobileNo.strip():
                                if i not in live_doc_mci_match_list:
                                    live_doc_mci_match_list.append(i)

            else:
                pass

            doc_list = Doctor.objects.all()
            if list(doc_list) != []:
                for j in doc_list:
                    reg_detail = j.registration_data
                    if reg_detail != None and reg_detail != '':
                        buff = ''
                        for charac in reg_detail:
                            if charac  != ' ':
                                buff = buff + charac
                            else:
                                break
                        if buff != None and buff != ' ' and buff != '':
                            if live_doctor_obj.mciRegistrationNo != None and live_doctor_obj.mciRegistrationNo !='':
                                if buff == live_doctor_obj.mciRegistrationNo.strip():
                                    doc_mci_match_list.append(j)

                    if j.email != None and live_doctor_obj.email != None and j.email != '' and live_doctor_obj.email != '':
                        if j.email.strip() == live_doctor_obj.email.strip():
                            if j not in doc_mci_match_list:
                                doc_mci_match_list.append(j)
                    if j.mobile_no != None and live_doctor_obj.mobileNo != None and j.mobile_no != '' and live_doctor_obj.mobileNo != '':
                        if j.mobile_no.strip() == live_doctor_obj.mobileNo.strip():
                            if j not in doc_mci_match_list:
                                doc_mci_match_list.append(j)
            else:
                pass

            #else:
            #    live_doc_mci_match_list = []
            #    doc_mci_match_list = []

            return render(request,'data_management/live_doctor_data/live_doctor_duplicates.html',
                          {'live_doc_mci_match_list':live_doc_mci_match_list,'doc_mci_match_list':doc_mci_match_list,'live_doc_id':doctor_id}
                          )

        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        messages.error(request,e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - live_doctor_data_manage                                   #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def live_doctor_data_manage(request):
    try:
        return render(request, 'admin/live_doctor_management/live_doctor_management.html',
                      {'tab': 'data', 'crosal': 'livedoctormanage'})
    except Exception as e:
        raise Http404

####################################################################
# Name - live_doctor_by_users                                      #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def live_doctor_by_users(request):
    try:
        all_categories = Category.objects.filter(delete=False)

        search_data = None
        search_data = request.GET.get('search_data')
        if search_data:
            user_data_obj = UserManagement.objects.all()
            doctor_data_obj = Live_Doctor.objects.filter(current_user_id=search_data).order_by('-createdAt')
            paginator = Paginator(doctor_data_obj, 100)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/live_doctor_management/live_doctor_by_user.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'doctor_all_data': doctor_data_obj,
                           'user_data_obj': user_data_obj, 'search_data': search_data,'all_categories':all_categories})
        search_data_two = None
        search_data_two = request.GET.get('search_data_two')
        if search_data_two:
            user_data_obj = UserManagement.objects.all()
            doctor_data_obj = Live_Doctor.objects.all().order_by('-createdAt') #filter(name__icontains=search_data_two).order_by('name')
            tempaa = []
            for i in doctor_data_obj:
                fullName = ''
                fullName = i.firstName+ ' ' +i.lastName
                if search_data_two in fullName:
                    tempaa.append(i)

            doctor_data_obj = tempaa.sort()
            paginator = Paginator(doctor_data_obj, 100)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/live_doctor_management/live_doctor_by_user.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'doctor_all_data': doctor_data_obj,
                           'user_data_obj': user_data_obj, 'search_data_two': search_data_two,'all_categories':all_categories})
        user_data_obj = UserManagement.objects.all()
        doctor_all_data = Live_Doctor.objects.all().order_by('-createdAt')
        paginator = Paginator(doctor_all_data, 100)
        page = request.GET.get('page')
        try:
            doctor_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            doctor_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            doctor_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/live_doctor_management/live_doctor_by_user.html',
                      {'tab': 'data', 'crosal': 'doctorbymanage', 'doctor_all_data': doctor_all_data,
                       'user_data_obj': user_data_obj,'all_categories':all_categories})
    except Exception as e:
        raise Http404

####################################################################
# Name - live_doctor_by_stages                                     #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def live_doctor_by_stages(request):
    try:
        stage_id = request.GET.get('stage_id')
        if stage_id:
            doctor_all_data = Live_Doctor.objects.filter(stage_id=stage_id).order_by('-createdAt')
        else:
            doctor_all_data = Live_Doctor.objects.all().order_by('-createdAt')
            stage_id = None
        stage_data_obj = Stage.objects.all()
        paginator = Paginator(doctor_all_data, 100)
        page = request.GET.get('page')
        try:
            doctor_all_data = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            doctor_all_data = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            doctor_all_data = paginator.page(paginator.num_pages)
        return render(request, 'admin/live_doctor_management/live_doctor_by_stages.html',
                      {'tab': 'data', 'crosal': 'doctorbymanage', 'doctor_all_data': doctor_all_data,
                       'stage_data': stage_data_obj, 'stage_no': stage_id})
    except Exception as e:
        raise Http404


####################################################################
# Name - live_doctor_assignment                                    #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@require_GET
def live_doctor_assignment(request):
    try:
        zone_filter = False
        stage_filter = False
        user_filter = False
        zone_location_filter_length = False
        category_filter = False
        stage_data = Stage.objects.all()[:4]
        user_data = User.objects.all().order_by('username')
        zone_obj = Zone.objects.filter(delete=False).order_by('name')
        zone_location_obj = {}
        category_obj = Category.objects.filter(delete=False).order_by('name')
        search_data=None
        search_data = request.GET.get('search_data')
        if search_data :
            doctor_data_obj = Live_Doctor.objects.all().order_by('-createdAt') #filter(name__icontains=search_data).order_by('name')
            mptyld =[]
            for ld in doctor_data_obj:
                fn = ''
                fulln = ld.firstName + ' ' +ld.lastName
                if search_data in fulln:
                    mptyld.append(ld)
            doctor_data_obj = mptyld.sort()

            paginator = Paginator(doctor_data_obj, 100)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                           'zone_obj': zone_obj,
                           'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                           'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                           'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                           'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                           'search_data':search_data})
        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'filter':
            zone_data = request.GET['zone'].strip()
            if zone_data:
                zone_filter = zone_data
            try:
                zone_location_data = request.GET['zone_location'].strip()
            except:
                zone_location_data = 0
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = 0
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = 0
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            if zone_location_data:
                zone_location_filter_length = int(zone_location_data)
                zone_location_obj = ZoneLocation.objects.all()

            category_data = request.GET['category'].strip()
            if category_data:
                category_filter = int(category_data)
            if zone_data and category_data:
                if zone_location_data and stage_id_data and user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(zone_location=zone_location_data),
                                                            Q(category=category_data), Q(stage=stage_id_data),
                                                            Q(current_user=user_id_data)).order_by('-createdAt')
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })


                elif zone_location_data and stage_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(zone_location=zone_location_data),
                                                            Q(category=category_data), Q(stage=stage_id_data)).order_by('-createdAt')
                elif zone_location_data and user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(zone_location=zone_location_data),
                                                            Q(category=category_data),
                                                            Q(current_user=user_id_data)).order_by('-createdAt')
                elif stage_id_data and user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(category=category_data),
                                                            Q(current_user=user_id_data),
                                                            Q(stage=stage_id_data)).order_by('-createdAt')
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(category=category_data), Q(stage=stage_id_data)).order_by('-createdAt')
                elif user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data),
                                                            Q(category=category_data),
                                                            Q(current_user=user_id_data)).order_by('-createdAt')
                else:
                    doctor_data_obj = Live_Doctor.objects.filter(zone=zone_data, category=category_data).order_by('-createdAt')
                paginator = Paginator(doctor_data_obj, 100)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })
            elif category_data:
                if stage_id_data and user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(category=category_data), Q(current_user=user_id_data),
                                                            Q(stage=stage_id_data)).order_by('-createdAt')
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(category=category_data), Q(stage=stage_id_data)).order_by('-createdAt')
                elif user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(category=category_data),
                                                            Q(current_user=user_id_data)).order_by('-createdAt')
                else:
                    doctor_data_obj = Live_Doctor.objects.filter(category=category_data).order_by('-createdAt')
                paginator = Paginator(doctor_data_obj, 100)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter,
                               'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif zone_data and zone_location_data:
                if stage_id_data and user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data), Q(zone_location=zone_location_data),
                                                            Q(current_user=user_id_data),
                                                            Q(stage=stage_id_data)).order_by('-createdAt')
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data), Q(zone_location=zone_location_data),
                                                            Q(stage=stage_id_data)).order_by('-createdAt')
                elif user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data), Q(zone_location=zone_location_data),
                                                            Q(current_user=user_id_data)).order_by('-createdAt')
                else:
                    doctor_data_obj = Live_Doctor.objects.filter(zone=zone_data, zone_location=zone_location_data).order_by('-createdAt')
                paginator = Paginator(doctor_data_obj, 100)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                               'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif zone_data:
                if stage_id_data and user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data), Q(stage=stage_id_data),
                                                            Q(current_user=user_id_data)).order_by('-createdAt')
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data), Q(stage=stage_id_data)).order_by('-createdAt')
                elif user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data), Q(current_user=user_id_data)).order_by('-createdAt')
                else:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(zone=zone_data)).order_by('-createdAt')
                paginator = Paginator(doctor_data_obj, 100)
                page = request.GET.get('page')
                try:
                    doctor_data_obj = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    doctor_data_obj = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    doctor_data_obj = paginator.page(paginator.num_pages)
                return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'zone_obj': zone_obj,
                               'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                               'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                               'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                               'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif stage_id_data or user_id_data:
                if stage_id_data and user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(stage=stage_id_data),
                                                            Q(current_user=user_id_data)).order_by('-createdAt')
                    paginator = Paginator(doctor_data_obj, 100)
                    page = request.GET.get('page')
                    try:
                        doctor_data_obj = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        doctor_data_obj = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        doctor_data_obj = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'zone_obj': zone_obj,
                                   'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                                   'zone_filter': zone_filter,
                                   'zone_location_filter_length': zone_location_filter_length,
                                   'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(stage=stage_id_data)).order_by('-createdAt')
                elif user_id_data:
                    doctor_data_obj = Live_Doctor.objects.filter(Q(current_user=user_id_data)).order_by('-createdAt')
                else:
                    doctor_data_obj = Live_Doctor.objects.all().order_by('-createdAt')
            else:
                doctor_data_obj = Live_Doctor.objects.all().order_by('-createdAt')
            paginator = Paginator(doctor_data_obj, 100)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                           'zone_obj': zone_obj,
                           'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                           'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                           'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                           'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                           'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                           'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

        else:

            filter_name = None
            zone_data = None
            zone_location_data = None
            category_data = None
            stage_id_data = None
            user_id_data= None
            doctor_data_obj = Live_Doctor.objects.all().order_by('-createdAt')
            paginator = Paginator(doctor_data_obj, 100)
            page = request.GET.get('page')
            try:
                doctor_data_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                doctor_data_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                doctor_data_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/live_doctor_management/live_doctor_assign.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                           'zone_obj': zone_obj,
                           'category_obj': category_obj, 'doctor_data_obj': doctor_data_obj,
                           'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                           'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                           'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                           'filter_name':filter_name, 'zone_data':zone_data,'zone_location_data':zone_location_data,
                           'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

    except Exception as e:
        raise Http404

#
#@^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
####################################################################
# Name - sponsored_ranks_deleted_schedules                         #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
#@require_GET
def sponsored_ranks_deleted_schedules(request):
    try:
        city_filter = False
        stage_filter = False
        user_filter = False
        city_location_filter_length = False
        category_filter = False
        stage_data = Stage.objects.all()[:4]
        user_data = User.objects.all().order_by('username')
        city_obj = City.objects.filter(delete=False).order_by('name')
        city_location_obj = {}
        category_obj = Category.objects.filter(delete=False).order_by('name')
        search_data=None
        search_data = request.GET.get('search_data')
        mpty = []
        del_sch_mainlist = []
        if search_data :
            doctor_data_obj = Live_Doctor.objects.all()
            mpty =[]
            for ld in doctor_data_obj:
                fulln = ''
                fulln = ld.firstName + ' ' +ld.lastName
                if search_data in fulln:
                    mpty.append(ld)
            mpty = [x.id for x in mpty]
            all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',doctor_id__in=mpty)

            for sscchh in all_deleted_Schedules:
                lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                try:
                    doccategory = Category.objects.get(id=lldoc.category).name
                except:
                    doccategory = None

                try:
                    oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                except:
                    oorg = None
                if oorg != None and doccategory != None:
                    Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                    key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                    Spon_cc =  lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK,'DoesNotExist')
                    Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK,'DoesNotExist')
                    if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                        pass
                    else:
                        if Spon_cc == 'DoesNotExist':
                            Spon_cc = None
                        if Spon_clc == 'DoesNotExist':
                            Spon_clc = None
                        del_sch_mainlist.append([lldoc,doccategory,oorg,Spon_cc,Spon_clc,Key_CC_RANK,key_CLC_RANK,lldoc.firstName])
            if del_sch_mainlist != []:
                del_sch_mainlist.sort(key=lambda x: x[7])

            paginator = Paginator(del_sch_mainlist, 100)
            page = request.GET.get('page')
            try:
                del_sch_mainlist = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                del_sch_mainlist = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                del_sch_mainlist = paginator.page(paginator.num_pages)
            return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                           'city_filter': city_filter,
                           'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                           'city_obj': city_obj, 'city_location_filter_length': city_location_filter_length,
                           'category_filter': category_filter, 'city_location_obj': city_location_obj,
                           'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                           'search_data':search_data})
        try:
            filter_name = str(request.GET['x'].strip())
        except:
            filter_name = None
        if filter_name == 'filter':
            city_data = request.GET['city'].strip()
            if city_data:
                city_filter = city_data
            try:
                city_location_data = request.GET['city_location'].strip()
            except:
                city_location_data = 0
            try:
                stage_id_data = request.GET['stage_da'].strip()
            except:
                stage_id_data = 0
            try:
                user_id_data = request.GET['user_da'].strip()
            except:
                user_id_data = 0
            if stage_id_data:
                stage_filter = int(stage_id_data)
            if user_id_data:
                user_filter = int(user_id_data)
            if city_location_data:
                city_location_filter_length = int(city_location_data)
                city_location_obj = Locality.objects.all(delete=False)

            category_data = request.GET['category'].strip()
            if category_data:
                category_filter = int(category_data)
            if city_data and category_data:
                if city_location_data and stage_id_data and user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data),
                    #                                         Q(zone_location=city_location_data),
                    #                                         Q(category=category_data), Q(stage=stage_id_data),
                    #                                         Q(current_user=user_id_data)).order_by('-createdAt')
                    doctor_data_obj = Live_Doctor.objects.filter(stage=int(stage_id_data),category=int(category_data),current_user=int(user_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete', doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data) and oorrgg.locality_id == int(city_location_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty

                    for sscchh in all_deleted_Schedules:
                        lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                        try:
                            doccategory = Category.objects.get(id=lldoc.category).name
                        except:
                            doccategory = None

                        try:
                            oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                        except:
                            oorg = None
                        if oorg != None and doccategory != None:
                            Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                            key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                            Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                            Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                            if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                                pass
                            else:
                                if Spon_cc == 'DoesNotExist':
                                    Spon_cc = None
                                if Spon_clc == 'DoesNotExist':
                                    Spon_clc = None
                                del_sch_mainlist.append(
                                    [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                                     lldoc.firstName])
                    if del_sch_mainlist != []:
                        del_sch_mainlist.sort(key=lambda x: x[7])

                    paginator = Paginator(del_sch_mainlist, 100)
                    page = request.GET.get('page')
                    try:
                        del_sch_mainlist = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        del_sch_mainlist = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        del_sch_mainlist = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'city_filter': city_filter,
                                   'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                                   'city_obj': city_obj,
                                   'city_location_filter_length': city_location_filter_length,
                                   'category_filter': category_filter, 'city_location_obj': city_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })


                elif city_location_data and stage_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data),
                    #                                         Q(zone_location=city_location_data),
                    #                                         Q(category=category_data), Q(stage=stage_id_data)).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(stage=int(stage_id_data), category=int(category_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data) and oorrgg.locality_id == int(city_location_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty

                elif city_location_data and user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data),
                    #                                         Q(zone_location=city_location_data),
                    #                                         Q(category=category_data),
                    #                                         Q(current_user=user_id_data)).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(category=int(category_data),current_user=int(user_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass

                        if oorrgg.city_id == int(city_data) and oorrgg.locality_id == int(city_location_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty

                elif stage_id_data and user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data),
                    #                                         Q(category=category_data),
                    #                                         Q(current_user=user_id_data),
                    #                                         Q(stage=stage_id_data)).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(stage=int(stage_id_data), category=int(category_data),
                                                                 current_user=int(user_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty

                    for sscchh in all_deleted_Schedules:
                        lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                        try:
                            doccategory = Category.objects.get(id=lldoc.category).name
                        except:
                            doccategory = None

                        try:
                            oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                        except:
                            oorg = None
                        if oorg != None and doccategory != None:
                            Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                            key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                            Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                            Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                            if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                                pass
                            else:
                                if Spon_cc == 'DoesNotExist':
                                    Spon_cc = None
                                if Spon_clc == 'DoesNotExist':
                                    Spon_clc = None
                                del_sch_mainlist.append(
                                    [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                                     lldoc.firstName])
                    if del_sch_mainlist != []:
                        del_sch_mainlist.sort(key=lambda x: x[7])

                    paginator = Paginator(del_sch_mainlist, 100)
                    page = request.GET.get('page')
                    try:
                        del_sch_mainlist = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        del_sch_mainlist = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        del_sch_mainlist = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'city_filter': city_filter,
                                   'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                                   'city_obj': city_obj,
                                   'city_location_filter_length': city_location_filter_length,
                                   'category_filter': category_filter, 'city_location_obj': city_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data),
                    #                                         Q(category=category_data), Q(stage=stage_id_data)).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(stage=int(stage_id_data), category=int(category_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty

                elif user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data),
                    #                                         Q(category=category_data),
                    #                                         Q(current_user=user_id_data)).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(category=int(category_data),current_user=int(user_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty

                else:
                    # doctor_data_obj = Live_Doctor.objects.filter(zone=city_data, category=category_data).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(category=int(category_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty

                for sscchh in all_deleted_Schedules:
                    lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                    try:
                        doccategory = Category.objects.get(id=lldoc.category).name
                    except:
                        doccategory = None

                    try:
                        oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                    except:
                        oorg = None
                    if oorg != None and doccategory != None:
                        Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                        key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                        Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                        Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                        if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                            pass
                        else:
                            if Spon_cc == 'DoesNotExist':
                                Spon_cc = None
                            if Spon_clc == 'DoesNotExist':
                                Spon_clc = None
                            del_sch_mainlist.append(
                                [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                                 lldoc.firstName])
                if del_sch_mainlist != []:
                    del_sch_mainlist.sort(key=lambda x: x[7])


                paginator = Paginator(del_sch_mainlist, 100)
                page = request.GET.get('page')
                try:
                    del_sch_mainlist = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    del_sch_mainlist = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    del_sch_mainlist = paginator.page(paginator.num_pages)
                return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'city_filter': city_filter,
                               'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                               'city_obj': city_obj, 'city_location_filter_length': city_location_filter_length,
                               'category_filter': category_filter, 'city_location_obj': city_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })
            elif category_data:
                if stage_id_data and user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(category=category_data), Q(current_user=user_id_data),
                    #                                         Q(stage=stage_id_data)).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(category=int(category_data),current_user=int(user_id_data),stage=int(stage_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    # mpty = []
                    # for ads in all_deleted_Schedules:
                    #     oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                    #     if oorrgg.city_id == int(city_data):
                    #         mpty.append(ads)
                    # all_deleted_Schedules = mpty
                    for sscchh in all_deleted_Schedules:
                        lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                        try:
                            doccategory = Category.objects.get(id=lldoc.category).name
                        except:
                            doccategory = None

                        try:
                            oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                        except:
                            oorg = None
                        if oorg != None and doccategory != None:
                            Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                            key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                            Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                            Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                            if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                                pass
                            else:
                                if Spon_cc == 'DoesNotExist':
                                    Spon_cc = None
                                if Spon_clc == 'DoesNotExist':
                                    Spon_clc = None
                                del_sch_mainlist.append(
                                    [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                                     lldoc.firstName])
                    if del_sch_mainlist != []:
                        del_sch_mainlist.sort(key=lambda x: x[7])
                    paginator = Paginator(del_sch_mainlist, 100)
                    page = request.GET.get('page')
                    try:
                        del_sch_mainlist = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        del_sch_mainlist = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        del_sch_mainlist = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'city_filter': city_filter,
                                   'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                                   'city_obj': city_obj,
                                   'city_location_filter_length': city_location_filter_length,
                                   'category_filter': category_filter, 'city_location_obj': city_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(category=category_data), Q(stage=stage_id_data)).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(stage=int(stage_id_data), category=int(category_data),
                                                                 )
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                elif user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(category=category_data),
                    #                                         Q(current_user=user_id_data)).order_by('-createdAt')
                    doctor_data_obj = Live_Doctor.objects.filter(current_user=int(user_id_data), category=int(category_data),
                                                                 )
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                else:
                    # doctor_data_obj = Live_Doctor.objects.filter(category=category_data).order_by('-createdAt')
                    doctor_data_obj = Live_Doctor.objects.filter(category=int(category_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                for sscchh in all_deleted_Schedules:
                    lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                    try:
                        doccategory = Category.objects.get(id=lldoc.category).name
                    except:
                        doccategory = None

                    try:
                        oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                    except:
                        oorg = None
                    if oorg != None and doccategory != None:
                        Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                        key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                        Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                        Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                        if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                            pass
                        else:
                            if Spon_cc == 'DoesNotExist':
                                Spon_cc = None
                            if Spon_clc == 'DoesNotExist':
                                Spon_clc = None
                            del_sch_mainlist.append(
                                [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                                 lldoc.firstName])
                if del_sch_mainlist != []:
                    del_sch_mainlist.sort(key=lambda x: x[7])

                paginator = Paginator(del_sch_mainlist, 100)
                page = request.GET.get('page')
                try:
                    del_sch_mainlist = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    del_sch_mainlist = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    del_sch_mainlist = paginator.page(paginator.num_pages)
                return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'city_filter': city_filter,
                               'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                               'city_obj': city_obj,
                               'city_location_filter_length': city_location_filter_length,
                               'category_filter': category_filter, 'city_location_obj': city_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif city_data and city_location_data:
                if stage_id_data and user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data), Q(zone_location=city_location_data),
                    #                                         Q(current_user=user_id_data),
                    #                                         Q(stage=stage_id_data)).order_by('-createdAt')
                    doctor_data_obj = Live_Doctor.objects.filter(stage=int(stage_id_data),
                                                                 current_user=int(user_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data) and oorrgg.locality_id == int(city_location_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty


                    for sscchh in all_deleted_Schedules:
                        lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                        try:
                            doccategory = Category.objects.get(id=lldoc.category).name
                        except:
                            doccategory = None

                        try:
                            oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                        except:
                            oorg = None
                        if oorg != None and doccategory != None:
                            Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                            key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                            Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                            Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                            if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                                pass
                            else:
                                if Spon_cc == 'DoesNotExist':
                                    Spon_cc = None
                                if Spon_clc == 'DoesNotExist':
                                    Spon_clc = None
                                del_sch_mainlist.append(
                                    [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                                     lldoc.firstName])
                    if del_sch_mainlist != []:
                        del_sch_mainlist.sort(key=lambda x: x[7])

                    paginator = Paginator(del_sch_mainlist, 100)
                    page = request.GET.get('page')
                    try:
                        del_sch_mainlist = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        del_sch_mainlist = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        del_sch_mainlist = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'city_filter': city_filter,
                                   'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                                   'city_obj': city_obj,
                                   'city_location_filter_length': city_location_filter_length,
                                   'category_filter': category_filter, 'city_location_obj': city_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data), Q(zone_location=city_location_data),
                    #                                         Q(stage=stage_id_data)).order_by('-createdAt')
                    doctor_data_obj = Live_Doctor.objects.filter(stage=int(stage_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data) and oorrgg.locality_id == int(city_location_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty

                elif user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data), Q(zone_location=city_location_data),
                    #                                         Q(current_user=user_id_data)).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(current_user=int(user_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data) and oorrgg.locality_id == int(city_location_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty
                else:
                    # doctor_data_obj = Live_Doctor.objects.filter(zone=city_data, zone_location=city_location_data).order_by('-createdAt')
                    # doctor_data_obj = Live_Doctor.objects.filter(current_user=int(user_id_data))
                    # mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete'
                                                                                          )

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data) and oorrgg.locality_id == int(city_location_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty


                for sscchh in all_deleted_Schedules:
                    lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                    try:
                        doccategory = Category.objects.get(id=lldoc.category).name
                    except:
                        doccategory = None

                    try:
                        oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                    except:
                        oorg = None
                    if oorg != None and doccategory != None:
                        Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                        key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                        Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                        Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                        if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                            pass
                        else:
                            if Spon_cc == 'DoesNotExist':
                                Spon_cc = None
                            if Spon_clc == 'DoesNotExist':
                                Spon_clc = None
                            del_sch_mainlist.append(
                                [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                                 lldoc.firstName])
                if del_sch_mainlist != []:
                    del_sch_mainlist.sort(key=lambda x: x[7])

                paginator = Paginator(del_sch_mainlist, 100)
                page = request.GET.get('page')
                try:
                    del_sch_mainlist = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    del_sch_mainlist = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    del_sch_mainlist = paginator.page(paginator.num_pages)
                return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'city_filter': city_filter,
                               'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                               'city_obj': city_obj, 'city_location_filter_length': city_location_filter_length,
                               'category_filter': category_filter, 'city_location_obj': city_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                               'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif city_data:
                if stage_id_data and user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data), Q(stage=stage_id_data),
                    #                                         Q(current_user=user_id_data)).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(current_user=int(user_id_data),stage=int(stage_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty                                                                                          )

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty

                    for sscchh in all_deleted_Schedules:
                        lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                        try:
                            doccategory = Category.objects.get(id=lldoc.category).name
                        except:
                            doccategory = None

                        try:
                            oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                        except:
                            oorg = None
                        if oorg != None and doccategory != None:
                            Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                            key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                            Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                            Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                            if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                                pass
                            else:
                                if Spon_cc == 'DoesNotExist':
                                    Spon_cc = None
                                if Spon_clc == 'DoesNotExist':
                                    Spon_clc = None
                                del_sch_mainlist.append(
                                    [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                                     lldoc.firstName])
                    if del_sch_mainlist != []:
                        del_sch_mainlist.sort(key=lambda x: x[7])


                    paginator = Paginator(del_sch_mainlist, 100)
                    page = request.GET.get('page')
                    try:
                        del_sch_mainlist = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        del_sch_mainlist = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        del_sch_mainlist = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'city_filter': city_filter,
                                   'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                                   'city_obj': city_obj,
                                   'city_location_filter_length': city_location_filter_length,
                                   'category_filter': category_filter, 'city_location_obj': city_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data), Q(stage=stage_id_data)).order_by('-createdAt')
                    doctor_data_obj = Live_Doctor.objects.filter(stage=int(stage_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty
                elif user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data), Q(current_user=user_id_data)).order_by('-createdAt')
                    doctor_data_obj = Live_Doctor.objects.filter(current_user=int(user_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty
                else:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(zone=city_data)).order_by('-createdAt')

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete')

                    mpty = []
                    for ads in all_deleted_Schedules:
                        try:
                            oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                        except Exception as e:
                            pass
                        if oorrgg.city_id == int(city_data):
                            mpty.append(ads)
                    all_deleted_Schedules = mpty

                for sscchh in all_deleted_Schedules:
                    lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                    try:
                        doccategory = Category.objects.get(id=lldoc.category).name
                    except:
                        doccategory = None

                    try:
                        oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                    except:
                        oorg = None
                    if oorg != None and doccategory != None:
                        Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                        key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                        Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                        Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                        if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                            pass
                        else:
                            if Spon_cc == 'DoesNotExist':
                                Spon_cc = None
                            if Spon_clc == 'DoesNotExist':
                                Spon_clc = None
                            del_sch_mainlist.append(
                                [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                                 lldoc.firstName])
                if del_sch_mainlist != []:
                    del_sch_mainlist.sort(key=lambda x: x[7])

                paginator = Paginator(del_sch_mainlist, 100)
                page = request.GET.get('page')
                try:
                    del_sch_mainlist = paginator.page(page)
                except PageNotAnInteger:
                    # If page is not an integer, deliver first page.
                    del_sch_mainlist = paginator.page(1)
                except EmptyPage:
                    # If page is out of range (e.g. 9999), deliver last page of results.
                    del_sch_mainlist = paginator.page(paginator.num_pages)
                return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                              {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                               'city_filter': city_filter,
                               'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                               'city_obj': city_obj, 'city_location_filter_length': city_location_filter_length,
                               'category_filter': category_filter, 'city_location_obj': city_location_obj,
                               'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                               'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                               'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

            elif stage_id_data or user_id_data:
                if stage_id_data and user_id_data:
                    # doctor_data_obj = Live_Doctor.objects.filter(Q(stage=stage_id_data),
                    #                                         Q(current_user=user_id_data)).order_by('-createdAt')

                    doctor_data_obj = Live_Doctor.objects.filter(stage=int(stage_id_data),current_user=int(user_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                    # mpty = []
                    # for ads in all_deleted_Schedules:
                    #     oorrgg = OrganisationName.objects.get(id=ads.clinic_id)
                    #     if oorrgg.city_id == int(city_data):
                    #         mpty.append(ads)
                    # all_deleted_Schedules = mpty

                    for sscchh in all_deleted_Schedules:
                        lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                        try:
                            doccategory = Category.objects.get(id=lldoc.category).name
                        except:
                            doccategory = None

                        try:
                            oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                        except:
                            oorg = None
                        if oorg != None and doccategory != None:
                            Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                            key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                            Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                            Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                            if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                                pass
                            else:
                                if Spon_cc == 'DoesNotExist':
                                    Spon_cc = None
                                if Spon_clc == 'DoesNotExist':
                                    Spon_clc = None
                                del_sch_mainlist.append(
                                    [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                                     lldoc.firstName])
                    if del_sch_mainlist != []:
                        del_sch_mainlist.sort(key=lambda x: x[7])

                    paginator = Paginator(del_sch_mainlist, 100)
                    page = request.GET.get('page')
                    try:
                        del_sch_mainlist = paginator.page(page)
                    except PageNotAnInteger:
                        # If page is not an integer, deliver first page.
                        del_sch_mainlist = paginator.page(1)
                    except EmptyPage:
                        # If page is out of range (e.g. 9999), deliver last page of results.
                        del_sch_mainlist = paginator.page(paginator.num_pages)
                    return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                                  {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                                   'city_filter': city_filter,
                                   'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                                   'city_obj': city_obj,
                                   'city_location_filter_length': city_location_filter_length,
                                   'category_filter': category_filter, 'city_location_obj': city_location_obj,
                                   'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                                   'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                                   'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

                elif stage_id_data:
                    #doctor_data_obj = Live_Doctor.objects.filter(Q(stage=stage_id_data)).order_by('-createdAt')
                    doctor_data_obj = Live_Doctor.objects.filter(stage=int(stage_id_data)
                                                                 )
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)
                elif user_id_data:
                    #doctor_data_obj = Live_Doctor.objects.filter(Q(current_user=user_id_data)).order_by('-createdAt')
                    doctor_data_obj = Live_Doctor.objects.filter(current_user=int(user_id_data))
                    mpty = [x.id for x in doctor_data_obj]

                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete',
                                                                                          doctor_id__in=mpty)

                else:
                    #doctor_data_obj = Live_Doctor.objects.all().order_by('-createdAt')
                    all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete')
            else:
                # doctor_data_obj = Live_Doctor.objects.all().order_by('-createdAt')
                all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete')
            for sscchh in all_deleted_Schedules:
                lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                try:
                    doccategory = Category.objects.get(id=lldoc.category).name
                except:
                    doccategory = None

                try:
                    oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                except:
                    oorg = None
                if oorg != None and doccategory != None:
                    Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                    key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                    Spon_cc = lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK, 'DoesNotExist')
                    Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK, 'DoesNotExist')
                    if Spon_cc == 'DoesNotExist' and Spon_clc == 'DoesNotExist':
                        pass
                    else:
                        if Spon_cc == 'DoesNotExist':
                            Spon_cc = None
                        if Spon_clc == 'DoesNotExist':
                            Spon_clc = None
                        del_sch_mainlist.append(
                            [lldoc, doccategory, oorg, Spon_cc, Spon_clc, Key_CC_RANK, key_CLC_RANK,
                             lldoc.firstName])
            if del_sch_mainlist != []:
                del_sch_mainlist.sort(key=lambda x: x[7])


            paginator = Paginator(del_sch_mainlist, 100)
            page = request.GET.get('page')
            try:
                del_sch_mainlist = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                del_sch_mainlist = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                del_sch_mainlist = paginator.page(paginator.num_pages)
            return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                           'city_filter': city_filter,
                           'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                           'city_obj': city_obj, 'city_location_filter_length': city_location_filter_length,
                           'category_filter': category_filter, 'city_location_obj': city_location_obj,
                           'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                           'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                           'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

        else:
            del_sch_mainlist = []
            filter_name = None
            city_data = None
            city_location_data = None
            category_data = None
            stage_id_data = None
            user_id_data= None
            #doctor_data_obj = Live_Doctor.objects.all().order_by('-createdAt')
            all_deleted_Schedules = Live_Doctor_Commonworkschedule.objects.filter(status__iexact='delete')
            for sscchh in all_deleted_Schedules:
                lldoc = Live_Doctor.objects.get(id=sscchh.doctor_id)
                try:
                    doccategory = Category.objects.get(id=lldoc.category).name
                except:
                    doccategory = None

                try:
                    oorg = OrganisationName.objects.get(id=sscchh.clinic_id)
                except:
                    oorg = None
                if oorg != None and doccategory != None:
                    Key_CC_RANK = oorg.city_id.__str__() + '-' + lldoc.category.__str__()
                    key_CLC_RANK = oorg.city_id.__str__() + '-' + oorg.locality_id.__str__() + '-' + lldoc.category.__str__()
                    Spon_cc =  lldoc.sponsored_rank['CC_RANK_list'].get(Key_CC_RANK,'DoesNotExist')
                    Spon_clc = lldoc.sponsored_rank['CLC_RANK_list'].get(key_CLC_RANK,'DoesNotExist')
                    if Spon_cc == 'DoesNotExist'  and Spon_clc == 'DoesNotExist':
                        pass
                    else:
                        if Spon_cc == 'DoesNotExist':
                            Spon_cc = None
                        if Spon_clc == 'DoesNotExist':
                            Spon_clc = None
                        del_sch_mainlist.append([lldoc,doccategory,oorg,Spon_cc,Spon_clc,Key_CC_RANK,key_CLC_RANK,lldoc.firstName])
            if del_sch_mainlist != []:
                del_sch_mainlist.sort(key=lambda x: x[7])
            #paginator = Paginator(doctor_data_obj, 100)
            paginator = Paginator(del_sch_mainlist, 100)
            page = request.GET.get('page')
            try:
                del_sch_mainlist = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                del_sch_mainlist = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                del_sch_mainlist = paginator.page(paginator.num_pages)
            return render(request, 'admin/live_doctor_management/live_doctor_sponsored_rank_deleted_schedules.html',
                          {'tab': 'data', 'crosal': 'doctorbymanage', 'stage_data': stage_data,
                           'city_filter': city_filter,'doctor_data_obj':None,
                           'category_obj': category_obj, 'del_sch_mainlist': del_sch_mainlist,
                           'city_obj': city_obj, 'city_location_filter_length': city_location_filter_length,
                           'category_filter': category_filter, 'city_location_obj': city_location_obj,
                           'stage_filter': stage_filter, 'user_filter': user_filter, 'user_data': user_data,
                           'filter_name':filter_name, 'city_data':city_data,'city_location_data':city_location_data,
                           'category_data':category_data,'stage_id_data':stage_id_data,'user_id_data':user_id_data })

    except Exception as e:
        raise Http404

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



####################################################################
# Name - assign_live_doctor                                        #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@user_passes_test(lambda u: u.is_superuser)
@csrf_exempt
def assign_live_doctor(request):
    try:
        if request.method == "POST":
            response1 = {}
            try:
                assign_user = int(request.POST['telecaller'].strip())
            except:
                assign_user = 0
            try:
                change_stage = int(request.POST['stage'].strip())
            except:
                change_stage = 0
            checkedValues = request.POST.getlist('checkedValues[]')
            if assign_user and change_stage and checkedValues:
                if checkedValues[0] == 'on':
                    try:
                        checkedValues = checkedValues[1:]
                    except:
                        response1['Message'] = "Something Bad happened"

                nbslist = []
                nbflist = []
                for i in range(0, len(checkedValues)):
                    try:
                        assign_obj = Live_Doctor.objects.filter(id=checkedValues[i]).update(current_user_id=assign_user,
                                                                                   stage_id=change_stage)
                        nbslist.append(checkedValues[i])
                    except:
                        nbflist.append(checkedValues[i])
                        continue
                my_send_mail(request, 'livedoctor', nbslist, nbflist, 'Live Doctor Assignment', 'Assigned')
                response1['Redirect'] = True
                response1['RedirectUrl'] = '/live-doctor/assignment/'
                response1['Message'] = "Assign Complete"
            else:
                response1['Message'] = "Please select Stage and User "
            response = json.dumps(response1)
            return HttpResponse(response)
    except Exception as e:
        raise Http404

####################################################################
# Name - deactivate_single_live_doctor                             #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@require_GET
def deactivate_single_live_doctor(request,doctor_id = None):
    try:
        if doctor_id :
            doctor_obj = Live_Doctor.objects.get(id=doctor_id)
            if doctor_obj and doctor_obj.publish == True:
                response = elasticsearch_client.delete_document('global', "doctor", doctor_id)
                if response:
                    doctor_obj.publish=False
                    doctor_obj.stage=4
                    doctor_obj.is_disable=True
                    doctor_obj.save()
                    messages.success(request, "Unpublished and Deactivated successfully...!!!")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                else:
                    doctor_obj.is_disable=True
                    doctor_obj.save()
                    messages.error(request, "Deactivated but could not be un published...!!!")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            elif doctor_obj and doctor_obj.publish == False:
                doctor_obj.is_disable = True
                doctor_obj.save()
                messages.success(request, "Deactivated Successfully...!!!")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        else:
            messages.error(request, "Live Doctor ID Not provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        messages.error(request,e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - activate_single_live_doctor                               #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@require_GET
def activate_single_live_doctor(request, doctor_id=None):
    try:
        if doctor_id:
            doctor_obj = Live_Doctor.objects.get(id=doctor_id)
            #response = elasticsearch_client.delete_document('global', "doctor", doctor_id)
            # TODO PUBLISH TO ELASTIC
            doctor_obj.is_disable = False
            doctor_obj.save()
            messages.success(request, "Activated successfully...!!!")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        else:
            messages.error(request, "Live Doctor ID Not provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - update_did_extension_live_doc_schedule                    #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
def  update_did_extension_live_doc_schedule(request, schedule_id=None):
    try:
        if schedule_id :
            schedule_obj = Live_Doctor_Commonworkschedule.objects.get(id = schedule_id)
            try:
                schdid = request.POST['sch_did']
            except:
                schdid = ''

            try:
                schexn = request.POST['sch_extension']
            except:
                schexn = ''
            try:
                department = request.POST.getlist('Departments_add_org')
            except:
                department = ''
            temp_dep = ','.join(department)
            department = temp_dep
            now = datetime.now()
            schedule_obj.did = schdid
            schedule_obj.extension = schexn
            schedule_obj.department = department
            schedule_obj.save()
            lvdr = None
            lvdr = Live_Doctor.objects.get(id=schedule_obj.doctor_id)
            Live_Doctor_Notification.objects.create(notification_creation_date=now,
                                                    livedoctor_id=lvdr.id, livedoctorCrAt=lvdr.createdAt,
                                                    livedoctorName=lvdr.firstName + ' ' + lvdr.lastName,
                                                    livedoctorStage=lvdr.stage.stage_name,
                                                    update_Type='Schedule Updated',
                                                    updatedBy='CMS')

            messages.success(request, "Updated successfully...!!!")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        else:
            messages.error(request, "Schedule ID Not provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
#--------------------------------------------------
#--------------------------------------------------


####################################################################
# Name - questions_listing                                         #
# By - Nishank
# MOdified BY Ashutosh                                      #
####################################################################
@login_required(login_url='/')
@csrf_exempt

def questions_listing(request):
    try:
        question_obj = patienttoaskquestion.objects.filter(free='true').order_by('-createdAt')
        live_docs = Live_Doctor.objects.filter(is_disable=False)
        cat_list = Category.objects.all()
        try:
            action = request.POST['action']
        except:
            action = None
        try:
            catid = request.POST['cat_id']
        except:
            catid=None

        if action:
            live_docss = Live_Doctor.objects.filter(is_disable=False,category=catid).values('id', 'firstName','lastName')
            live_docs = []
            for live_doc in live_docss:
                live_d = {}
                namee = live_doc['firstName'] +" " + live_doc['lastName']
                live_d['name'] = namee
                live_d['id'] = live_doc['id']
                live_docs.append(live_d)
            response = {}
            if len(live_docs):
                response['live_docs'] = list(live_docs)
            else:
                response['Message'] = 'No City Present...!'
            data = json.dumps(response)
            return HttpResponse(data)
        live_doc_list = []
        for i in live_docs:
            try:
                Associated_Data = Live_Doctor_Associated_Data.objects.get(doctor_id = i.id)
            except :
                Associated_Data = None
            if Associated_Data != None:
                if i.activate == True or Associated_Data.talk_to_doc ==  True:
                    live_doc_list.append(i)
                else:
                    pass
            else:
                if i.activate == True :
                    live_doc_list.append(i)
                else:
                    pass

        if len(question_obj) == 0:
            messages.error(request, "No Questions found")

            return render(request, 'admin/questions_management/questions_listing.html',
                          {'tab_listing': 'questions_listing','cat_list':cat_list})
        elif len(question_obj) > 0:
            paginator = Paginator(question_obj, 50)
            page = request.GET.get('page')
            try:
                question_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                question_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                question_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/questions_management/questions_listing.html',
                          dict(question_obj=question_obj,cat_list=cat_list, tab_listing='questions_listing',
                                live_doc_list=live_doc_list))

        else:
            return HttpResponseRedirect(reverse('index-page'))
    except Exception as e:
        #print e
        raise Http404


####################################################################
# Name - associate_live_doc_with_question                          #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
def associate_live_doc_with_question(request,question_id=None):
    try:
        doctor_id = None
        doctor_id = request.POST['livedoc']
        if doctor_id and doctor_id != 0:
            question_obj = patienttoaskquestion.objects.get(id = question_id)
            live_doc_obj = Live_Doctor.objects.get(id=doctor_id)
            question_obj.doctor_id = live_doc_obj.id
            question_obj.doctor_name = live_doc_obj.firstName +' '+live_doc_obj.lastName
            category_obj = Category.objects.get(id = live_doc_obj.category)
            question_obj.doctor_category = category_obj.name

            question_obj.save()
            messages.success(request,"Successfully assigned question to doctor")
            return redirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Missing Doctor Id")
            return redirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - feedback_listing                                          #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def feedback_listing(request):
    try:
        feedback_obj = patienttodoctorfeedback.objects.all()

        if len(feedback_obj) == 0:
            messages.error(request, "No Feedback found")
            return render(request, 'admin/feedback_management/feedback_listing.html',
                          {'tab_listing': 'feedback_listing'})

        elif len(feedback_obj) > 0:
            paginator = Paginator(feedback_obj, 50)
            page = request.GET.get('page')
            try:
                feedback_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                feedback_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                feedback_obj = paginator.page(paginator.num_pages)
            return render(request, 'admin/feedback_management/feedback_listing.html',
                          dict(feedback_obj=feedback_obj, tab_listing='feedback_listing'))

    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - approve_feedback                                          #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
def approve_feedback(request,feedback_id=None):
    try:
        if feedback_id:

            feedback_obj = patienttodoctorfeedback.objects.get(id =feedback_id)
            feedback_obj.verified = True
            feedback_obj.save()
            messages.success(request,"Successfully Verified Feedback")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Missing Feedback Id")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


####################################################################
# Name - disapprove_feedback                                       #
# By - Nishank                                                     #
####################################################################
@login_required(login_url='/')
def disapprove_feedback(request,feedback_id=None):
    try:
        if feedback_id:

            feedback_obj = patienttodoctorfeedback.objects.get(id =feedback_id)
            feedback_obj.verified = False
            feedback_obj.save()
            messages.success(request,"Successfully UN - Verified Feedback")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Missing Feedback Id")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))



#-------------------------Global search views by Ashutosh------------------------------------

@login_required(login_url='/')
@csrf_exempt
def doctor_global_search(request, doctor_id=None):
    try:
        associated_disease_list = None
        associated_symptoms_list = None
        country_obj = Country.objects.filter(delete=False)
        state_obj = State.objects.filter(delete=False)
        city = City.objects.filter(delete=False)
        locality = Locality.objects.filter(delete=False)

        if doctor_id is not None and request.method == "GET":
            doctor_data = Doctor.objects.filter(id=doctor_id)
            if doctor_data:
                speciality = doctor_data[0].speciality
                select_speciality = []
                if speciality != '' and speciality != None:
                    # select_speciality = speciality.split(',')
                    # line 1 and 2below commented by Nishank
                    # 1 select_speciality = map(int, select_speciality)
                    # 2 select_speciality = map(int, speciality)
                    speciality_no_list = speciality.split(",")
                    select_speciality = map(int, speciality_no_list)

                specialty_obj = Speciality.objects.filter(category_id=doctor_data[0].category_id)
                select_service_offer = []
                service_offer = doctor_data[0].service_offered
                if service_offer != '' and service_offer != None:
                    # select_service_offer = service_offer.split(',')
                    # select_service_offer = map(int, select_service_offer)
                    select_service_offer_no_list = service_offer.split(",")
                    select_service_offer = map(int, select_service_offer_no_list)
                service_offer_obj = Service_Offred.objects.filter(category_id=doctor_data[0].category_id)
                category_obj = Category.objects.filter(delete=False).order_by('name')
                emer_localities_list = None
                if doctor_data[0].localities and doctor_data[0].localities != '':
                    emer_localities_list = doctor_data[0].localities.split(',')

                if doctor_data[0].associated_diseases != '' and doctor_data[0].associated_diseases != None and \
                                doctor_data[0].associated_diseases != []:
                    diseases = doctor_data[0].associated_diseases.strip()
                    dlist = diseases.split(',')
                    associated_disease_list = []
                    for i in dlist:
                        dis = Disease_search_master.objects.get(id=int(i))
                        associated_disease_list.append(dis.name)

                if doctor_data[0].associated_symptoms != '' and doctor_data[0].associated_symptoms != None and \
                                doctor_data[0].associated_symptoms != []:
                    symptoms = doctor_data[0].associated_symptoms.strip()
                    slist = symptoms.split(',')
                    associated_symptoms_list = []
                    for i in slist:
                        sym = Symptoms_search_master.objects.get(id=int(i))
                        associated_symptoms_list.append(sym.name)
                return render(request, 'global_search/doctor/doctor_global_search.html',
                              {'tab': 'basic', 'tab_listing': 'doctor_global_search', 'doctor_data': doctor_data,
                               'category': category_obj,
                               'selectedspeciality': select_speciality, 'selectedoffers': select_service_offer,
                               'specialty': specialty_obj, 'service': service_offer_obj,
                               'country_obj': country_obj, 'state_obj': state_obj, 'city': city,
                               'locality': locality, 'emer_localities_list': emer_localities_list,
                               'associated_disease_list': associated_disease_list,
                               'associated_symptoms_list': associated_symptoms_list
                               })
            else:
                return HttpResponseRedirect('/global_search/doctor/(?P<doctor_id>[0-9]+)/')
    except Exception as e:
        messages.error(request, "something went wrong")
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    return Http404


@login_required(login_url='/')
@csrf_exempt
def doctor_global_search_reward(request, doctor_id=None):
    try:
        if request.method == 'GET' and doctor_id:
            doctor_data = Doctor.objects.filter(id=doctor_id)
            reward_data = RewardRecognisation.objects.filter(doctor_id=doctor_id)
            membership_data = Membership.objects.filter(doctor_id=doctor_id)
            #print "3"
            return render(request, 'global_search/doctor/doctor_global_search_reward.html',
                          {'tab': 'reward', 'tab_listing': 'doctor_global_search_reward', 'reward_data': reward_data,
                           'doctor_data': doctor_data, 'membership_data': membership_data})
    except Exception as e:
        raise Http404


@login_required(login_url='/')
@csrf_exempt
def doctor_global_search_education(request, doctor_id=None):
   try:
        if request.method == 'GET' and doctor_id:
            if request.user.is_superuser:
                doctor_data = Doctor.objects.filter(id=doctor_id)
                return render(request, 'global_search/doctor/doctor_global_search_education.html',
                              {'tab': 'education', 'tab_listing': 'doctor-global-search-education',
                               'doctor_data': doctor_data})
            if check_doctor_global_search(doctor_id, request.user.id):
                doctor_data = Doctor.objects.filter(id=doctor_id)
                return render(request, 'global_search/doctor/doctor_global_search_education.html',
                              {'tab': 'education', 'tab_listing': 'doctor-global-search-education',
                               'doctor_data': doctor_data})
            else:
                return HttpResponseRedirect(reverse('doctor-global-search',args=[doctor_id]))
   except Exception as e:
        raise Http404


@login_required(login_url='/')
@csrf_exempt
def doctor_global_search_attach(request, doctor_id=None):
    try:
        if check_doctor_global_search(doctor_id, request.user.id, request.user.is_superuser):
            if request.method == 'GET' and doctor_id:
                city_filter = False
                locality_filter = False
                city_obj = City.objects.all()
                locality_obj = []
                try:
                    filter_org = request.GET['filter_org']
                    if filter_org == 'on':
                        city_org = request.GET['city_id']
                        locality_org = request.GET['locality_id']
                        if city_org and locality_org:
                            city_filter = int(city_org)
                            locality_filter = int(locality_org)
                            organisation = OrganisationName.objects.filter(
                                Q(stage_id__gte=2) & Q(is_disable=False) & Q(is_live_org=False) & Q(city_id=city_filter) & Q(
                                    locality_id=locality_filter))
                            locality_obj = Locality.objects.filter(city_id=city_filter)
                        else:
                            messages.error(request, 'Please Select City and Locality')
                            organisation = []
                    else:
                        organisation = []
                except:
                    # filter_org = None
                    organisation = []
                doctor_data = Doctor.objects.filter(id=doctor_id)
                organisation_obj = AttachWithDoctor.objects.filter(doctor_id=doctor_id)
                # organisation = OrganisationName.objects.filter(stage_id__gte=2, is_disable=False)

                if UserManagement.objects.filter(user_id=request.user.id, is_caller=True):
                    user_data = UserManagement.objects.filter(is_reviewer=True, is_doctor_reviewer=True).values(
                        'user_id')
                    user_publisher_data = []
                elif UserManagement.objects.filter(user_id=request.user.id, is_reviewer=True):
                    user_data = UserManagement.objects.filter(is_caller=True, is_doctor_caller=True).values(
                        'user_id')
                    user_publisher_data = UserManagement.objects.filter(is_publisher=True).values('user_id')
                else:
                    user_data = []
                    user_publisher_data = []
                reviewer_user_data = User.objects.filter(id__in=user_data, is_active=True)
                publisher_user_data = User.objects.filter(id__in=user_publisher_data, is_active=True)
                valid_choice = ValidateByChoice.objects.all()
                user_data_complete = UserManagement.objects.all()
                department_obj = Department.objects.all().order_by('name')
                return render(request, 'global_search/doctor/doctor_global_search_attach.html',
                              {'tab': 'attach', 'tab_listing': 'doctor_global_search', 'doctor_data': doctor_data,
                               'organisation_doctor': organisation_obj, 'all_organisation': organisation,
                               'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                               'valid_choice': valid_choice, 'city_obj': city_obj, 'city_filter': city_filter,
                               'locality_filter': locality_filter, 'locality_obj': locality_obj,
                               'user_data_complete': user_data_complete, 'department_obj': department_obj})
        else:
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        # print e
        raise Http404


@login_required(login_url='/')
@csrf_exempt
def doctor_global_search_verify(request, doctor_id=None):
    try:
        if request.method == 'GET' and doctor_id:
            doctor_data = Doctor.objects.filter(id=doctor_id)
            fields_json = doctor_data[0].verified_fields
            full_list = []
            verified_list = []
            for i in fields_json:
                for k, v in i.items():
                    #print k, v
                    full_list.append(k)
                    if v == True:
                        verified_list.append(k)
            # print full_list
            # print '\n'
            # print verified_list
            return render(request, 'global_search/doctor/doctor_global_search_verified.html',
                          {'tab': 'verifiedfields', 'tab_listing': 'doctor_global_search_verify',
                           'full_list': full_list,
                           'verified_list': verified_list, 'doctor_data': doctor_data})
    except Exception as e:
        messages.success(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


###organisation global search

@login_required(login_url='/')
@csrf_exempt
def organisation_global_search(request, organisation_id=None):
    try:
        back_to_url = request.META.get('HTTP_REFERER')
        #print "~~!~!~!~!"
        if organisation_id:
            organisation_data = OrganisationName.objects.filter(id=organisation_id)
        else:
            organisation_data = []
        if len(organisation_data):
            if organisation_id:

                organisation_data = OrganisationName.objects.filter(id=organisation_id)
                valid_choice = ValidateByChoice.objects.all()
                try:
                    tab = request.GET['tab']
                except:
                    tab = '1'
                if UserManagement.objects.filter(user_id=request.user.id, is_caller=True):
                    user_data = UserManagement.objects.filter(is_reviewer=True, is_doctor_reviewer=True).values(
                        'user_id')
                    user_publisher_data = []
                elif UserManagement.objects.filter(user_id=request.user.id, is_reviewer=True):
                    user_data = UserManagement.objects.filter(is_caller=True, is_doctor_caller=True).values('user_id')
                    user_publisher_data = UserManagement.objects.filter(is_publisher=True).values('user_id')
                else:
                    user_data = []
                    user_publisher_data = []
                reviewer_user_data = User.objects.filter(id__in=user_data, is_active=True)
                publisher_user_data = User.objects.filter(id__in=user_publisher_data, is_active=True)
                user_data_complete = UserManagement.objects.all()
                department = []
                if organisation_data[0].department and organisation_data[0].department != '[]':
                    try:
                        department = map(int, organisation_data[0].department.split(","))
                    except Exception as e:
                        department = []
                facility = []
                if organisation_data[0].facility and organisation_data[0].facility != '[]':
                    try:
                        facility = map(int, organisation_data[0].facility.split(","))
                    except Exception as e:
                        facility = []
                if tab == '1' and request.method == "GET":
                    country_data = Country.objects.all()
                    state_master_obj = State.objects.all()
                    city_master_obj = City.objects.all()
                    locality_obj = Locality.objects.all()
                    facility_obj = Facility.objects.filter(delete=False).order_by('name')
                    department_obj = Department.objects.all().order_by('name')
                    hospital_type = Organisation_types.objects.filter(delete=False).order_by('type_name')
                    hospital_category = Organisation_categories.objects.filter(delete=False).order_by('category_name')

                    return render(request, 'global_search/organisation/organisation_global_search.html',
                                  {'organisation_data': organisation_data, 'country': country_data,
                                   'state': state_master_obj, 'city':
                                       city_master_obj, 'locality': locality_obj,
                                   'hospital_type': hospital_type,
                                   'hospital_category': hospital_category,
                                   'facility_obj': facility_obj,
                                   'department_obj': department_obj,
                                   'department': department,
                                   'facility': facility,
                                   'tab': tab,
                                   'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                                   'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                   'back_to_url': back_to_url})
                elif tab == '2':
                    action = request.POST.get('associate_doctor')
                    try:
                        show = request.GET['show']
                    except:
                        show = False

                    if action:
                        department_id = request.POST.get('department')
                        doctor_ids = request.POST.getlist('doctor_ids')
                        if doctor_ids and department_id:
                            count = 0
                            for d_id in doctor_ids:
                                AssociateDoctorWithOrganization_obj = AssociateDoctorWithOrganization.objects.filter(
                                    doctor_id=int(d_id), department_id=department_id,
                                    organisation_id=organisation_id
                                )
                                if len(AssociateDoctorWithOrganization_obj) == 0:
                                    AssociateDoctorWithOrganization.objects.create(doctor_id=int(d_id),
                                                                                   department_id=department_id,
                                                                                   organisation_id=organisation_id)
                                    # data = __doctor_data_creation(d_id)
                                    # response = elasticsearch_client.index_data("global", "doctor", d_id,data)
                                    # if response:
                                    #     count += 1
                                    #     doctor_obj = Doctor.objects.filter(id=d_id)
                                    #     if doctor_obj:
                                    #         doctor_obj.update(publish=True, stage=5)

                            # messages.success(request, "All doctors attached. No of Published doctors = "+str(count))
                            messages.success(request, "All doctors attached")
                    zone_filter = False
                    zone_location_filter_length = False
                    category_filter = False
                    AttachWithDoctor_obj = AttachWithDoctor.objects.filter(
                        organisation_id=organisation_id)
                    Live_Doctor_Commonwork_obj = Live_Doctor_Commonworkschedule.objects.filter(
                        clinic_id=organisation_id)
                    zone_obj = Zone.objects.all().order_by('name')
                    zone_location_obj = {}
                    category_obj = Category.objects.all().order_by('name')
                    department_obj = Department.objects.all().order_by('name')
                    zone = request.POST.get('zone')
                    if zone:
                        zone_filter = zone
                    category = request.POST.get('category')
                    zone_location = request.POST.get('zone_location')
                    try:
                        category_filter = int(category)
                    except:
                        category_filter = category
                    if zone_location:
                        zone_location_filter_length = zone_location
                    doctor_data_obj = []
                    if show == 'true':
                        doctor_data_obj = AttachWithDoctor.objects.filter(organisation_id=organisation_id).values(
                            'doctor_id')
                        doctor_data_obj = Doctor.objects.filter(id__in=doctor_data_obj)
                    if zone and category and zone_location:
                        doctor_data_obj = Doctor.objects.filter(zone_id=zone, zone_location_id=zone_location,
                                                                category_id=category, stage_id__gte=2, is_disable=False)
                    elif zone and category:
                        doctor_data_obj = Doctor.objects.filter(zone_id=zone, category_id=category, stage_id__gte=2,
                                                                is_disable=False)

                    return render(request, 'global_search/organisation/organisation_global_search.html', {
                        'tab': tab,
                        'department_obj': department_obj,
                        'doctor_data_obj': doctor_data_obj,
                        'organisation_data': organisation_data,
                        'zone_obj': zone_obj, 'Live_Doctor_Commonwork_obj': Live_Doctor_Commonwork_obj,
                        'category_obj': category_obj,
                        'zone_filter': zone_filter, 'zone_location_filter_length': zone_location_filter_length,
                        'AttachWithDoctor_obj': AttachWithDoctor_obj,
                        'category_filter': category_filter, 'zone_location_obj': zone_location_obj,
                        'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                        'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                        'back_to_url': back_to_url
                    })
                elif tab == '3':

                    org_gallery = OranisationImagery.objects.filter(organisation_id=organisation_id)
                    return render(request, 'global_search/organisation/organisation_global_search.html', {
                        'tab': tab,
                        'STATIC_URL_DOMAIN': STATIC_URL_DOMAIN,
                        'organisation_data': organisation_data,
                        'org_gallery': org_gallery,
                        'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                        'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                        'back_to_url': back_to_url
                    })
                elif tab == '4':
                    organisation = None
                    delete = None
                    planid = None

                    try:
                        organisation = OrganisationName.objects.get(id=organisation_id)
                    except:
                        organisation = None

                    if request.method == 'GET' and organisation:

                        try:
                            delete = request.GET.get('delete')
                            planid = request.GET.get('planid')
                        except:
                            delete = None
                            planid = None
                        if delete and planid:
                            try:
                                plan_obj_full = Organisation_plan.objects.get(organisation_id=organisation_id)
                                plan_obj = plan_obj_full.package_details
                            except:
                                plan_obj = {}
                            try:
                                if planid in list(plan_obj['plan_details'].keys()):
                                    del plan_obj['plan_details'][planid]
                                    plan_obj_full.package_details = plan_obj
                                    plan_obj_full.save()
                                    messages.success(request, 'Plan Successfully Deleted')
                                    return HttpResponseRedirect(
                                        '/global_search/organisation/' + str(organisation_id) + '/?tab=4')
                            except:
                                messages.success(request, 'Something Bad Happened')
                                return HttpResponseRedirect(
                                    '/global_search/organisation/' + str(organisation_id) + '/?tab=4')

                        plan_category_list = PlanCategory.objects.all()
                        provider_list = ServiceProvider.objects.all()
                        try:
                            plan_obj = Organisation_plan.objects.get(organisation_id=organisation_id)
                            plan = plan_obj.package_details
                            plan_list = plan['plan_details']
                        except:
                            plan_obj = None
                            plan_list = None
                        return render(request, 'global_search/organisation/organisation_global_search.html',
                                      {'organisation_data': organisation_data,
                                       'department': department,
                                       'facility': facility,
                                       'tab': tab,
                                       'reviewer_user_data': reviewer_user_data,
                                       'publisher_user_data': publisher_user_data,
                                       'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                       'organisation_id': organisation_id,
                                       'organisation': organisation,
                                       'provider_list': provider_list, 'plan_list': plan_list,
                                       'plan_category_list': plan_category_list, 'back_to_url': back_to_url})

                elif tab == '5':
                    organisation = None
                    profile_img = ''

                    try:
                        organisation = OrganisationName.objects.get(id=organisation_id)
                        image_data = request.FILES.get('image_data')
                    except:
                        image_data = None
                        organisation = None
                    if request.method == 'GET' and organisation:
                        try:
                            profile_img_obj = Organisation_profile_img.objects.get(organisation_id=organisation_id)
                        except Exception as e:

                            profile_img_obj = None
                        return render(request, 'global_search/organisation/organisation_global_search.html',
                                      {'organisation_data': organisation_data,
                                       'department': department,
                                       'facility': facility,
                                       'tab': tab,
                                       'reviewer_user_data': reviewer_user_data,
                                       'publisher_user_data': publisher_user_data,
                                       'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                       'profile_img_obj': profile_img_obj, 'back_to_url': back_to_url})



                    else:
                        messages.error(request, "not assign Organisation Found")
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            return HttpResponseRedirect(reverse('publisher-organisation-listing'))

                        return HttpResponseRedirect(reverse('organisation-global'))



                elif tab == '6':
                    organisation = None
                    delete = None
                    branchid = None
                    try:
                        organisation = OrganisationName.objects.get(id=organisation_id)
                    except:
                        organisation = None
                    if request.method == 'GET' and organisation:

                        try:
                            delete = request.GET.get('delete')
                            branchid = request.GET.get('branchid')
                        except:
                            delete = None
                            branchid = None
                        if delete and branchid:
                            try:
                                branch_obj_full = Organisation_branches.objects.get(organisation_id=organisation_id)
                                branch_obj = branch_obj_full.branches
                            except:
                                branch_obj = {'organisation_id': organisation_id, 'branch_details': {}}
                            try:
                                if branchid in list(branch_obj['branch_details'].keys()):
                                    del branch_obj['branch_details'][branchid]
                                    branch_obj_full.branches = branch_obj
                                    branch_obj_full.save()
                                    messages.success(request, 'Branch Successfully Deleted')
                                    return HttpResponseRedirect(
                                        '/organisation/edit/' + str(organisation_id) + '/?tab=6')
                            except:
                                messages.success(request, 'Something Bad Happened')
                                return HttpResponseRedirect('/organisation/edit/' + str(organisation_id) + '/?tab=6')

                        try:
                            branch_obj_full = Organisation_branches.objects.get(organisation_id=organisation_id)
                            branch_obj = branch_obj_full.branches['branch_details']
                        except:
                            branch_obj = None
                        country = Country.objects.all()
                        state = State.objects.all()
                        city = City.objects.all()
                        locality = Locality.objects.all()
                        return render(request, 'global_search/organisation/organisation_global_search.html',
                                      {'organisation_data': organisation_data,
                                       'department': department,
                                       'facility': facility,
                                       'tab': tab,
                                       'reviewer_user_data': reviewer_user_data,
                                       'publisher_user_data': publisher_user_data,
                                       'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                       'country': country, 'city': city, 'state': state, 'locality': locality,
                                       'branch_obj': branch_obj,
                                       'organisation_id': organisation_id,
                                       'organisation': organisation, 'back_to_url': back_to_url})
                    else:
                        messages.error(request, "Method Not Allowed")
                        is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                        if len(is_publisher):
                            return HttpResponseRedirect(reverse('publisher-organisation-listing'))

                        return HttpResponseRedirect(reverse('organisation-listing'))

                elif tab == '7':
                    org_object = OrganisationName.objects.get(id=organisation_id)
                    country = Country.objects.filter(delete=False)
                    state = State.objects.filter(delete=False)
                    city = City.objects.filter(delete=False)
                    locality = Locality.objects.filter(delete=False)
                    department_list = Department.objects.filter(delete=False).order_by('name')

                    try:
                        attach_obj = Attach_therapist_organisation.objects.filter(organisation_id=organisation_id)
                    except:
                        attach_obj = []
                    return render(request, 'global_search/organisation/organisation_global_search.html',
                                  {'organisation_data': organisation_data,
                                   'department_list': department_list,
                                   'tab': tab,
                                   'reviewer_user_data': reviewer_user_data,
                                   'publisher_user_data': publisher_user_data,
                                   'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                   'country': country, 'city': city, 'state': state, 'locality': locality,
                                   'organisation_id': organisation_id, 'org_object': org_object,
                                   'back_to_url': back_to_url, 'attach_obj': attach_obj})


                elif tab == '8':
                    org_object = OrganisationName.objects.get(id=organisation_id)
                    country = Country.objects.filter(delete=False)
                    state = State.objects.filter(delete=False)
                    city = City.objects.filter(delete=False)
                    locality = Locality.objects.filter(delete=False)
                    department_list = Department.objects.filter(delete=False).order_by('name')

                    try:
                        attach_obj2 = Attach_dietitian_organisation.objects.filter(organisation_id=organisation_id)
                    except:
                        attach_obj2 = []
                    return render(request, 'global_search/organisation/organisation_global_search.html',
                                  {'organisation_data': organisation_data,
                                   'department_list': department_list,
                                   'tab': tab,
                                   'reviewer_user_data': reviewer_user_data,
                                   'publisher_user_data': publisher_user_data,
                                   'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                   'country': country, 'city': city, 'state': state, 'locality': locality,
                                   'organisation_id': organisation_id, 'org_object': org_object,
                                   'back_to_url': back_to_url, 'attach_obj2': attach_obj2})

                # ######################################
                elif tab == '9':
                    country = Country.objects.filter(delete=False)
                    state = State.objects.filter(delete=False)
                    city = City.objects.filter(delete=False)
                    locality = Locality.objects.filter(delete=False)
                    department_list = Department.objects.filter(delete=False).order_by('name')

                    if request.method == 'GET':
                        organisation_data = OrganisationName.objects.filter(id=organisation_id)

                        fields_json = organisation_data[0].verified_fields

                        full_list = []
                        verified_list = []
                        for i in fields_json:
                            for k, v in i.items():
                                full_list.append(k)
                                if v == True:
                                    verified_list.append(k)
                        return render(request, 'global_search/organisation/organisation_global_search.html',
                                      {
                                          'tab': tab,
                                          'reviewer_user_data': reviewer_user_data,
                                          'publisher_user_data': publisher_user_data,
                                          'user_data_complete': user_data_complete,
                                          'organisation_id': organisation_id, 'organisation_data': organisation_data,
                                          'back_to_url': back_to_url,
                                          'full_list': full_list, 'verified_list': verified_list,
                                          'country': country, 'city': city, 'state': state, 'locality': locality,
                                          'department_list': department_list,
                                      })
                else:
                    messages.error(request, "No method available")
                    is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('organisation-global-search'))

                    return HttpResponseRedirect(reverse('organisation-global-search'))

        else:
            messages.error(request, "not assign Organisation Found")
            is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
            if len(is_publisher):
                return HttpResponseRedirect(reverse('organisation-global-search'))

            return HttpResponseRedirect(reverse('organisation-global-search'))
    except Exception as e:
        # print e
        raise Http404


@login_required(login_url='/')
@csrf_exempt
def lab_global_search(request, lab_id=None):
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True, is_path_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True, is_path_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    lab_accreditation_body = Lab_accreditation_body_master.objects.filter(delete=False)
    lab_type_obj = Lab_type_master.objects.filter(delete=False)
    country_obj = Country.objects.filter(delete=False)
    state_obj = State.objects.filter(delete=False)
    city = City.objects.filter(delete=False)
    locality = Locality.objects.filter(delete=False)
    lab_services = Lab_services_master.objects.filter(delete=False)
    lab_departments = Lab_department_master.objects.filter(delete=False)
    try:
        tab = request.GET.get('tab')
    except:
        tab = None
    #print tab, " : "
    try:
        if lab_id is not None and tab == '1' and request.method == "GET":
            lab = Labs.objects.get(id=lab_id)

            if lab.lab_doctors_on_board:
                lab_doctors_list = lab.lab_doctors_on_board.split(',')
            else:
                lab_doctors_list = None
            alist = []
            accre = ''
            acrredition_list = []
            if lab:
                accre = lab.lab_accreditation_body
                if accre:
                    alist = accre.split(',')
                    for i in alist:
                        acrredition_list.append(int(i.strip()))
                else:
                    acrredition_list = []
            slist = []
            serv = ''
            service_list = []
            if lab:
                serv = lab.lab_services
                if serv:
                    slist = serv.split(',')
                    for i in slist:
                        service_list.append(int(i.strip()))
                else:
                    service_list = []
                dlist = []
                dep = ''
                department_list = []
                if lab:
                    dep = lab.lab_departments
                    if dep:
                        dlist = dep.split(',')
                        for i in dlist:
                            department_list.append(int(i.strip()))
                    else:
                        department_list = []

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True

                return render(request, 'global_search/lab_global_search.html',
                              {'tab': 'basic', 'tab_listing': 'lab_global_search', 'lab': lab,
                               'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'valid_choice': valid_choice, 'tab': '1', 'doctors_on_board': lab_doctors_list,
                               'lab_accreditation_body': lab_accreditation_body, 'lab_type_obj': lab_type_obj,
                               'city': city, 'locality': locality, 'acrredition_list': acrredition_list,
                               'service_list': service_list, 'lab_services': lab_services,
                               'lab_departments': lab_departments, 'department_list': department_list,
                               'user_is_publisher': user_is_publisher})
            else:
                messages.error(request, 'Lab could not be found')
                return HttpResponseRedirect('/global_search/lab/')

        elif lab_id is not None and tab == '2' and request.method == "GET":
            delete = None
            test_name = None
            test_name2 = None
            edit = None
            test_price = None
            lab = Labs.objects.get(id=lab_id)
            try:
                delete = request.GET.get('delete')
                test_name = request.GET.get('test_name')
            except:
                delete = None
                test_name2 = None
            try:
                edit = request.GET.get('edit')
                test_name2 = request.GET.get('test_name2')
                test_price = request.POST.get('test_price')
            except:
                delete = None
                test_name = None
                test_price = None
            if delete and test_name and lab:
                try:
                    tests = lab.tests
                    try:
                        del tests['test_details'][test_name]
                    except:
                        messages.success(request, "Plan Name Key not found")
                        return redirect(reverse('lab-global-search', args=[lab_id, ]) + '?tab=2')
                except:
                    tests = {'lab_id': lab_id, 'test_details': {}}
                    try:
                        del tests['test_details'][test_name]
                    except:
                        messages.success(request, "Plan Name Key not found")
                        return redirect(reverse('lab-global-search', args=[lab_id, ]) + '?tab=2')

                lab.tests = tests
                lab.save()
                messages.success(request, "Successfully Deleted Test")
                return redirect(reverse('lab-global-search', args=[lab_id, ]) + '?tab=2')

            if edit and test_name2 and test_price and lab:
                try:
                    tests = lab.tests
                    if tests:
                        try:
                            tests['test_details'][test_name2] = test_price
                            lab.tests = tests
                            lab.save()
                            messages.success(request, "Lab Test Successfully updated")
                            return redirect(reverse('lab-global-search', args=[lab_id, ]) + '?tab=2')
                        except:
                            tests['test_details'].update({test_name2: test_price})
                            lab.tests = tests
                            lab.save()
                            messages.success(request, "Lab Test Successfully added")
                            return redirect(reverse('lab-global-search', args=[lab_id, ]) + '?tab=2')
                    else:
                        tests = {'lab_id': lab_id, 'test_details': {}}
                        tests['test_details'].update({test_name2: test_price})
                        lab.tests = tests
                        lab.save()
                        messages.success(request, "Lab Test Successfully added")
                        return redirect(reverse('lab-global-search', args=[lab_id, ]) + '?tab=2')

                except:
                    tests = {'lab_id': lab_id, 'test_details': {}}
                    tests['test_details'].update({test_name2: test_price})
                    lab.tests = tests
                    lab.save()
                    messages.success(request, "Lab Test Successfully added")
                    return redirect(reverse('lab-global-search', args=[lab_id, ]) + '?tab=2')

            elif lab:
                try:
                    tests = lab.tests
                    if tests:
                        pass
                    else:
                        tests = {'lab_id': lab_id, 'test_details': {}}
                except:
                    tests = {'lab_id': lab_id, 'test_details': {}}

                if len(tests['test_details'].keys()) < 1:
                    tests = {'lab_id': lab_id, 'test_details': {}}

                lab_tests_all = Lab_test_master.objects.filter(delete=False)
                return render(request, 'global_search/lab_global_search.html',
                              {'tab': '2', 'tab_listing': 'lab_listing', 'lab': lab,
                               'tests': tests['test_details'], 'lab_tests_all': lab_tests_all
                               })
            else:
                messages.error(request, 'Something Bad Happened')
                return HttpResponseRedirect('/lab/global_search/')


        elif tab == '3':
            lab = None
            delete = None
            branchid = None
            update = None
            update_branch = None

            try:
                lab = Labs.objects.get(id=lab_id)
            except:
                lab = None

            if request.method == 'GET' and lab:
                try:
                    delete = request.GET.get('delete')
                    branchid = request.GET.get('branchid')
                except:
                    delete = None
                    branchid = None

                try:
                    update = request.GET.get('update')
                    branchid = request.GET.get('branchid')
                except:
                    update = None
                    branchid = None

                if delete and branchid:
                    try:
                        branch_obj_full = Lab_branches.objects.get(lab_id=lab_id)
                        branch_obj = branch_obj_full.branches
                    except:
                        branch_obj = {'lab_id': lab_id, 'branch_details': {}}
                    try:
                        if branchid in list(branch_obj['branch_details'].keys()):
                            del branch_obj['branch_details'][branchid]
                            branch_obj_full.branches = branch_obj
                            branch_obj_full.save()
                            messages.success(request, 'Branch Successfully Deleted')
                            return HttpResponseRedirect('/lab/global_search/' + str(lab_id) + '/?tab=3')
                    except:
                        messages.success(request, 'Something Bad Happened')
                        return HttpResponseRedirect('/lab/global_search/' + str(lab_id) + '/?tab=3')

                try:
                    branch_obj_full = Lab_branches.objects.get(lab_id=lab_id)
                    branch_obj = branch_obj_full.branches['branch_details']
                except:
                    branch_obj = None
                country = Country.objects.filter(delete=False)
                state = State.objects.filter(delete=False)
                city = City.objects.filter(delete=False)
                locality = Locality.objects.filter(delete=False)
                return render(request, 'global_search/lab_global_search.html',
                              {
                                  'tab': tab,
                                  'reviewer_user_data': reviewer_user_data,
                                  'publisher_user_data': publisher_user_data,
                                  'valid_choice': valid_choice,
                                  'country': country, 'city': city, 'state': state, 'locality': locality,
                                  'branch_obj': branch_obj,
                                  'lab_id': lab_id,
                                  'lab': lab, 'back_to_url': back_to_url, 'lab_type_obj': lab_type_obj})

                try:
                    branch_obj_full = Lab_branches.objects.get(lab_id=lab_id)
                    branch_obj = branch_obj_full.branches['branch_details']
                except:
                    branch_obj = None
                country = Country.objects.all()
                state = State.objects.all()
                city = City.objects.all()
                locality = Locality.objects.all()
                return render(request, 'global_search/lab_global_search.html',
                              {
                                  'tab': tab,
                                  'reviewer_user_data': reviewer_user_data,
                                  'publisher_user_data': publisher_user_data,
                                  'valid_choice': valid_choice,
                                  'country': country, 'city': city, 'state': state, 'locality': locality,
                                  'branch_obj': branch_obj,
                                  'lab_id': lab_id,
                                  'lab': lab, 'back_to_url': back_to_url, 'lab_type_obj': lab_type_obj})

            else:
                messages.error(request, "Method Not Allowed")
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-lab-listing'))

                return HttpResponseRedirect(reverse('lab-listing'))

        elif tab == '4':
            lab = None
            delete = None
            planid = None
            try:
                lab = Labs.objects.get(id=lab_id)
            except:
                lab = None
            if request.method == 'GET' and lab:

                try:
                    delete = request.GET.get('delete')
                    planid = request.GET.get('planid')
                except:
                    delete = None
                    planid = None
                if delete and planid:
                    try:
                        plan_obj_full = Labs_plan.objects.get(lab_id=lab_id)
                        plan_obj = plan_obj_full.package_details
                    except:
                        plan_obj = {}
                    try:
                        if planid in list(plan_obj['plan_details'].keys()):
                            del plan_obj['plan_details'][planid]
                            plan_obj_full.package_details = plan_obj
                            plan_obj_full.save()
                            messages.success(request, 'Plan Successfully Deleted')
                            return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=4')
                    except:
                        messages.success(request, 'Something Bad Happened')
                        return HttpResponseRedirect('/lab/edit/' + str(lab_id) + '/?tab=4')

                plan_category_list = PlanCategory.objects.all()
                provider_list = ServiceProvider.objects.all()
                try:
                    plan_obj = Labs_plan.objects.get(lab_id=lab_id)
                    plan = plan_obj.package_details
                    plan_list = plan['plan_details']
                except:
                    plan_obj = None
                    plan_list = None
                return render(request, 'global_search/lab_global_search.html',
                              {
                                  'tab': tab,
                                  'reviewer_user_data': reviewer_user_data,
                                  'publisher_user_data': publisher_user_data,
                                  'valid_choice': valid_choice,
                                  'lab_id': lab_id,
                                  'lab': lab,
                                  'provider_list': provider_list, 'plan_list': plan_list,
                                  'plan_category_list': plan_category_list, 'back_to_url': back_to_url})

        elif tab == '5':
            if request.method == 'GET':
                lab = Labs.objects.get(id=lab_id)
                fields_json = lab.verified_fields

                full_list = []
                verified_list = []
                for i in fields_json:
                    for k, v in i.items():
                        full_list.append(k)
                        if v == True:
                            verified_list.append(k)
                return render(request, 'global_search/lab_global_search.html',
                              {
                                  'tab': tab,
                                  'reviewer_user_data': reviewer_user_data,
                                  'publisher_user_data': publisher_user_data,
                                  'valid_choice': valid_choice,
                                  'lab_id': lab_id,
                                  'lab': lab,
                                  'back_to_url': back_to_url,
                                  'full_list': full_list,
                                  'verified_list': verified_list
                              })

            else:
                messages.error(request, "No method available")
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-lab-listing'))
                return HttpResponseRedirect(reverse('lab-global-search'))
    except Exception as e:
        # print e
        raise Http404


@login_required(login_url='/')
@csrf_exempt
def pharmacy_global_search(request, pharmacy_id=None):
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True, is_phar_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True, is_phar_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    type_obj = MedicalPharmacyStoreType.objects.filter(delete=False)
    service_obj = MedicalPharmacyStoreServices.objects.filter(delete=False)
    try:
        if pharmacy_id is not None and request.method == "GET":
            pharmacy = MedicalPharmacyStore.objects.get(id=pharmacy_id)
            country_obj = Country.objects.all()
            state_obj = State.objects.all()
            if pharmacy:
                if pharmacy.services:
                    pharmacy_services_list = pharmacy.services.split(',')
                else:
                    pharmacy_services_list = None

                if pharmacy.type:
                    pharmacy_type_list = pharmacy.type.split(',')
                else:
                    pharmacy_type_list = None

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                city = City.objects.filter(delete=False)
                locality = Locality.objects.filter(delete=False)
                return render(request, 'global_search/pharmacy_global_search.html',
                              {'tab': 'basic', 'tab_listing': 'pharmacy_global_search', 'pharmacy': pharmacy,
                               'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'valid_choice': valid_choice, 'type_obj': type_obj,
                               'service_obj': service_obj, 'pharmacy_services_list': pharmacy_services_list,
                               'pharmacy_type_list': pharmacy_type_list, 'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality})
            else:
                return HttpResponseRedirect('global_search/pharmacy/')

    except Exception as e:
        pass


@login_required(login_url='/')
@csrf_exempt
def rehab_global_search(request, rehab_id=None):
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,
                                                       is_physio_rehab_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True, is_physio_rehab_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    country_obj = Country.objects.filter(delete=False)
    state_obj = State.objects.filter(delete=False)
    city = City.objects.filter(delete=False)
    locality = Locality.objects.filter(delete=False)
    rehab_type_master = Rehab_type_master.objects.filter(delete=False)
    rehab_services_master = RehabServices.objects.filter(delete=False)
    rehab_speciality_master = Rehab_speciality_master.objects.filter(delete=False)
    try:
        tab = request.GET.get('tab')
    except:
        tab = None
    try:
        if rehab_id is not None and tab == '1' and request.method == "GET":
            rehab_obj = RehabCenter.objects.get(id=rehab_id)
            if rehab_obj:
                if rehab_obj.services:
                    rehab_services_list = rehab_obj.services.split(',')
                else:
                    rehab_services_list = None

                if rehab_obj.speciality:
                    rehab_speciality_list = rehab_obj.speciality.split(',')
                else:
                    rehab_speciality_list = None
                if rehab_obj.type:
                    rehab_type_list = rehab_obj.type.split(',')
                else:
                    rehab_type_list = None
                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                return render(request, 'global_search/rehab_global_search.html',
                              {'tab': 'basic', 'tab_listing': 'rehab-global-search', 'rehab_obj': rehab_obj,
                               'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'valid_choice': valid_choice, 'tab': '1',
                               'city': city, 'locality': locality,
                               'rehab_services_list': rehab_services_list,
                               'rehab_speciality_list': rehab_speciality_list,
                               'rehab_type_list': rehab_type_list,
                               'rehab_type_master': rehab_type_master,
                               'rehab_services_master': rehab_services_master,
                               'rehab_speciality_master': rehab_speciality_master,
                               'user_is_publisher': user_is_publisher
                               })
            else:
                messages.error(request, 'Rehab could not be found')
                return HttpResponseRedirect('/global_search/rehab/')

    except  Exception as e:
        # print e
        raise Http404


@login_required(login_url='/')
@csrf_exempt
def ambulance_global_search(request, ambulance_id=None):
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_ambulance_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_ambulance_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    try:
        if ambulance_id is not None and request.method == "GET":
            ambulance = Ambulance.objects.get(id=ambulance_id)
            country_obj = Country.objects.filter(delete=False)
            state_obj = State.objects.filter(delete=False)
            city = City.objects.filter(delete=False)
            locality = Locality.objects.filter(delete=False)
            if ambulance:
                ambulance_service_master =  AmbulanceServices.objects.filter(delete =False)
                ambulance_current_services = ambulance.service
                if ambulance_current_services:
                    ambulance_current_services = ambulance_current_services.split(',')
                if ambulance_current_services:
                    bsl = []
                    for i in ambulance_current_services:
                        bsl.append(int(i.strip()))
                    ambulance_current_services = bsl
                ambulance_type_master = Ambulance_type_master.objects.filter(delete=False)
                ambulance_current_type = ambulance.type
                if ambulance_current_type:
                    ambulance_current_type= ambulance_current_type.split(',')
                if ambulance_current_type:
                    bsl = []
                    for i in ambulance_current_type:
                        bsl.append(int(i.strip()))
                    ambulance_current_type = bsl
                locality = Locality.objects.filter(delete=False)
                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                return render(request, 'global_search/ambulance_global_search.html',
                              {'tab': 'basic', 'tab_listing': 'ambulance-global-search', 'ambulance': ambulance,
                               'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'valid_choice': valid_choice,'ambulance_current_services':ambulance_current_services,
                               'ambulance_service_master': ambulance_service_master,'ambulance_type_master':ambulance_type_master,
                               'ambulance_current_services':ambulance_current_services,'ambulance_current_type':ambulance_current_type,'locality':locality,
                               'user_is_publisher': user_is_publisher,'city':city,'locality':locality})
            else:
                return HttpResponseRedirect('/global_search/ambulance/')

    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - therapist-global-search                                   #
# BY NISHANK                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def therapist_global_search(request, therapist_id=None):
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_therapist_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_therapist_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    country_obj = Country.objects.filter(delete=False)
    state_obj = State.objects.filter(delete=False)
    city = City.objects.filter(delete=False)
    locality = Locality.objects.filter(delete=False)
    therapist_type_master = Therapist_type_master.objects.filter(delete=False)
    therapist_services_master = TherapistServices.objects.filter(delete=False)
    therapist_speciality_master = Therapist_speciality_master.objects.filter(delete=False)
    therapist_services_list = None
    therapist_type_list = None
    therapist_speciality_list = None
    try:
        tab = request.GET.get('tab')
    except:
        tab = None
    try:
        if therapist_id is not None and tab == '1' and request.method == "GET":
            therapist_obj = Therapist.objects.get(id=therapist_id)
            if therapist_obj:
                if therapist_obj.services :
                    therapist_services_list = therapist_obj.services.split(',')
                else:
                    therapist_services_list = None

                if therapist_obj.type :
                    therapist_type_list = therapist_obj.type.split(',')
                else:
                    therapist_type_list = None

                if therapist_obj.speciality :
                    therapist_speciality_list = therapist_obj.speciality.split(',')
                else:
                    therapist_speciality_list = None
                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                return render(request, 'global_search/therapist_global_search.html',
                              {'tab_listing': 'therapist_listing', 'therapist_obj': therapist_obj,
                               'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,
                               'valid_choice': valid_choice, 'tab':'1',
                                'therapist_services_list':therapist_services_list,
                                'therapist_type_list':therapist_type_list,
                                'therapist_services_master':therapist_services_master,
                                'therapist_type_master':therapist_type_master,
                                'therapist_speciality_master':therapist_speciality_master,
                                'therapist_speciality_list':therapist_speciality_list,
                                })
            else:
                messages.error(request,'Therapist could not be found')
                return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=1')
        elif therapist_id is not None and tab == '1' and request.method == "POST":
            name = request.POST['name'].strip()
            institution = request.POST['institution'].strip()
            qualification = request.POST['qualification'].strip()
            experience = request.POST['experience'].strip()
            services = request.POST.getlist('therapist_services')
            type = request.POST.getlist('therapist_type')
            speciality = request.POST.getlist('therapist_speciality')
            therapist_locality_coverage_from = request.POST['locality_idfrom'].strip()
            therapist_locality_coverage_to = request.POST['locality_idto'].strip()
            rates = request.POST['rates'].strip()
            address = request.POST['address'].strip()
            pincode = request.POST.get('apincode').strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip()
            location = request.POST['locality_id'].strip()
            email = request.POST['email'].strip()
            telephone = request.POST['telephone'].strip()
            alternate_telephone = request.POST['alternate_telephone'].strip()
            mobile = request.POST['mobile'].strip()
            remarks = request.POST['remarks'].strip()

            tempstr = ''
            cc = 0
            if services and services != []:
                for i in services:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            services = tempstr

            tempstr = ''
            cc = 0
            if speciality and speciality != []:
                for i in speciality:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            speciality = tempstr


            tempstr = ''
            cc = 0
            if type and type != [] :
                for i in type:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            type = tempstr


            therapist_obj = Therapist.objects.get(pk=therapist_id)
            if therapist_obj:
                therapist_obj.name = name
                therapist_obj.address = address
                therapist_obj.pincode = pincode
                therapist_obj.country_id = country
                therapist_obj.state_id = state
                therapist_obj.city_id = city
                therapist_obj.locality_id = location
                therapist_obj.rates = rates
                therapist_obj.qualification = qualification
                therapist_obj.institution = institution
                therapist_obj.experience = experience
                therapist_obj.services = services
                therapist_obj.type = type
                therapist_obj.rates = rates
                therapist_obj.telephone = telephone
                therapist_obj.alternate_telephone = alternate_telephone
                therapist_obj.email = email
                therapist_obj.mobile = mobile
                therapist_obj.remarks = remarks
                therapist_obj.speciality = speciality
                if therapist_locality_coverage_to != 'msg':
                    therapist_obj.therapist_locality_coverage_to_id = therapist_locality_coverage_to
                else:
                    therapist_obj.therapist_locality_coverage_to = None

                if therapist_locality_coverage_from != 'msg':
                    therapist_obj.therapist_locality_coverage_from_id = therapist_locality_coverage_from
                else:
                    therapist_obj.therapist_locality_coverage_from = None
                therapist_obj.save()
                messages.success(request, 'Therapist Data Successfully Updated')
                return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=1')
            else:
                messages.error(request, 'Therapist Not Found in records')
                return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=1')

        elif therapist_id is not None and tab == '2' and request.method == "GET":
            delete = None
            package_id = None
            therapist_obj = Therapist.objects.get(id=therapist_id)
            try:
                delete = request.GET.get('delete')
                package_id = request.GET.get('package_id')

            except:
                delete = None
                package_id = None

            if delete and package_id and therapist_obj:
                try:
                    packages = therapist_obj.packages
                    try:
                        del packages['package_list'][package_id]
                    except:
                        messages.success(request, "Package ID not found")
                        return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')
                except:
                    packages = {'package_id': package_id, 'package_list': {}}
                    try:
                        del packages['package_list'][package_id]
                    except:
                        messages.success(request, "Package ID not found")
                        return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')

                therapist_obj.packages = packages
                therapist_obj.save()
                messages.success(request, "Successfully Deleted Package")
                return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')

            elif therapist_obj:
                try:
                    packages = therapist_obj.packages
                    if packages:
                        donothing = True
                    else:
                        packages = {'therapist_id': therapist_id, 'package_list': {}}
                except:
                    packages = {'therapist_id': therapist_id, 'package_list': {}}

                if len(packages['package_list'].keys()) < 1:
                    packages = {'therapist_id': therapist_id, 'package_list': {}}

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                return render(request, 'global_search/therapist_global_search.html',
                              {'tab': '2', 'tab_listing': 'therapist_listing', 'therapist_obj': therapist_obj,
                               'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,'valid_choice': valid_choice,
                               'therapist_services_list': therapist_services_list,
                               'therapist_type_list': therapist_type_list,
                               'therapist_services_master': therapist_services_master,
                               'therapist_type_master': therapist_type_master,
                               'therapist_speciality_master ': therapist_speciality_master,
                               'therapist_speciality_list': therapist_speciality_list,
                               })
            else:
                messages.error(request, 'Something Bad Happened')
                return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')

        if tab == '2' and request.method == "POST":
            therapist_obj = Therapist.objects.get(id=therapist_id)
            package_name_list = None
            package_price_list = None
            ackage_description_list = None
            edit = None
            package_name2 = None
            package_price = None
            package_description = None
            package_id = None
            try:
                package_name_list = request.POST.getlist('package_name')
                package_price_list = request.POST.getlist('package_price')
                package_description_list = request.POST.getlist('package_description')
            except:
                package_name_list = None
                package_price_list = None
                package_description_list = None
                package_id = None
            try:
                edit = request.POST.get('edit')
                package_id = request.POST.get('package_id')
                package_name2 = request.POST.get('package_name2')
                package_price = request.POST.get('package_price')
                package_description = request.POST.get('package_description')
            except:
                edit = None
                package_name2 = None
                package_price = None
                package_description = None
                package_id = None

            if edit and package_id and therapist_obj:
                try:
                    packages = therapist_obj.packages
                    if packages and package_id:
                        try:
                            packages['package_list'][package_id]['package_name'] = package_name2
                            packages['package_list'][package_id]['package_price'] = package_price
                            packages['package_list'][package_id]['package_description'] = package_description
                            therapist_obj.packages = packages
                            therapist_obj.save()

                            messages.success(request, "Therapist Package Successfully UPDATED")
                            return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')
                        except:
                            packages['package_list'].update({package_id: {'package_name': package_name2,
                                                                          'package_price': package_price,
                                                                          'package_description':
                                                                              package_description}})
                            therapist_obj.packages = packages
                            therapist_obj.save()
                            messages.success(request, "Therapist Plan Successfully ADDED")
                            return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')
                    else:
                        if (not packages) and package_id:
                            packages = {'therapist_id': therapist_id, 'package_list': {}}
                            packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                          'package_price':package_price,
                                                                          'package_description':package_description}})
                            therapist_obj.packages = packages
                            therapist_obj.save()
                            messages.success(request, "Therapist Plan Successfully ADDED")
                            return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')
                        else:
                            messages.error(request, "No Plan ID Received")
                            return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')
                except:

                    packages = {'therapist_id': therapist_id, 'package_list': {}}
                    packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                  'package_price':package_price,
                                                                  'package_description':package_description}})
                    therapist_obj.packages = packages
                    therapist_obj.save()
                    messages.success(request, "Therapist Package Successfully ADDED")
                    return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')

            if package_name_list and package_price_list and package_description_list and therapist_obj:
                try:
                    packages = therapist_obj.packages
                    if packages:
                        pass
                    else:
                        packages = {'therapist_id': therapist_id, 'package_list': {}}
                except:
                    packages = {'therapist_id': therapist_id, 'package_list': {}}
                if len(packages['package_list'].keys()) < 1:
                    packages = {'therapist_id': therapist_id, 'package_list': {}}

                for i in range(0, len(package_name_list)):
                    package_id = str(uuid.uuid4())
                    packages['package_list'].update({package_id: {'package_name': package_name_list[i],
                                                                  'package_price': package_price_list[i],
                                                                  'package_description': package_description_list[i]}})
                therapist_obj.packages = packages
                therapist_obj.save()
                messages.success(request, 'Test Details Successfully Updated')

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True

                return render(request, 'global_search/therapist_global_search.html',
                              {'tab': '2', 'tab_listing': 'therapist_listing', 'therapist_obj': therapist_obj,
                               'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,'valid_choice': valid_choice,
                               'therapist_services_list': therapist_services_list,
                               'therapist_type_list': therapist_type_list,
                               'therapist_services_master': therapist_services_master,
                               'therapist_type_master': therapist_type_master,
                               'therapist_speciality_master ': therapist_speciality_master,
                               'therapist_speciality_list': therapist_speciality_list,
                               })
            else:
                messages.error(request, 'Required data not received')
                return redirect(reverse('therapist-listing-edit', args=[therapist_id, ]) + '?tab=2')

        if tab == '3' and request.method == "GET" and therapist_id:
            therapist_obj = Therapist.objects.get(id=therapist_id)
            try:
                delog = request.GET.get('delog').strip()
            except:
                delog = None
            try:
                org_id = request.GET.get('org_id').strip()
            except:
                org_id = None

            if therapist_obj and org_id and delog=='delog':
                try:
                    attach_obj = Attach_therapist_organisation.objects.get(therapist_id=therapist_id,
                                                                           organisation_id=org_id)
                except:
                    attach_obj = None
                if attach_obj:
                    attach_obj.delete()
                    messages.error(request, "ASSOCIATION SUCCESSFULLY DELETED")
                    return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")
                else:
                    messages.error(request, "ASSOCIATION NOT FOUND- hence not deleted")
                    return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

            elif therapist_obj:
                attachlist = Attach_therapist_organisation.objects.filter(therapist_id=therapist_id)
                if len(attachlist) < 1:
                    attachlist = None

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                department_obj = Department.objects.all().order_by('name')
                return render(request, 'global_search/therapist_global_search.html',
                              {'tab': '3', 'tab_listing': 'therapist_listing', 'therapist_obj': therapist_obj,
                               'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,
                               'valid_choice': valid_choice,
                               'attachlist': attachlist,
                               'therapist_services_list': therapist_services_list,
                               'therapist_type_list': therapist_type_list,
                               'therapist_services_master': therapist_services_master,
                               'therapist_type_master': therapist_type_master,
                               'department_obj':department_obj,
                               'therapist_speciality_master ': therapist_speciality_master,
                               'therapist_speciality_list': therapist_speciality_list,
                               })
            else:
                messages.error(request, 'Required data not received')
                return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

        if tab == '3' and request.method == "POST" and therapist_id:
            therapist_obj = Therapist.objects.get(id=therapist_id)
            if therapist_obj:
                add = None
                edit = None
                try:
                    add = request.POST.get('add').strip()
                except:
                    add = None
                try:
                    edit = request.POST.get('edit').strip()
                except:
                    edit = None

                if add == "yes_please" :
                    try:
                        org_id = request.POST.get('diet_org_id').strip()
                    except:
                        org_id = None
                    try:
                        department_id = request.POST.get('department_id').strip()
                    except:
                        department_id = None

                    if org_id:
                        consultancy_fee = None
                        consultancy_fee = request.POST.get('consultancy_fee').strip()
                        attach_obj = None
                        attach_exists = False

                        try:
                            attach_obj = Attach_therapist_organisation.objects.get(therapist_id=therapist_id,organisation_id=org_id)
                        except:
                            attach_obj = None
                        if attach_obj:
                            attach_obj.consultancy_fee = consultancy_fee
                            attach_obj.org_department_id = department_id
                            attach_obj.save()
                            messages.error(request, "ASSOCIATION ALREADY EXISTS - CONSULTANCY FEE SUCCESSFULLY UPDFATED")
                            return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")
                        else:
                            attach_obj = Attach_therapist_organisation(therapist_id=therapist_id,organisation_id=org_id,consultancy_fee=consultancy_fee,org_department_id=department_id)
                            attach_obj.save()
                            messages.success(request, "ASSOCIATION CREATED")
                            return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")
                    else:
                        messages.error(request, 'Organisation id not received')
                        return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

                if edit == "edit" :
                    try:
                        org_id = request.POST.get('org_id').strip()
                    except:
                        org_id = None
                    try:
                        department_id = request.POST.get('department_id').strip()
                    except:
                        department_id = None

                    if org_id:
                        consultancy_fee = None
                        consultancy_fee = request.POST.get('consultancy_fee').strip()
                        attach_obj = None
                        attach_exists = False
                        try:
                            attach_obj = Attach_therapist_organisation.objects.get(therapist_id=therapist_id,organisation_id=org_id)
                        except:
                            attach_obj = None
                        if attach_obj:
                            attach_obj.consultancy_fee = consultancy_fee
                            attach_obj.org_department_id = department_id
                            attach_obj.save()
                            messages.success(request, "ASSOCIATION SUCCESSFULLY UPDFATED")
                            return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")
                        else:
                            attach_obj = Attach_therapist_organisation(therapist_id=therapist_id,organisation_id=org_id,consultancy_fee=consultancy_fee)
                            attach_obj.save()
                            messages.success(request, "ASSOCIATION NOT FOUND - NEW ASSOCIATION CREATED")
                            return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

                    else:
                        messages.error(request, 'Organisation id not received')
                        return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

                else:
                    messages.error(request, 'Add/ Edit action not specified')
                    return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

            else:
                messages.error(request, 'Therapist data not received')
                return HttpResponseRedirect("/therapist/edit/" + therapist_id + "/?tab=3")

    except  Exception as e:
        #print e
        raise Http404



####################################################################
# Name - nurse_bureau_global_search                                #
# BY NISHANK                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def nurse_bureau_global_search(request, nurse_bureau_id=None):
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_nurse_bureau_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_nurse_bureau_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    country_obj = Country.objects.filter(delete=False)
    state_obj = State.objects.filter(delete=False)
    city = City.objects.filter(delete=False)
    locality = Locality.objects.filter(delete=False)
    nurse_bureau_type_master = Rehab_type_master.objects.filter(delete=False)   # TODO : TO BE DELETED
    nurse_bureau_services_master = Nurse_bureauServices.objects.filter(delete=False)
    nurse_bureau_speciality_master = Nurse_bureau_speciality_master.objects.filter(delete=False)
    try:
        tab = request.GET.get('tab')
    except:
        tab = None
    try:
        if nurse_bureau_id is not None and tab == '1' and request.method == "GET":
            nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id)
            if nurse_bureau_obj:
                if nurse_bureau_obj.services :
                    nurse_bureau_services_list = nurse_bureau_obj.services.split(',')
                else:
                    nurse_bureau_services_list = None
                if nurse_bureau_obj.speciality :
                    nurse_bureau_speciality_list = nurse_bureau_obj.speciality.split(',')
                else:
                    nurse_bureau_speciality_list = None
                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                return render(request, 'global_search/nurse_bureau_global_search.html',
                              {'tab': 'basic', 'tab_listing': 'nurse_bureau-listing', 'nurse_bureau_obj': nurse_bureau_obj,
                               'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,
                               'valid_choice': valid_choice, 'tab':'1',
                                'nurse_bureau_services_list':nurse_bureau_services_list,
                                'nurse_bureau_speciality_list':nurse_bureau_speciality_list,
                                'nurse_bureau_services_master':nurse_bureau_services_master,
                                'nurse_bureau_speciality_master':nurse_bureau_speciality_master,

                                })
            else:
                messages.error(request,'Nurse Bureau could not be found')
                return HttpResponseRedirect('/nurse_bureau/listing/')

        elif nurse_bureau_id is not None and tab == '1' and request.method == "POST":
            name = request.POST['name'].strip()
            address = request.POST['address'].strip()
            pincode = request.POST.get('apincode').strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip(),
            city = city[0]
            location = request.POST['locality_id'].strip()
            certification = request.POST['certification'].strip()
            experience = request.POST['experience'].strip()
            services = request.POST.getlist('nurse_bureau_services')
            speciality = request.POST.getlist('nurse_bureau_speciality')
            nurse_bureau_locality_coverage_from = request.POST['locality_idfrom'].strip()
            nurse_bureau_locality_coverage_to = request.POST['locality_idto'].strip()
            email = request.POST['email'].strip()
            rates = request.POST['rates'].strip()
            telephone = request.POST['telephone'].strip()
            mobile = request.POST['mobile'].strip()
            contact_person = request.POST['contact_person'].strip()
            branches = request.POST['branches'].strip()
            website = request.POST['website'].strip()
            nurse_bureau_packages = request.POST['nurse_bureau_packages'].strip()
            no_of_nurses = request.POST['no_of_nurses'].strip()
            nurses_experience = request.POST['nurses_experience'].strip()
            contact_person_contact_no = request.POST['contact_person_contact_no'].strip()
            contact_person_email = request.POST['contact_person_email'].strip()
            remarks = request.POST['remarks'].strip()
            tempstr = ''
            cc = 0
            if services:
                for i in services:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            services = tempstr

            tempstr = ''
            cc = 0
            if speciality:
                for i in speciality:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            speciality = tempstr

            try:
                is_emergency = request.POST['is_emergency'].strip()
            except:
                is_emergency = '0'
            if is_emergency == '1':
                is_emergency = True
            else:
                is_emergency = False

            nurse_bureau_obj = Nurse_Bureau.objects.get(pk=nurse_bureau_id)

            if nurse_bureau_obj:
                nurse_bureau_obj.name = name
                nurse_bureau_obj.address = address
                nurse_bureau_obj.pincode = pincode
                nurse_bureau_obj.country_id = country
                nurse_bureau_obj.state_id = state
                nurse_bureau_obj.city_id = city
                nurse_bureau_obj.locality_id = location
                nurse_bureau_obj.rates = rates
                nurse_bureau_obj.certification = certification
                nurse_bureau_obj.experience = experience
                nurse_bureau_obj.services = services
                nurse_bureau_obj.speciality = speciality
                nurse_bureau_obj.rates = rates
                nurse_bureau_obj.telephone = telephone
                nurse_bureau_obj.email = email
                nurse_bureau_obj.mobile = mobile
                nurse_bureau_obj.branches =branches
                nurse_bureau_obj.website = website
                nurse_bureau_obj.nurse_bureau_packages = nurse_bureau_packages
                nurse_bureau_obj.no_of_nurses = no_of_nurses
                nurse_bureau_obj.nurses_experience = nurses_experience
                nurse_bureau_obj.contact_person_contact_no = contact_person_contact_no
                nurse_bureau_obj.contact_person_email = contact_person_email
                nurse_bureau_obj.contact_person = contact_person
                nurse_bureau_obj.remarks = remarks
                if nurse_bureau_locality_coverage_to != 'msg':
                    nurse_bureau_obj.nurse_bureau_locality_coverage_to_id = nurse_bureau_locality_coverage_to
                else:
                    nurse_bureau_obj.nurse_bureau_locality_coverage_to = None
                if nurse_bureau_locality_coverage_from != 'msg':
                    nurse_bureau_obj.nurse_bureau_locality_coverage_from_id = nurse_bureau_locality_coverage_from
                else:
                    nurse_bureau_obj.nurse_bureau_locality_coverage_from = None
                nurse_bureau_obj.save()
                messages.success(request, 'Nurse Bureau Data Successfully Updated')
            else:
                messages.error(request, 'Nurse Bureau Not Found in records')
            is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
            if len(is_publisher):
                return HttpResponseRedirect((reverse('publisher-nurse_bureau-listing'))+'?tab=1')
            return HttpResponseRedirect('/nurse_bureau/edit/' + nurse_bureau_id + '/?tab=1')

        elif nurse_bureau_id is not None and tab == '2' and request.method == "GET":
            delete = None
            package_id = None
            nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id)
            try:
                delete = request.GET.get('delete')
                package_id = request.GET.get('package_id')

            except:
                delete = None
                package_id = None

            if delete and package_id and nurse_bureau_obj:
                try:
                    packages = nurse_bureau_obj.packages
                    try:
                        del packages['package_list'][package_id]
                    except:
                        messages.success(request, "Package ID not found")
                        return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                except:
                    packages = {'package_id': package_id, 'package_list': {}}
                    try:
                        del packages['package_list'][package_id]
                    except:
                        messages.success(request, "Package ID not found")
                        return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')

                nurse_bureau_obj.packages = packages
                nurse_bureau_obj.save()
                messages.success(request, "Successfully Deleted Package")
                return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')

            elif nurse_bureau_obj:
                try:
                    packages = nurse_bureau_obj.packages
                    if packages:
                        donothing = True
                    else:
                        packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}
                except:
                    packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}

                if len(packages['package_list'].keys()) < 1:
                    packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                return render(request, 'global_search/nurse_bureau_global_search.html',
                              {'tab': '2', 'tab_listing': 'nurse_bureau-listing', 'nurse_bureau_obj': nurse_bureau_obj,
                               'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,'valid_choice': valid_choice
                               })
            else:
                messages.error(request, 'Something Bad Happened')
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-nurse_bureau-listing'))
                return HttpResponseRedirect(reverse('nurse_bureau-listing'))

        if tab == '2' and request.method == "POST":
            nurse_bureau_obj = Nurse_Bureau.objects.get(id=nurse_bureau_id)
            package_name_list = None
            package_price_list = None
            ackage_description_list = None
            edit = None
            package_name2 = None
            package_price = None
            package_description = None
            package_id = None
            try:
                package_name_list = request.POST.getlist('package_name')
                package_price_list = request.POST.getlist('package_price')
                package_description_list = request.POST.getlist('package_description')
            except:
                package_name_list = None
                package_price_list = None
                package_description_list = None
                package_id = None
            try:
                edit = request.POST.get('edit')
                package_id = request.POST.get('package_id')
                package_name2 = request.POST.get('package_name2')
                package_price = request.POST.get('package_price')
                package_description = request.POST.get('package_description')
            except:
                edit = None
                package_name2 = None
                package_price = None
                package_description = None
                package_id = None
            if edit and package_id and nurse_bureau_obj:
                try:
                    packages = nurse_bureau_obj.packages
                    if packages and package_id:
                        try:
                            packages['package_list'][package_id]['package_name'] = package_name2
                            packages['package_list'][package_id]['package_price'] = package_price
                            packages['package_list'][package_id]['package_description'] = package_description
                            nurse_bureau_obj.packages = packages
                            nurse_bureau_obj.save()

                            messages.success(request, "Nurse Bureau Package Successfully UPDATED")
                            return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                        except:
                            packages['package_list'].update({package_id: {'package_name': package_name2,
                                                                          'package_price': package_price,
                                                                          'package_description':
                                                                              package_description}})
                            nurse_bureau_obj.packages = packages
                            nurse_bureau_obj.save()
                            messages.success(request, "Nurse Bureau Plan Successfully ADDED")
                            return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                    else:
                        if (not packages) and package_id:
                            packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}
                            packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                          'package_price':package_price,
                                                                          'package_description':package_description}})
                            nurse_bureau_obj.packages = packages
                            nurse_bureau_obj.save()
                            messages.success(request, "Nurse Bureau Plan Successfully ADDED")
                            return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                        else:
                            messages.error(request, "No Plan ID Received")
                            return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
                except:
                    packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}
                    packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                  'package_price':package_price,
                                                                  'package_description':package_description}})
                    nurse_bureau_obj.packages = packages
                    nurse_bureau_obj.save()
                    messages.success(request, "Nurse Bureau Package Successfully ADDED")
                    return redirect(reverse('nurse_bureau-listing-edit', args=[nurse_bureau_id, ]) + '?tab=2')
            if package_name_list and package_price_list and package_description_list and nurse_bureau_obj:
                try:
                    packages = nurse_bureau_obj.packages
                    if packages:
                        pass
                    else:
                        packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}
                except:
                    packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}
                if len(packages['package_list'].keys()) < 1:
                    packages = {'nurse_bureau_id': nurse_bureau_id, 'package_list': {}}

                for i in range(0, len(package_name_list)):
                    package_id = str(uuid.uuid4())
                    packages['package_list'].update({package_id: {'package_name': package_name_list[i],
                                                                  'package_price': package_price_list[i],
                                                                  'package_description': package_description_list[i]}})
                nurse_bureau_obj.packages = packages
                nurse_bureau_obj.save()
                messages.success(request, 'Test Details Successfully Updated')

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                return render(request, 'global_search/nurse_bureau_global_search.html',
                              {'tab': '2', 'tab_listing': 'nurse_bureau-listing', 'nurse_bureau_obj': nurse_bureau_obj,
                               'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,'valid_choice': valid_choice
                               })
            else:
                messages.error(request, 'Required data not received')
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    return HttpResponseRedirect(reverse('publisher-nurse_bureau-listing'))
                return HttpResponseRedirect(reverse('nurse_bureau-listing'))
    except  Exception as e:
        #print e
        raise Http404


####################################################################
# Name - dietitian_global_search                                   #
# BY NISHANK                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def dietitian_global_search(request, dietitian_id=None):
    back_to_url = request.META.get('HTTP_REFERER')
    publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_dietitian_reviewer=True)
    caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_dietitian_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    country_obj = Country.objects.filter(delete=False)
    state_obj = State.objects.filter(delete=False)
    city = City.objects.filter(delete=False)
    locality = Locality.objects.filter(delete=False)
    dietitian_type_master = Dietitian_type_master.objects.filter(delete=False)
    dietitian_services_master = DietitianServices.objects.filter(delete=False)
    dietitian_services_list = None
    dietitian_type_list = None
    try:
        tab = request.GET.get('tab')
    except:
        tab = None
    try:
        if dietitian_id is not None and tab == '1' and request.method == "GET":
            dietitian_obj = Dietitian.objects.get(id=dietitian_id)
            if dietitian_obj:
                if dietitian_obj.services :
                    dietitian_services_list = dietitian_obj.services.split(',')
                else:
                    dietitian_services_list = None

                if dietitian_obj.type :
                    dietitian_type_list = dietitian_obj.type.split(',')
                else:
                    dietitian_type_list = None
                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                return render(request, 'global_search/dietitian_global_search.html',
                              {'tab_listing': 'dietitian_listing', 'dietitian_obj': dietitian_obj,
                               'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,
                               'valid_choice': valid_choice, 'tab':'1',
                                'dietitian_services_list':dietitian_services_list,
                                'dietitian_type_list':dietitian_type_list,
                                'dietitian_services_master':dietitian_services_master,
                                'dietitian_type_master':dietitian_type_master,
                                })
            else:
                messages.error(request,'Dietitian could not be found')
                return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=1')
        elif dietitian_id is not None and tab == '1' and request.method == "POST":
            name = request.POST['name'].strip()
            institution = request.POST['institution'].strip()
            qualification = request.POST['qualification'].strip()
            experience = request.POST['experience'].strip()
            services = request.POST.getlist('dietitian_services')
            type = request.POST.getlist('dietitian_type')
            dietitian_locality_coverage_from = request.POST['locality_idfrom'].strip()
            dietitian_locality_coverage_to = request.POST['locality_idto'].strip()
            rates = request.POST['rates'].strip()
            address = request.POST['address'].strip()
            pincode = request.POST.get('apincode').strip()
            country = request.POST['country_id'].strip()
            state = request.POST['state_id'].strip()
            city = request.POST['city_id'].strip()
            location = request.POST['locality_id'].strip()
            email = request.POST['email'].strip()
            telephone = request.POST['telephone'].strip()
            alternate_telephone = request.POST['alternate_telephone'].strip()
            mobile = request.POST['mobile'].strip()
            remarks = request.POST['remarks'].strip()
            tempstr = ''
            cc = 0
            if services:
                for i in services:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            services = tempstr

            tempstr = ''
            cc = 0
            if type:
                for i in type:
                    cc += 1
                    if cc == 1:
                        tempstr = tempstr + i.strip()
                    else:
                        tempstr = tempstr + ',' + i.strip()
            else:
                tempstr = ''
            type = tempstr
            dietitian_obj = Dietitian.objects.get(pk=dietitian_id)
            if dietitian_obj:
                dietitian_obj.name = name
                dietitian_obj.address = address
                dietitian_obj.pincode = pincode
                dietitian_obj.country_id = country
                dietitian_obj.state_id = state
                dietitian_obj.city_id = city
                dietitian_obj.locality_id = location
                dietitian_obj.rates = rates
                dietitian_obj.qualification = qualification
                dietitian_obj.institution = institution
                dietitian_obj.experience = experience
                dietitian_obj.services = services
                dietitian_obj.type = type
                dietitian_obj.rates = rates
                dietitian_obj.telephone = telephone
                dietitian_obj.alternate_telephone = alternate_telephone
                dietitian_obj.email = email
                dietitian_obj.mobile = mobile
                dietitian_obj.remarks = remarks
                if dietitian_locality_coverage_to != 'msg':
                    dietitian_obj.dietitian_locality_coverage_to_id = dietitian_locality_coverage_to
                else:
                    dietitian_obj.dietitian_locality_coverage_to = None

                if dietitian_locality_coverage_from != 'msg':
                    dietitian_obj.dietitian_locality_coverage_from_id = dietitian_locality_coverage_from
                else:
                    dietitian_obj.dietitian_locality_coverage_from = None
                dietitian_obj.save()
                messages.success(request, 'Dietitian Data Successfully Updated')
                return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=1')
            else:
                messages.error(request, 'Dietitian Not Found in records')
                return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=1')
        elif dietitian_id is not None and tab == '2' and request.method == "GET":
            delete = None
            package_id = None
            dietitian_obj = Dietitian.objects.get(id=dietitian_id)
            try:
                delete = request.GET.get('delete')
                package_id = request.GET.get('package_id')
            except:
                delete = None
                package_id = None

            if delete and package_id and dietitian_obj:
                try:
                    packages = dietitian_obj.packages
                    try:
                        del packages['package_list'][package_id]
                    except:
                        messages.success(request, "Package ID not found")
                        return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')
                except:
                    packages = {'package_id': package_id, 'package_list': {}}
                    try:
                        del packages['package_list'][package_id]
                    except:
                        messages.success(request, "Package ID not found")
                        return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')

                dietitian_obj.packages = packages
                dietitian_obj.save()
                messages.success(request, "Successfully Deleted Package")
                return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')

            elif dietitian_obj:
                try:
                    packages = dietitian_obj.packages
                    if packages:
                        donothing = True
                    else:
                        packages = {'dietitian_id': dietitian_id, 'package_list': {}}
                except:
                    packages = {'dietitian_id': dietitian_id, 'package_list': {}}

                if len(packages['package_list'].keys()) < 1:
                    packages = {'dietitian_id': dietitian_id, 'package_list': {}}

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True

                return render(request, 'global_search/dietitian_global_search.html',
                              {'tab': '2', 'tab_listing': 'dietitian_listing', 'dietitian_obj': dietitian_obj,
                               'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,'valid_choice': valid_choice,
                               'dietitian_services_list': dietitian_services_list,
                               'dietitian_type_list': dietitian_type_list,
                               'dietitian_services_master': dietitian_services_master,
                               'dietitian_type_master': dietitian_type_master,
                               })
            else:
                messages.error(request, 'Something Bad Happened')
                return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')

        if tab == '2' and request.method == "POST":
            dietitian_obj = Dietitian.objects.get(id=dietitian_id)
            package_name_list = None
            package_price_list = None
            ackage_description_list = None
            edit = None
            package_name2 = None
            package_price = None
            package_description = None
            package_id = None
            try:
                package_name_list = request.POST.getlist('package_name')
                package_price_list = request.POST.getlist('package_price')
                package_description_list = request.POST.getlist('package_description')
            except:
                package_name_list = None
                package_price_list = None
                package_description_list = None
                package_id = None
            try:
                edit = request.POST.get('edit')
                package_id = request.POST.get('package_id')
                package_name2 = request.POST.get('package_name2')
                package_price = request.POST.get('package_price')
                package_description = request.POST.get('package_description')
            except:
                edit = None
                package_name2 = None
                package_price = None
                package_description = None
                package_id = None

            if edit and package_id and dietitian_obj:
                try:
                    packages = dietitian_obj.packages
                    if packages and package_id:
                        try:
                            packages['package_list'][package_id]['package_name'] = package_name2
                            packages['package_list'][package_id]['package_price'] = package_price
                            packages['package_list'][package_id]['package_description'] = package_description
                            dietitian_obj.packages = packages
                            dietitian_obj.save()

                            messages.success(request, "Dietitian Package Successfully UPDATED")
                            return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')
                        except:
                            packages['package_list'].update({package_id: {'package_name': package_name2,
                                                                          'package_price': package_price,
                                                                          'package_description':
                                                                              package_description}})
                            dietitian_obj.packages = packages
                            dietitian_obj.save()
                            messages.success(request, "Dietitian Plan Successfully ADDED")
                            return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')
                    else:
                        if (not packages) and package_id:
                            packages = {'dietitian_id': dietitian_id, 'package_list': {}}
                            packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                          'package_price':package_price,
                                                                          'package_description':package_description}})
                            dietitian_obj.packages = packages
                            dietitian_obj.save()
                            messages.success(request, "Dietitian Plan Successfully ADDED")
                            return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')
                        else:
                            messages.error(request, "No Plan ID Received")
                            return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')
                except:

                    packages = {'dietitian_id': dietitian_id, 'package_list': {}}
                    packages['package_list'].update({package_id :{'package_name':package_name2,
                                                                  'package_price':package_price,
                                                                  'package_description':package_description}})
                    dietitian_obj.packages = packages
                    dietitian_obj.save()
                    messages.success(request, "Dietitian Package Successfully ADDED")
                    return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')

            if package_name_list and package_price_list and package_description_list and dietitian_obj:
                try:
                    packages = dietitian_obj.packages
                    if packages:
                        pass
                    else:
                        packages = {'dietitian_id': dietitian_id, 'package_list': {}}
                except:
                    packages = {'dietitian_id': dietitian_id, 'package_list': {}}
                if len(packages['package_list'].keys()) < 1:
                    packages = {'dietitian_id': dietitian_id, 'package_list': {}}

                for i in range(0, len(package_name_list)):
                    package_id = str(uuid.uuid4())
                    packages['package_list'].update({package_id: {'package_name': package_name_list[i],
                                                                  'package_price': package_price_list[i],
                                                                  'package_description': package_description_list[i]}})
                dietitian_obj.packages = packages
                dietitian_obj.save()
                messages.success(request, 'Test Details Successfully Updated')

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True

                return render(request, 'global_search/dietitian_global_search.html',
                              {'tab': '2', 'tab_listing': 'dietitian_listing', 'dietitian_obj': dietitian_obj,
                               'package_list': packages['package_list'],'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,'valid_choice': valid_choice,
                               'dietitian_services_list': dietitian_services_list,
                               'dietitian_type_list': dietitian_type_list,
                               'dietitian_services_master': dietitian_services_master,
                               'dietitian_type_master': dietitian_type_master
                               })
            else:
                messages.error(request, 'Required data not received')
                return redirect(reverse('dietitian-listing-edit', args=[dietitian_id, ]) + '?tab=2')

        if tab == '3' and request.method == "GET" and dietitian_id:
            dietitian_obj = Dietitian.objects.get(id=dietitian_id)
            try:
                delog = request.GET.get('delog').strip()
            except:
                delog = None
            try:
                org_id = request.GET.get('org_id').strip()
            except:
                org_id = None

            if dietitian_obj and org_id and delog=='delog':
                try:
                    attach_obj = Attach_dietitian_organisation.objects.get(dietitian_id=dietitian_id,
                                                                           organisation_id=org_id)
                except:
                    attach_obj = None
                if attach_obj:
                    attach_obj.delete()
                    messages.error(request, "ASSOCIATION SUCCESSFULLY DELETED")
                    return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                else:
                    messages.error(request, "ASSOCIATION NOT FOUND- hence not deleted")
                    return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")

            elif dietitian_obj:
                attachlist = Attach_dietitian_organisation.objects.filter(dietitian_id=dietitian_id)
                if len(attachlist) < 1:
                    attachlist = None

                user_is_publisher = None
                is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                if len(is_publisher):
                    user_is_publisher = True
                department_obj = Department.objects.all().order_by('name')
                return render(request, 'global_search/dietitian_global_search.html',
                              {'tab': '3', 'tab_listing': 'dietitian_listing', 'dietitian_obj': dietitian_obj,
                               'country_obj': country_obj, 'state_obj': state_obj,
                               'publisher_user_data': publisher_user_data,
                               'reviewer_user_data': reviewer_user_data,
                               'caller_user_data': caller_user_data,
                               'user_is_publisher': user_is_publisher,
                               'city': city, 'locality': locality,
                               'valid_choice': valid_choice,
                               'attachlist': attachlist,
                               'dietitian_services_list': dietitian_services_list,
                               'dietitian_type_list': dietitian_type_list,
                               'dietitian_services_master': dietitian_services_master,
                               'dietitian_type_master': dietitian_type_master,
                               'department_obj':department_obj
                               })
            else:
                messages.error(request, 'Required data not received')
                return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")

        if tab == '3' and request.method == "POST" and dietitian_id:
            dietitian_obj = Dietitian.objects.get(id=dietitian_id)
            if dietitian_obj:
                add = None
                edit = None
                try:
                    add = request.POST.get('add').strip()
                except:
                    add = None
                try:
                    edit = request.POST.get('edit').strip()
                except:
                    edit = None

                if add == "yes_please" :
                    try:
                        org_id = request.POST.get('diet_org_id').strip()
                    except:
                        org_id = None
                    try:
                        department_id = request.POST.get('department_id').strip()
                    except:
                        department_id = None

                    if org_id:
                        consultancy_fee = None
                        consultancy_fee = request.POST.get('consultancy_fee').strip()
                        attach_obj = None
                        attach_exists = False

                        try:
                            attach_obj = Attach_dietitian_organisation.objects.get(dietitian_id=dietitian_id,organisation_id=org_id)
                        except:
                            attach_obj = None
                        if attach_obj:
                            attach_obj.consultancy_fee = consultancy_fee
                            attach_obj.org_department_id = department_id
                            attach_obj.save()
                            messages.error(request, "ASSOCIATION ALREADY EXISTS - CONSULTANCY FEE SUCCESSFULLY UPDFATED")
                            return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                        else:
                            attach_obj = Attach_dietitian_organisation(dietitian_id=dietitian_id,organisation_id=org_id,consultancy_fee=consultancy_fee,org_department_id=department_id)
                            attach_obj.save()
                            messages.success(request, "ASSOCIATION CREATED")
                            return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                    else:
                        messages.error(request, 'Organisation id not received')
                        return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")

                if edit == "edit" :
                    try:
                        org_id = request.POST.get('org_id').strip()
                    except:
                        org_id = None
                    try:
                        department_id = request.POST.get('department_id').strip()
                    except:
                        department_id = None

                    if org_id:
                        consultancy_fee = None
                        consultancy_fee = request.POST.get('consultancy_fee').strip()
                        attach_obj = None
                        attach_exists = False
                        try:
                            attach_obj = Attach_dietitian_organisation.objects.get(dietitian_id=dietitian_id,organisation_id=org_id)
                        except:
                            attach_obj = None
                        if attach_obj:
                            attach_obj.consultancy_fee = consultancy_fee
                            attach_obj.org_department_id = department_id
                            attach_obj.save()
                            messages.success(request, "ASSOCIATION SUCCESSFULLY UPDFATED")
                            return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                        else:
                            attach_obj = Attach_dietitian_organisation(dietitian_id=dietitian_id,organisation_id=org_id,consultancy_fee=consultancy_fee)
                            attach_obj.save()
                            messages.success(request, "ASSOCIATION NOT FOUND - NEW ASSOCIATION CREATED")
                            return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                    else:
                        messages.error(request, 'Organisation id not received')
                        return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
                else:
                    messages.error(request, 'Add/ Edit action not specified')
                    return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
            else:
                messages.error(request, 'Dietitian data not received')
                return HttpResponseRedirect("/dietitian/edit/" + dietitian_id + "/?tab=3")
    except  Exception as e:
        #print e
        raise Http404

# ^^^^^^^^^^^^^^^^^^^^^^^

####################################################################
# Name - bloodbank_global_search                                   #
# Owner - Nishank          17-March-2018                           #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def bloodbank_global_search(request, bloodbank_id=None):
    tab_bb = '1'
    back_to_url = request.META.get('HTTP_REFERER')
    #publisher_user_data = UserManagement.objects.filter(is_publisher=True, user__is_active=True)
    #reviewer_user_data = UserManagement.objects.filter(is_reviewer=True, user__is_active=True,is_blood_reviewer=True)
    #caller_user_data = UserManagement.objects.filter(is_caller=True, user__is_active=True,is_blood_caller=True)
    valid_choice = ValidateByChoice.objects.all()
    services = BloodBankServices.objects.filter(delete=False)
    try:
        if bloodbank_id is not None:
            bloodbank = BloodBank.objects.get(id=bloodbank_id)
            #if (bloodbank.current_user_id == request.user.id) or request.user.is_superuser:

            if bloodbank_id is not None and request.method == "GET":
                bloodbank = BloodBank.objects.get(id=bloodbank_id)
                bloodbank_current_services = bloodbank.services
                if bloodbank_current_services :
                    bloodbank_current_services = bloodbank_current_services.split(',')
                if bloodbank_current_services:
                    bsl=[]
                    for i in bloodbank_current_services:
                        if i != '' and  i !=  ' ':
                            bsl.append(int(i.strip()))
                    bloodbank_current_services = bsl
                country_obj = Country.objects.all()
                state_obj = State.objects.all()
                if bloodbank:
                    #user_is_publisher = None
                    #is_publisher = UserManagement.objects.filter(user_id=request.user.id, is_publisher=True)
                    #if len(is_publisher):
                    #    user_is_publisher = True
                    return render(request, 'global_search/bloodbank_global_search.html',
                                  {'tab': 'basic', 'tab_listing': 'bloodbank_listing', 'bloodbank': bloodbank,
                                   'country_obj': country_obj, 'state_obj': state_obj,
                                   'valid_choice': valid_choice,'services':services,'bloodbank_current_services':bloodbank_current_services,
                                   'tab_bb':tab_bb,'back_to_url':back_to_url})
                else:
                    messages.error('Bloood Bank Not Found')
                    return HttpResponseRedirect('/blood-bank/listing/')
            elif request.method != "GET" and bloodbank_id is not None:
                messages.error(request, 'Method Not Allowed ')
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            else:
                messages.error(request, 'BloodBank ID missing ')
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

        else:
            messages.error(request, 'BloodBank ID missing ')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        #print e
        raise Http404

####################################################################
# Name - gs_bloodbank_verified_fields                              #
# By Nishank                                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def gs_bloodbank_verified_fields(request, bloodbank_id=None):
    try:
        if request.method == 'GET' and bloodbank_id:
            bloodbank_data = BloodBank.objects.filter(id=bloodbank_id)
            fields_json = bloodbank_data[0].verified_fields

            full_list = []
            verified_list = []
            for i in fields_json:
                for k, v in i.items():
                    full_list.append(k)
                    if v == True:
                        verified_list.append(k)
            # print full_list
            # print verified_list
            return render(request, 'global_search/gs_verified_fields.html',
                          {'tab': 'verifiedfields', 'tab_listing': 'bloodbank_listing', 'full_list': full_list,
                           'verified_list': verified_list, 'bloodbank': bloodbank_data[0], 'tab_bb': '2'})

        elif request.method == 'POST' and bloodbank_id:
            field_names = request.POST.getlist('vfields')
            bloodbank_data = BloodBank.objects.filter(id=bloodbank_id)
            fields_json = bloodbank_data[0].verified_fields
            full_list = []
            for i in fields_json:
                for k, v in i.items():
                    full_list.append(k)
            for i in full_list:
                if i in field_names:
                    c = -1
                    for x in fields_json:
                        c += 1
                        for k, v in x.items():
                            if k == i:
                                fields_json[c] = {k: True}
                else:
                    c = -1
                    for x in fields_json:
                        c += 1
                        for k, v in x.items():
                            if k == i:
                                fields_json[c] = {k: False}

            checkj = json.dumps(fields_json)
            bloodbank_data.update(verified_fields=fields_json)

            messages.success(request, "Successfully Updated BloodBank Field Meta Data")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        messages.success(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

#^^^^^^^^^^^^^^^^^^^^^^^^^^



####################################################################
# Name - live_doctor_update_education                           #
# BY - Ashutosh                                            #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def live_doctor_update_education(request, doctor_id=None, edu_id=None):
    try:
        try:
            newdegree = request.POST['edudegree']
        except:
            newdegree = None
        college = request.POST['educollege']
        year = request.POST['eduyear']

        if doctor_id and edu_id:
            import datetime
            now = datetime.datetime.now()

            try:
                edu_obj = Live_Doctor_Education.objects.filter(id=int(edu_id), doctor_id=doctor_id)
                qua_points = 0
                edu_obj.update(updatedAt=now, college=college, year=int(year), degree=newdegree)
                edu_obj[0].save({'UPDATE':'YES'})

                ldoc3 = Live_Doctor.objects.filter(id=doctor_id)
                ldoc3.update(qualification_points = qua_points)
                ldoc3_education_list = Live_Doctor_Education.objects.filter(doctor_id=doctor_id)
                if ldoc3_education_list != []:
                    for edu in ldoc3_education_list:
                        if edu.degree.strip().lower() == 'MBBS'.lower() or edu.degree.strip().lower() == 'BHMS'.lower():
                            qua_points = qua_points + 6
                            break
                    for edu33 in ldoc3_education_list:
                        if edu33.degree.strip().lower() == 'MD'.lower() or edu33.degree.strip().lower() == 'MS'.lower():
                            qua_points = qua_points + 11
                            break
                    if len(ldoc3_education_list) > 1:
                        qua_points = qua_points + 3
                else:
                    qua_points = 0
                ldoc3.update(qualification_points = qua_points)
                messages.success(request, "Education Object Successfully updated")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER') + "&tab=3")

            except:
                messages.error(request, "Education Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Education ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404


####################################################################
# Name - live_doctor_update_education                              #
# BY - Ashutosh                                                    #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def live_doctor_update_experience(request, doctor_id=None, exp_id=None):
    try:
        try:
            name = request.POST['expname']
        except:
            name = None
        fromyear = request.POST['expfromYear']
        toyear = request.POST['exptoYear']
        designation = request.POST['expdesignation']
        city = request.POST['expcity']

        if doctor_id and exp_id:
            import datetime
            now = datetime.datetime.now()

            try:
                edu_obj = Live_Doctor_Experience.objects.filter(id=int(exp_id), doctor_id=doctor_id)

                edu_obj.update(updatedAt=now, name=name, fromYear=int(fromyear), designation=designation,
                               toYear=int(toyear), city=city)
                edu_obj[0].save({'UPDATE': 'YES'})

                ldoc2 = Live_Doctor.objects.filter(id=doctor_id)
                ldoc2_experience_list = Live_Doctor_Experience.objects.filter(doctor_id=doctor_id)
                total = 0
                if ldoc2_experience_list != []:
                    for i in ldoc2_experience_list:
                        if i.toYear != None and i.fromYear != None:
                            total = total + (int(i.toYear) - int(i.fromYear))
                        else:
                            pass
                    exppoints = 0
                    if total < 5:
                        exppoints = 3.5
                    elif total >= 5 and total <= 10:
                        exppoints = 5
                    elif total >= 10:
                        exppoints = 6.5
                else:
                    exppoints = 0

                ldoc2.update(experience_points = exppoints)

                messages.success(request, "Successfully Added Experience Entry")
                return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + '?tab=4')

            except Exception as e   :
                messages.error(request, e)
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Experience ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404


####################################################################
# Name - live_doctor_update_Membership                             #
# BY - Ashutosh                                                    #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def live_doctor_update_membership(request, doctor_id=None, mem_id=None):
    try:
        try:
            membership = request.POST['memname']
        except:
            membership = None

        if doctor_id and mem_id:
            import datetime
            now = datetime.datetime.now()

            try:
                if membership:
                    import datetime
                    now = datetime.datetime.now()
                    membership_obj = Live_Doctor_Membership.objects.filter(id=int(mem_id), doctor_id=doctor_id)

                    membership_obj.update(updatedAt=now, name=membership)
                    membership_obj[0].save({'UPDATE':'YES'})

                messages.success(request, "Successfully Updated Membership Entry")
                return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + '?tab=7')

            except:
                messages.error(request, "Membership Object Not found")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Membership ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404



##########################New Doctor Masters Work###############################
####################################################################
# Name - new_service_offered_data                                  #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def new_service_offered_data(request):
    try:
        if request.method == "GET":
            try:
                search_data = request.GET.get('search_data')
            except:
                pass
            if search_data:
                service_offered_obj = Doctor_ServiceOffered_New.objects.filter(WorL__iexact='winner',name__icontains=search_data).order_by('name')
            else:
                service_offered_obj = Doctor_ServiceOffered_New.objects.filter(WorL__iexact='winner').order_by('name')
            paginator = Paginator(service_offered_obj, 100)
            page = request.GET.get('page')
            try:
                service_offered_obj = paginator.page(page)
            except PageNotAnInteger:
                service_offered_obj = paginator.page(1)
            except EmptyPage:
                service_offered_obj = paginator.page(paginator.num_pages)


            return render(request, 'admin/master_data_management/new_so_data_management.html',
                          {'so_obj': service_offered_obj,'search_data':search_data})
    except Exception as e:
        raise Http404

####################################################################
# Name - view_newso_loosers_data                                   #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def view_newso_loosers_data(request):
    try:
        if request.method == "GET":
            try:
                search_data = request.GET.get('search_data')
            except:
                pass
            if search_data:
                service_offered_obj = Doctor_ServiceOffered_New.objects.filter(WorL__iexact='looser',
                                                                               name__icontains=search_data).order_by(
                    'name')
            else:
                service_offered_obj = Doctor_ServiceOffered_New.objects.filter(WorL__iexact='looser').order_by(
                    'name')
            paginator = Paginator(service_offered_obj, 100)
            page = request.GET.get('page')
            try:
                service_offered_obj = paginator.page(page)
            except PageNotAnInteger:
                service_offered_obj = paginator.page(1)
            except EmptyPage:
                service_offered_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/new_so_looser_data_management.html',
                          {'so_obj': service_offered_obj, 'search_data': search_data})
    except Exception as e:
        raise Http404


####################################################################
# Name - move_so_looser_to_winners_list                            #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def move_so_looser_to_winners_list(request,looser_so_id=None):
    try:
        if looser_so_id != None:
            try:
                service_offered_obj = Doctor_ServiceOffered_New.objects.get(id=int(looser_so_id),WorL__iexact='looser')
                service_offered_obj.WorL = 'Winner'
                service_offered_obj.movedfrom_losertowinner = True
                import datetime as thisviewdt
                service_offered_obj.movement_date = thisviewdt.datetime.now()
                service_offered_obj.save()
                messages.success(request, "Object moved to Winner List ")
            except:
                messages.error(request, "Looser Object Not Found")
        else:
            messages.error(request,"Looser Object ID Not Provided" )
        return redirect(reverse('view_newso_loosers_data'))
    except Exception as e:
        messages.error(request, e)
        return redirect(reverse('view_newso_loosers_data'))

####################################################################
# Name - new_service_offered_add_edit                              #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def new_service_offered_add_edit(request, service_offered_id=None):
    try:
        import datetime
        if service_offered_id != None:
            # import datetime
            admin_action = 'Edit'
            if request.method == "GET":
                service_offered = Doctor_ServiceOffered_New.objects.get(id=service_offered_id)
                return render(request, 'admin/master_data_management/new_so_add_edit.html',
                              {'service_offered': service_offered, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['service_offered_name'].strip()
                service_offered = Doctor_ServiceOffered_New.objects.get(id=service_offered_id)
                if name and name !='' and name != ' ':
                    so_exclude = Doctor_ServiceOffered_New.objects.exclude(id=service_offered_id)
                    for i in so_exclude:
                        if i.name.strip().lower() == name.lower():
                            messages.error(request, "Service Offerted name already exists ")
                            return redirect(reverse("new_service_offered_edit", args=[service_offered.id, ]))


                    service_offered.name = name
                    so_edit_date = datetime.date.today()
                    service_offered.updatedAt = so_edit_date
                    service_offered.WorL = 'Winner'
                    service_offered.save()
                    messages.success(request, "Service_Offered Edited successfully")
                    return redirect('new_service_offered_data_page')
                else:
                    messages.error(request, "Please provide New Name for Service_Offered Object")
                    return redirect(reverse("new_service_offered_edit", args=[service_offered.id, ]))

        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/new_so_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['service_offered_name'].strip()
                if name and name !='' and name != ' ':
                    service_offered_list = Doctor_ServiceOffered_New.objects.all()
                    for i in service_offered_list:
                        if i.name.lower() == name.lower():
                            messages.error(request, "Service_offered name already exists ")
                            return redirect("new_service_offered_add")
                    try:
                        so_add_date = datetime.date.today()
                        service_offered = Doctor_ServiceOffered_New.objects.create(name=name,createdAt = so_add_date,WorL = 'Winner')

                    except Exception as e:
                        messages.error(request, e)
                        return redirect("new_service_offered_add")
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='category',
                    #                                               id=category.id, edit=None)

                    messages.success(request, "New Service_Offered add successfully")
                    return redirect('new_service_offered_data_page')
                else:
                    messages.error(request, "Please Provide Service_Offered Name ")
                    return redirect("new_service_offered_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - new_speciality_data                                       #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def new_speciality_data(request):
    try:
        if request.method == "GET":
            try:
                search_data = request.GET.get('search_data')
            except:
                pass
            if search_data:
                speciality_obj = Doctor_Speciality_New.objects.filter(WorL__iexact='winner',name__icontains=search_data).order_by('name')
            else:
                speciality_obj = Doctor_Speciality_New.objects.filter(WorL__iexact='winner').order_by('name')
            paginator = Paginator(speciality_obj, 100)
            page = request.GET.get('page')
            try:
                speciality_obj = paginator.page(page)
            except PageNotAnInteger:
                speciality_obj = paginator.page(1)
            except EmptyPage:
                speciality_obj = paginator.page(paginator.num_pages)

            return render(request, 'admin/master_data_management/new_speciality_data_management.html',
                          {'speciality_obj': speciality_obj,'search_data':search_data})
    except Exception as e:
        raise Http404


####################################################################
# Name - new_speciality_add_edit                                   #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def new_speciality_add_edit(request, speciality_id=None):
    try:
        import datetime
        if speciality_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                speciality = Doctor_Speciality_New.objects.get(id=speciality_id)
                return render(request, 'admin/master_data_management/new_speciality_add_edit.html',
                              {'speciality': speciality, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['speciality_name'].strip()
                speciality = Doctor_Speciality_New.objects.get(id=speciality_id)
                if name and name != '' and name != ' ':
                    spl_exclude = Doctor_Speciality_New.objects.exclude(id=speciality_id)
                    for i in spl_exclude:
                        if i.name.strip().lower() == name.lower():
                            messages.error(request, "Speciality name already exists ")
                            return redirect(reverse("new_speciality_edit", args=[speciality.id, ]))


                    speciality.name = name
                    spe_edit_date = datetime.date.today()
                    speciality.updatedAt = spe_edit_date
                    speciality.WorL = 'Winner'
                    speciality.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='speciality',
                    #                                               id=speciality.id, edit='Yes')
                    messages.success(request, "speciality Edited successfully")
                    return redirect('new_speciality_data_page')
                else:
                    messages.error(request, "Please provide Name For Speciality")
                    return redirect(reverse("new_speciality_edit", args=[speciality.id, ]))

        else:
            admin_action = 'Add'
            if request.method == "GET":
                return render(request, 'admin/master_data_management/new_speciality_add_edit.html',
                              {'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['speciality_name'].strip()
                if name and name != '' and name != ' ':
                    speciality_list = Doctor_Speciality_New.objects.all()
                    for i in speciality_list:
                        if i.name.lower() == name.lower():
                            messages.error(request, "Speciality name already exists in Winners")
                            return redirect("new_speciality_add")
                    try:
                        spe_add_date = datetime.date.today()
                        speciality = Doctor_Speciality_New.objects.create(name=name,createdAt = spe_add_date,WorL='Winner')

                    except Exception as e:
                        messages.error(request, e)
                        return redirect("new_speciality_add")
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='speciality',
                    #                                               id=speciality.id, edit=None)

                    messages.success(request, "New Speciality added Successfully")
                    return redirect('new_speciality_data_page')
                else:
                    messages.error(request, "Please provide Name for New Speciality name")
                    return redirect("new_speciality_add")
    except Exception as e:
        raise Http404

####################################################################
# Name - new_association_data                                      #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def new_association_data(request):
    try:
        if request.method == "GET":
            association_obj = Doc_Cat_SO_Speciality_Association.objects.all().order_by('id')
            ServiceOfferedAll = Doctor_ServiceOffered_New.objects.all().order_by('id')
            SpecialityAll = Doctor_Speciality_New.objects.all().order_by('id')
            return render(request, 'admin/master_data_management/new_association_data_management.html',
                          {'association_obj': association_obj,
                           'ServiceOfferedAll':ServiceOfferedAll,
                           'SpecialityAll':SpecialityAll})
    except Exception as e:
        raise Http404

####################################################################
# Name - new_association_data                                      #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def new_association_data(request):
    try:
        if request.method == "GET":
            association_obj = Doc_Cat_SO_Speciality_Association_Final.objects.all().order_by('id')
            ServiceOfferedAll = Doctor_ServiceOffered_New.objects.filter(deleete=False,WorL__iexact='Winner').order_by('id')
            SpecialityAll = Doctor_Speciality_New.objects.filter(deleete=False,WorL__iexact='Winner').order_by('id')
            active_categories = Category.objects.filter(delete=False).values_list('id',flat=True)
            print active_categories
            return render(request, 'admin/master_data_management/new_association_data_management.html',
                          {'association_obj': association_obj,
                           'ServiceOfferedAll':ServiceOfferedAll,
                           'SpecialityAll':SpecialityAll,
                           'active_categories':active_categories})
    except Exception as e:
        raise Http404


####################################################################
# Name - new_association_add                                      #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def new_association_add(request):
    try:
        if request.method == 'GET':

            # Find all the categories for which association has been created.
            association_cat_ids = Doc_Cat_SO_Speciality_Association_Final.objects.all().values_list('category',flat=True)

            # Find all categories for which association has not been created.
            category_list = Category.objects.filter(delete=False).exclude(id__in=association_cat_ids).order_by('name')

            # Send all SO and SPE (Active and Winner) list so that cms user can freely select SOs and SPEs and associate with  the Category
            ServiceOfferedAll = Doctor_ServiceOffered_New.objects.filter(deleete=False, WorL__iexact='winner').order_by('name')
            SpecialityAll = Doctor_Speciality_New.objects.filter(deleete=False, WorL__iexact='winner').order_by('name')
            return render(request, 'admin/master_data_management/new_association_add.html',
                          {'category_list':category_list,
                           'ServiceOfferedAll': ServiceOfferedAll,
                           'SpecialityAll': SpecialityAll})

        if request.method == 'POST':
            category = request.POST['category']
            so = request.POST.getlist('so')
            speciality = request.POST.getlist('speciality')
            if speciality != [] or speciality != ' ' :
                speciality != ''

            if category and category != ' ':
                if so != [] and so != ' ' and so != '': # and speciality != [] and speciality != ' ' and speciality != '':
                    so = ','.join(so)
                    speciality = ','.join(speciality)
                    import datetime
                    assoc_create_date = datetime.date.today()
                    new_assoc =  Doc_Cat_SO_Speciality_Association_Final.objects.create(category=int(category),
                                                                   Specialities=speciality,
                                                                   ServiceOffered=so,createdAt=assoc_create_date)
                    from datetime import datetime
                    messages.success(request, "Successfully created Association")
                    return redirect("new_association_data_page")
                else:
                    messages.error(request, "Please provide At least 1 entry for Service Offered")
                    return redirect("new_association_add")
            else:
                messages.error(request, "Please provide a Category name ")
                return redirect("new_association_add")

    except Exception as e:
        raise Http404


####################################################################
# Name - new_association_edit                                      #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def new_association_edit(request,association_id=None):
    try:
        if request.method == 'GET':
            association_obj = Doc_Cat_SO_Speciality_Association_Final.objects.get(id=association_id)
            if association_obj:
                category_list = Category.objects.filter(delete=False).order_by('name')
                ServiceOfferedAll = Doctor_ServiceOffered_New.objects.filter(deleete=False, WorL__iexact='winner').order_by('name')
                SpecialityAll = Doctor_Speciality_New.objects.filter(deleete=False, WorL__iexact='winner').order_by('name')

                spl_curr_list = association_obj.Specialities.strip().split(',')

                so_curr_list = association_obj.ServiceOffered.strip().split(',')

                current_cat_id = association_obj.category

                return render(request, 'admin/master_data_management/new_association_edit.html',
                              {'category_list':category_list,
                               'ServiceOfferedAll': ServiceOfferedAll,
                               'SpecialityAll': SpecialityAll,
                               'spl_curr_list':spl_curr_list,
                               'so_curr_list':so_curr_list,
                               'current_cat_id':current_cat_id,
                               'association_id':association_id})
            else:
                messages.error(request, "Association Object Not Found")
                return redirect("new_association_data_page")

        if request.method == 'POST':
            #category = request.POST['category']
            category = request.POST['category_hidden']
            so = request.POST.getlist('so')
            speciality = request.POST.getlist('speciality')

            if category and category != ' ':
                if so and so != ' ' : # and speciality and speciality != ' ':
                    so = ','.join(so)
                    if speciality == [] or speciality == ' ':
                        speciality = ''
                    speciality = ','.join(speciality)
                    association_obj = Doc_Cat_SO_Speciality_Association_Final.objects.filter(id=association_id)
                    import datetime
                    assoc_update_date = datetime.date.today()
                    association_obj.update(category=int(category), Specialities=speciality,ServiceOffered=so, updatedAt=assoc_update_date)
                    from datetime import datetime
                    messages.success(request, "Successfully Edited Association")
                    return redirect("new_association_data_page")
                else:
                    messages.error(request, "Please provide At least 1 entry for Service Offered")
                    return redirect(reverse('new_association_edit', args=[int(category)]))
            else:
                messages.error(request, "Please provide Category name ")
                return redirect(reverse('new_association_edit',args=[int(category)]))

    except Exception as e:
        raise Http404




""" Master Of County State City Locality management """
####################################################################
# Name - master_manage_country_state_city_location                  #
# Owner - Ashutosh Kesharvani                                       #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def manage_country_state_city_location(request):
    try:
        if request.method == "GET":
            return render(request, 'admin/master_data_management/manage_country_state_city_location_master/manage_country_state_city_location.html', dict(tab='master_data'))
    except Exception as e:
        raise Http404


####################################################################
# Name - country_add_edit                                          #
# Owner - Ashutosh                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def add_edit_master_country(request, country_id=None):
    try:
        if country_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                country = Countrymaster.objects.get(id=country_id)
                return render(request, 'admin/master_data_management/manage_country_state_city_location_master/add_edit_master_country.html',
                              {'country': country, 'admin_action': admin_action})
            if request.method == "POST":
                country = Countrymaster.objects.get(id=country_id)
                name = request.POST['country_name'].strip()
                if name:
                    country_list = Countrymaster.objects.all()
                    country.name = name
                    try:
                        country.save()
                    except Exception as e:
                        messages.error(request, "Duplicate name is  not allowed")
                        return redirect('country_data_master')
                    # response = master_SingleRecord_elastic_update(request,action='publish', master_type='country', id=country.id,edit='Yes')
                    # if response:
                    #     print 'Updated in elastic'
                    # else:
                    #     print 'Not Updated in elastic'
                    messages.success(request, "Country Edited successfully")
                    return redirect('country_data_master')
                else:
                    messages.error(request, "Please provide country name ")
                    return redirect(reverse("edit_master_country", args=[country.id, ]))
        else:
            admin_action = 'Add'

            if request.method == "GET":
                return render(request, 'admin/master_data_management/manage_country_state_city_location_master/add_edit_master_country.html',


                              {'admin_action': admin_action})

            if request.method == "POST":
                name = request.POST['country_name'].strip()
                if name:
                    country = Countrymaster.objects.all()
                    for i in country:
                        if i.name.lower() == name.lower():
                            messages.error(request, "Country name already exists ")
                            return redirect("add_master_country")
                    country = Countrymaster(name=name)
                    country.save()
                    # response = master_SingleRecord_elastic_update(request,action='publish', master_type='country',id=country.id,edit=None)
                    messages.success(request, "New country added successfully")
                    return redirect('country_data_master')
                else:
                    messages.error(request, "Please provide country name")
                    return redirect("add_master_country")
    except Exception as e:
        raise Http404

####################################################################
# Name - country_data_master                                                #
# Owner - Ashutosh                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def country_data_master(request):
    try:
        if request.method == "GET":
            country_obj = Countrymaster.objects.all().order_by('name')
            return render(request, 'admin/master_data_management/manage_country_state_city_location_master/manage_country_data_master.html',
                          {'country_obj': country_obj})
    except Exception as e:
        raise Http404


####################################################################
# Name - State_data_master                                         #
# Owner - Ashutosh                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def state_data_master(request):
    try:
        if request.method == "GET":
            state_obj = Statemaster.objects.all().order_by('name')
            return render(request, 'admin/master_data_management/manage_country_state_city_location_master/state_data_master.html',
                          {'state_obj': state_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - add_edit_master_state                                     #
# Owner - Ashutosh                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def add_edit_master_state(request, state_id=None):
    try:
        if state_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                state = Statemaster.objects.get(id=state_id)
                country_list = Countrymaster.objects.all()
                return render(request, 'admin/master_data_management/manage_country_state_city_location_master/add_edit_master_state.html',
                              {'state': state, 'country_list': country_list, 'admin_action': admin_action})

            elif request.method == "POST":
                name = request.POST['state_name'].strip()
                country_id = request.POST['country'].strip()
                state = Statemaster.objects.get(id=state_id)
                if name and country_id:
                    state.name = name
                    con = Countrymaster.objects.get(id=country_id)
                    state.countrymaster = con
                    try:
                        state.save()
                    except Exception as e:
                        messages.error(request, "Duplicate name is  not allowed")
                        return redirect('state_data_master')
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='state',
                    #                                               id=state.id, edit='Yes')
                    messages.success(request, "state Edited successfully")
                    return redirect('state_data_master')
                else:
                    messages.error(request, "Please provide state name and country ")
                    return redirect(reverse("edit_master_state", args=[state.id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                con = Countrymaster.objects.all()
                return render(request, 'admin/master_data_management/manage_country_state_city_location_master/add_edit_master_state.html',
                              {'country_list': con, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['state_name'].strip()
                country_id = request.POST['country'].strip()
                if name and country_id:
                    state = Statemaster.objects.all()
                    for i in state:
                        if i.name.lower() == name.lower():
                            messages.error(request, "state name already exists")
                            return redirect("add_master_state")
                    con = Countrymaster.objects.get(id=country_id)

                    state = Statemaster(name=name, countrymaster=con)
                    state.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='state',
                    #                                               id=state.id, edit=None)
                    messages.success(request, "New state add successfully")
                    return redirect('state_data_master')
                else:
                    messages.error(request, "Please provide state name")
                    return redirect("add_master_state")
    except Exception as e:
        raise Http404



####################################################################
# Name - city_data_master                                          #
# Owner - Ashutosh                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def city_data_master(request):
    try:
        if request.method == "GET":
            city_obj = Citymaster.objects.all().order_by('name')
            state_obj=Statemaster.objects.all().order_by('name')
            paginator = Paginator(city_obj, 100)
            page = request.GET.get('page')
            try:
                city_obj = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                city_obj = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                city_obj = paginator.page(paginator.num_pages)




            return render(request, 'admin/master_data_management/manage_country_state_city_location_master/city_data_master.html',
                          {'city_obj': city_obj,'state_obj':state_obj})
    except Exception as e:
        raise Http404

####################################################################
# Name - city_add_edit                                             #
# Owner - Nishank                                                  #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def add_edit_master_city(request, city_id=None):
    try:
        if city_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                city = Citymaster.objects.get(id=city_id)
                state_list = Statemaster.objects.filter(deletee=False)
                return render(request, 'admin/master_data_management/manage_country_state_city_location_master/add_edit_master_city.html',
                              {'city': city, 'state_list': state_list, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['city_name'].strip()
                state = request.POST['state'].strip()
                city = Citymaster.objects.get(id=city_id)
                if name and state and city:
                    city_list = Citymaster.objects.all()
                    for i in city_list:
                        if i.name.lower() == name.lower() and i.statemaster_id == int(state):
                            messages.error(request, "city name already exists for the same state name")
                            return redirect("city_data_master")
                    city.name = name
                    con = Statemaster.objects.get(id=state)
                    city.statemaster = con
                    city.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='city',
                    #                                               id=city.id, edit='Yes')
                    messages.success(request, "city Edited successfully")
                    return redirect('city_data_master')
                else:
                    messages.error(request, "Please provide city name and state ")
                    return redirect(reverse("edit_master_city", args=[city.id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                state_list = Statemaster.objects.filter(deletee=False)
                return render(request, 'admin/master_data_management/manage_country_state_city_location_master/add_edit_master_city.html',
                              {'state_list': state_list, 'admin_action': admin_action})
            elif request.method == "POST":
                name = request.POST['city_name'].strip()
                state = request.POST['state'].strip()
                if name and state:
                    city_list = Citymaster.objects.all()
                    for i in city_list:
                        if i.name.lower() == name.lower() and i.statemaster_id == int(state):
                            messages.error(request, "city name already exists for the same state ")
                            return redirect("add_master_city")
                    con = Statemaster.objects.get(id=state)
                    city = Citymaster(name=name, statemaster=con, deletee=False)
                    city.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='city',
                    #                                               id=city.id, edit=None)
                    messages.success(request, "New city added successfully")
                    return redirect('city_data_master')
                else:
                    messages.error(request, "Please provide city name and state ")
                    return redirect("add_master_city")
    except Exception as e:
        raise Http404


####################################################################
# Name - locality_data_master                                      #
# Owner - Ashutosh                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def locality_data_master(request):
    try:
        if request.method == "GET":
            results = Localitymaster.objects.all().order_by('name')
            city_obj=Citymaster.objects.filter()
            state_obj=Statemaster.objects.filter()
            paginator = Paginator(results, 100)
            page = request.GET.get('page')
            try:
                results = paginator.page(page)
            except PageNotAnInteger:
                # If page is not an integer, deliver first page.
                results = paginator.page(1)
            except EmptyPage:
                # If page is out of range (e.g. 9999), deliver last page of results.
                results = paginator.page(paginator.num_pages)
            locality_obj = results
            return render(request, 'admin/master_data_management/manage_country_state_city_location_master/locality_data_master.html',
                          {'locality_obj': locality_obj,'city_obj':city_obj,'state_obj':state_obj })
    except Exception as e:
        raise Http404

####################################################################
# Name - add_edit_master_locality                                  #
# Owner - AShutosh                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@user_passes_test(lambda u: u.is_superuser)
def add_edit_master_locality(request, locality_id=None):
    try:
        if locality_id != None:
            admin_action = 'Edit'
            if request.method == "GET":
                locality = Localitymaster.objects.get(id=locality_id)
                city_list = Citymaster.objects.filter(deletee=False)
                state_list=Statemaster.objects.filter(deletee=False)
                return render(request, 'admin/master_data_management/manage_country_state_city_location_master/add_edit_master_locality.html',
                              {'locality': locality, 'city_list': city_list, 'admin_action': admin_action, 'state_list':state_list })
            elif request.method == "POST":
                name = request.POST['locality_name'].strip()
                city = request.POST['city'].strip()
                locality = Localitymaster.objects.get(id=locality_id)
                # if name and city:
                #     locality.name = name
                #     con = Citymaster.objects.get(id=city)
                #     locality.citymaster = con
                #     try:
                #         locality.save()
                #     except Exception as e:
                #         messages.error(request, "Locality name already exists for the same city")
                #         return redirect('locality_data_master')

                if name and city:
                    locality_list = Localitymaster.objects.all()
                    for i in locality_list:
                        if i.name.lower() == name.lower() and i.citymaster_id == int(city):
                            messages.error(request, "Locality name already exists for the same city")
                            return redirect("locality_data_master")
                    con = Citymaster.objects.get(id=city)
                    locality = Localitymaster(name=name, citymaster=con)
                    locality.save()


                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='locality',
                    #                                               id=locality.id, edit='Yes')
                    messages.success(request, "locality Edited successfully")
                    return redirect('locality_data_master')
                else:
                    messages.error(request, "Please provide full details ")
                    return redirect(reverse("edit_master_locality", args=[locality.id, ]))
        else:
            admin_action = 'Add'
            if request.method == "GET":
                city_list = Citymaster.objects.filter(deletee=False)
                state_list = Statemaster.objects.filter(deletee=False)
                return render(request, 'admin/master_data_management/manage_country_state_city_location_master/add_edit_master_locality.html',
                              {'city_list': city_list, 'admin_action': admin_action,'state_list':state_list})
            elif request.method == "POST":
                name = request.POST['locality_name'].strip()
                city = request.POST['city'].strip()
                if name and city:
                    locality_list = Localitymaster.objects.all()
                    for i in locality_list:
                        if i.name.lower() == name.lower() and i.citymaster_id == int(city):
                            messages.error(request, "Locality name already exists for the same city")
                            return redirect("add_master_locality")
                    con = Citymaster.objects.get(id=city)
                    locality = Localitymaster(name=name,citymaster=con)
                    locality.save()
                    # response = master_SingleRecord_elastic_update(request, action='publish', master_type='locality',
                    #                                               id=locality.id, edit=None)
                    messages.success(request, "New locality added successfully")
                    return redirect('locality_data_master')
                else:
                    messages.error(request, "Please provide all the information ")
                    return redirect("add_master_locality")
    except Exception as e:
        raise Http404



####################################################################
# Name - state_vise_city_data                                      #
# Owner - ASHUTOSH                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def state_vise_city_data(request):
    try:
        response = {}
        if request.method == "POST":
            try:
                state_id = request.POST['state_id'].strip()
            except:
                state_id = request.POST['id'].strip()
            # try:
            #     astate_id = request.POST['astate_id'].strip()
            #     fromname = request.POST['formDATA[fromname]']
            # except:
            #     astate_id = request.POST['id'].strip()

            if state_id is not None:
                city_obj = Citymaster.objects.filter(statemaster_id=state_id, deletee=False).values('id', 'name')
                if len(city_obj):
                    response['city_list'] = list(city_obj)
                else:
                    response['Message'] = 'No City Present...!'
            else:
                response['Message'] = 'Please select State'
        data = json.dumps(response)
    except Exception as e:
        raise Http404
    return HttpResponse(data)


####################################################################
# Name - manage_master_deactivate                                  #
# Owner - Ashutosh                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def manage_master_deactivate(request, object_id=None, object_type=None):
    model = None
    if object_id and object_type:

        if object_type == '62':
            model = Countrymaster
            url_part = 'country_data'
            # response = master_SingleRecord_elastic_update(request,action='un-publish', master_type='country',id=object_id,edit=None)
        elif object_type == '63':
            model = Statemaster
            url_part = 'state_data'
            # response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='state',
            #                                               id=object_id, edit=None)
        elif object_type == '64':
            model = Citymaster
            url_part = 'city_data'
            # response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='city',
            #                                               id=object_id, edit=None)
        elif object_type == '65':
            model = Localitymaster
            url_part = 'locality_data'
            # response = master_SingleRecord_elastic_update(request, action='un-publish', master_type='locality',
            #                                               id=object_id, edit=None)
        try:

            object = model.objects.get(id=object_id)
            if object.deletee:
                messages.success(request, " Already Deactivated")
            else:
                object.deletee = True
                object.save()
                messages.success(request, " Successfully Deactivated")
            return_url = '/master/manage/' + url_part + '/'
            return redirect(return_url)
        except Exception as e:
            messages.error(request, 'Something Bad Happened')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    else:
        messages.error(request, 'Something bad happened')
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


####################################################################
# Name - manage_master_activate                                    #
# Owner - Ashutosh                                                 #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_GET
def manage_master_activate(request, object_id=None, object_type=None):
    model = None
    if object_id and object_type:
        if object_type == '62':
            model = Countrymaster
            url_part = 'country_data'
            # response = master_SingleRecord_elastic_update(request,action='publish', master_type='country', id=object_id,edit=None)

        elif object_type == '63':
            model = Statemaster
            url_part = 'state_data'
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='state',
            #                                               id=object_id, edit=None)
        elif object_type == '64':
            model = Citymaster
            url_part = 'city_data'
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='city',
            #                                               id=object_id, edit=None)
        elif object_type == '65':
            model = Localitymaster
            url_part = 'locality_data'
            # response = master_SingleRecord_elastic_update(request, action='publish', master_type='locality',
            #                                               id=object_id, edit=None)
        try:
            object = model.objects.get(id=object_id)
            if object.deletee:
                object.deletee = False
                object.save()
                messages.success(request, "Successfully Activated")
            else:
                messages.success(request, " Already Activated")
            return_url = '/master/manage/' + url_part + '/'
            return redirect(return_url)
        except Exception as e:
            messages.error(request, 'Something Bad Happened')
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    else:
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - live_organisation_listing_edit                            #
# Owner - Ashutosh Kesharvani                                      #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def live_organisation_listing_edit(request, organisation_id=None):
    try:
        back_to_url = request.META.get('HTTP_REFERER')
        if check_organisation_edit(organisation_id, request.user.id, request.user.is_superuser):
            if organisation_id:
                organisation_data = OrganisationName.objects.filter(id=organisation_id)
                #print organisation_data[0].profileImage
                valid_choice = ValidateByChoice.objects.all()
                try:
                    tab = request.GET['tab']
                except:
                    tab = '1'
                if UserManagement.objects.filter(user_id=request.user.id, is_caller=True):
                    user_data = UserManagement.objects.filter(is_reviewer=True,is_doctor_reviewer=True).values('user_id')
                    user_publisher_data = []
                elif UserManagement.objects.filter(user_id=request.user.id, is_reviewer=True):
                    user_data = UserManagement.objects.filter(is_caller=True,is_doctor_caller=True).values('user_id')
                    user_publisher_data = UserManagement.objects.filter(is_publisher=True).values('user_id')
                else:
                    user_data = []
                    user_publisher_data = []
                reviewer_user_data = User.objects.filter(id__in=user_data, is_active=True)
                publisher_user_data = User.objects.filter(id__in=user_publisher_data, is_active=True)
                user_data_complete = UserManagement.objects.all()
                department = []
                if organisation_data[0].department and organisation_data[0].department != '[]':
                    try:
                        department = map(int, organisation_data[0].department.split(","))
                    except Exception as e:
                        department = []
                facility = []
                if organisation_data[0].facility and organisation_data[0].facility != '[]':
                    try:
                        facility = map(int, organisation_data[0].facility.split(","))
                    except Exception as e:
                        facility = []

                organisation_reward_obj=organisation_Rewardrecog.objects.filter(organisation=organisation_id)
                print organisation_reward_obj
                try:
                    reg_imgage = organisation_Registrationimages.objects.filter(organisation=int(organisation_id)).values('image')
                except:
                    reg_imgage=None

                try:
                    gal_imgage = organisation_Imagegallery.objects.filter(organisation=int(organisation_id)).values('image')
                except:
                    gal_imgage=None
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404
                try:
                    organisation_id = int(organisation_id)
                except:
                    raise Http404
                schedule_obj = OrganisationName.objects.filter(id=organisation_id)
                if schedule_obj:
                    schedule_list = schedule_obj[0].schedule_data
                    # if type(schedule_list) is str:
                    if isinstance(schedule_list,str):
                        schedule_list = json.loads(schedule_list)
                    schedule_id = schedule_obj[0].id

                hostport = hostname + port
                if tab == '1':
                    if request.method == "GET":

                        for oo in organisation_reward_obj:
                            print oo.name
                            print oo.year
                        country_data = Country.objects.filter(delete=False)
                        state_master_obj = State.objects.filter(delete=False)
                        city_master_obj = City.objects.filter(delete=False,state_id=organisation_data[0].state_id)
                        locality_obj = Locality.objects.filter(delete=False,city_id=organisation_data[0].city_id)
                        facility_obj = Facility.objects.filter(delete=False).order_by('name')
                        department_obj = Department.objects.filter(delete=False).order_by('name')
                        hospital_type = Organisation_types.objects.filter(delete= False).order_by('type_name')
                        hospital_category = Organisation_categories.objects.filter(delete= False).order_by('category_name')
                        #print organisation_data[0].profileImage
                        return render(request, 'data_management/live_organisation_data/live_organisation_edit.html',
                                      {'organisation_data': organisation_data, 'country': country_data,
                                       'state': state_master_obj, 'city':city_master_obj, 'locality': locality_obj,
                                       'hospital_type': hospital_type,'hostport':hostport,
                                       'hospital_category': hospital_category,
                                       'facility_obj': facility_obj,'reg_imgage':reg_imgage,
                                       'department_obj': department_obj,'gal_imgage':gal_imgage,
                                       'department': department,'organisation_id':organisation_id,
                                       'facility': facility,'organisation_reward_obj':organisation_reward_obj,
                                       'tab': tab,'schedule_list':schedule_list,'schedule_id':schedule_id,
                                       'reviewer_user_data': reviewer_user_data, 'publisher_user_data': publisher_user_data,
                                       'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                       'back_to_url':back_to_url})
                    elif request.method == "POST":
                        xxx = request.POST.get('xxx')
                        if xxx == "basic_profile":
                            # organisation_hidden_id = request.POST.get('organisation_hidden')
                            name = request.POST.get('name').strip()
                            email = request.POST.get('email').strip()
                            pincode = request.POST.get('pincode').strip()
                            website = request.POST.get('website').strip()
                            street = request.POST.get('Address').strip()
                            phone = request.POST.get('phone').strip()

                            mobile_no = request.POST.get('mobile_no').strip()

                            department = request.POST.getlist('department')
                            tagline = request.POST.get('tagLine').strip()
                            alemail = request.POST.get('alemail')
                            did = request.POST.get('did')
                            extension= request.POST.get('extension')

                            try:
                                did = int(request.POST.get('did').strip())
                                extension = int(request.POST.get('extension').strip())
                            except:
                                did = ''
                                extension = ''
                            try:
                                city_id = int(request.POST.get('city_id').strip())
                            except:
                                city_id = ''
                            try:
                                state_id = int(request.POST.get('state_id').strip())
                            except:
                                state_id = ''
                            try:
                                country_id = int(request.POST.get('country_id').strip())
                            except:
                                country_id = ''
                            try:
                                locality_id = int(request.POST.get('locality_id'))
                            except:
                                locality_id = ''
                            category_str = request.POST.get('category').strip()
                            type = request.POST.getlist('type')
                            if type:
                                type = ','.join(type)
                            facility = request.POST.getlist('facility')
                            if facility:
                                facility = ','.join(facility)
                            if department:
                                department = ','.join(department)

                            emergency_no = request.POST.get('emergency_no').strip()
                            fax = request.POST.get('fax').strip()

                            cl_obj = OrganisationName.objects.get(pk=organisation_id)
                            #print cl_obj.name
                            if cl_obj and street and locality_id:
                                cl_obj.city_id = city_id
                                cl_obj.state_id = state_id
                                cl_obj.locality_id = locality_id
                                cl_obj.pincode = pincode
                                cl_obj.country_id = country_id
                                cl_obj.street = street
                                cl_obj.name = name
                                cl_obj.category = category_str
                                cl_obj.facility = facility
                                cl_obj.type = type
                                cl_obj.email = email
                                cl_obj.alternateEmail= alemail

                                cl_obj.department = department

                                cl_obj.phone = phone
                                cl_obj.tagline = tagline

                                cl_obj.mobile_no = mobile_no
                                cl_obj.emergency_no = emergency_no

                                cl_obj.website = website

                                cl_obj.fax = fax
                                cl_obj.did = did
                                cl_obj.extension = extension
                                u = User.objects.get(id = request.user.id)
                                cl_obj.updated_via = str(u)

                                cl_obj.save()
                                messages.success(request, "Successfully Updated")

                                return HttpResponseRedirect("/live_organisation/edit/" + str(cl_obj.id) + '/?tab=1')
                            else:
                                messages.error(request, "Please Enter required Field")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                        elif xxx == 'opd_timing':
                            schedule_obj = OrganisationName.objects.filter(id=organisation_id)
                            if len(schedule_obj) == 1:
                                add_schedule_dict = {}
                                timing_list = []
                                schedule_data = schedule_obj[0].schedule_data
                                if schedule_data == None:
                                    schedule_data = []
                                start_time = request.POST.getlist('start_time')
                                start_period = request.POST.getlist('start_period')
                                end_time = request.POST.getlist('end_time')
                                end_period = request.POST.getlist('end_period')
                                from_day = request.POST.get('from_day')
                                to_day = request.POST.get('to_day')
                                unique_id = str(uuid.uuid4())
                                for i in range(0, len(start_time)):
                                    timing_dict = {}
                                    timing_dict['start_time'] = start_time[i] + ' ' + str(start_period[i]).upper()
                                    timing_dict['end_time'] = end_time[i] + ' ' + str(end_period[i]).upper()
                                    timing_list.append(timing_dict)
                                add_schedule_dict['from_day'] = from_day
                                add_schedule_dict['to_day'] = to_day
                                add_schedule_dict['timing'] = timing_list
                                add_schedule_dict['id'] = unique_id
                                schedule_data.append(add_schedule_dict)
                                schedule_obj.update(schedule_data=schedule_data)
                            return HttpResponseRedirect('/live_organisation/edit/' + str(organisation_id) + '/')
                        elif xxx == 'reward_recog':
                            org_obj = OrganisationName.objects.get(id=organisation_id)
                            reward = request.POST.get('reward')
                            year = request.POST.get('year')
                            org_rew_obj = organisation_Rewardrecog(organisation = org_obj,name = reward,year = year)
                            cl_obj = OrganisationName.objects.get(id = int(organisation_id))
                            u = User.objects.get(id=request.user.id)
                            cl_obj.updated_via = str(u)
                            cl_obj.save()
                            org_rew_obj.save()
                            return HttpResponseRedirect('/live_organisation/edit/' + str(organisation_id) + '/')
                        elif xxx == 'registration_detail':
                            mci_num = request.POST.get('mciNo')
                            org_o = OrganisationName.objects.get(id=organisation_id)
                            org_o.registration_details = mci_num
                            cl_obj = OrganisationName.objects.get(id=int(organisation_id))
                            u = User.objects.get(id=request.user.id)
                            cl_obj.updated_via = str(u)
                            cl_obj.save()
                            org_o.save()
                            return HttpResponseRedirect('/live_organisation/edit/' + str(organisation_id) + '/')
                elif tab == '2':
                    if request.method == 'GET':

                        global hostname
                        global port
                        url_p3 = "/api/v2/clinic/get_owner_basic_profile/"
                        global authToken
                        user_obj = OrganisationName.objects.get(id=organisation_id)
                        # u_id = "59b1492aaa5656f2475e6a31"
                        u_id = user_obj.user_id
                        urlc = hostname + port + url_p3
                        import requests
                        url = urlc
                        try:
                            headers = {
                                'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                            obj={'user_id':u_id,'authToken':authToken}
                            s = json.dumps(obj)
                            r = requests.post(url,s)
                            tresp = json.dumps(r.text)
                            resp = json.loads(r.text)

                            if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                                dd = resp['data']
                                # dd = {u'isDoctor': False, u'fax': u'', u'user_id': u'59b1492aaa5656f2475e6a31', u'firstName': u'publish', u'dob': u'1996-05-28T00:00:00.000Z', u'lastName': u'demo', u'mobileNo': u'7894561230', u'profileImage': u'', u'createdAt': u'2017-09-07T13:27:06.579Z', u'id': u'59b1492aaa5656f2475e6a32', u'alternateEmail': u'', u'skypeId': u'', u'gender': u'male', u'updatedAt': u'2017-09-07T13:27:06.579Z', u'email': u'demo@gmail.com', u'phoneNo': u'', u'IDCardImage': u''}
                        except Exception as e:
                            dd = []
                        try:
                            owner_details_obj = dd
                        except:
                            owner_details_obj = None
                        hostport = hostname + port
                        if owner_details_obj:
                            #print owner_details_obj
                            if owner_details_obj['isDoctor']:
                                doc_id = owner_details_obj['doctor_id']
                                live_doc_obj = Live_Doctor.objects.get(id=int(doc_id))
                                cat = Category.objects.get(id=live_doc_obj.category)
                                return render(request,
                                              'data_management/live_organisation_data/live_organisation_edit.html',
                                              {'organisation_data': organisation_data,
                                               'department': department,
                                               'facility': facility, 'organisation_reward_obj': organisation_reward_obj,
                                               'tab': tab, 'schedule_list': schedule_list, 'schedule_id': schedule_id,
                                               'reviewer_user_data': reviewer_user_data,
                                               'publisher_user_data': publisher_user_data,
                                               'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                               'back_to_url': back_to_url, 'owner_details_obj': owner_details_obj,
                                               'live_doc_obj': live_doc_obj, 'cat': cat})
                            else:
                                return render(request,
                                              'data_management/live_organisation_data/live_organisation_edit.html',
                                              {'organisation_data': organisation_data,
                                               'department': department,
                                               'facility': facility, 'organisation_reward_obj': organisation_reward_obj,
                                               'tab': tab, 'schedule_list': schedule_list, 'schedule_id': schedule_id,
                                               'reviewer_user_data': reviewer_user_data,
                                               'publisher_user_data': publisher_user_data,
                                               'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                               'back_to_url': back_to_url, 'owner_details_obj': owner_details_obj,
                                               'hostport': hostport})
                        else:
                            return render(request, 'data_management/live_organisation_data/live_organisation_edit.html',
                                          {'organisation_data': organisation_data,
                                           'department': department,
                                           'facility': facility, 'organisation_reward_obj': organisation_reward_obj,
                                           'tab': tab, 'schedule_list': schedule_list, 'schedule_id': schedule_id,
                                           'reviewer_user_data': reviewer_user_data,
                                           'publisher_user_data': publisher_user_data,
                                           'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                           'back_to_url': back_to_url})
                    if request.method == 'POST':

                        dob = request.POST.get('dob')
                        phoneNo = request.POST.get('phone')
                        fax = request.POST.get('fax')
                        skypeId = request.POST.get('skype')
                        alternateEmail = request.POST.get('altemail')
                        user_id = request.POST.get('user_id')
                        i_id = request.POST.get('i_id')
                        dic = {'authToken': authToken,'fax':fax, 'user_id':user_id, 'dob':dob, 'id':i_id, 'alternateEmail':alternateEmail, 'skypeId':skypeId,'phoneNo':phoneNo}
                        global hostname
                        global port
                        url_p3 = "/api/v2/clinic/update_owner_basic_profile/"
                        global authToken
                        # u_id = "59b1492aaa5656f2475e6a31"
                        # u_id = user_id
                        urlc = hostname + port + url_p3
                        import requests
                        url = urlc
                        try:
                            headers = {
                                'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                            # obj = {'id': u_id, 'authToken': authToken}
                            # obj.update(dic)
                            s = json.dumps(dic)
                            r = requests.post(url, s)
                            tresp = json.dumps(r.text)
                            resp = json.loads(r.text)

                            if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                                messages.success(request, "Owner Profile Updated Successfully")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                # dd = {u'isDoctor': False, u'fax': u'', u'user_id': u'59b1492aaa5656f2475e6a31', u'firstName': u'publish', u'dob': u'1996-05-28T00:00:00.000Z', u'lastName': u'demo', u'mobileNo': u'7894561230', u'profileImage': u'', u'createdAt': u'2017-09-07T13:27:06.579Z', u'id': u'59b1492aaa5656f2475e6a32', u'alternateEmail': u'', u'skypeId': u'', u'gender': u'male', u'updatedAt': u'2017-09-07T13:27:06.579Z', u'email': u'demo@gmail.com', u'phoneNo': u'', u'IDCardImage': u''}
                        except Exception as e:
                            messages.error(request, "Something Bad Happened")
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

#************************************************* Tab 5 starts **********************************************************************************************************

                elif tab == '3':
                    if request.method == 'GET':
                        # print type(tab)
                        try:
                            attach_schedule = AttachWithDoctor.objects.filter(organisation=organisation_id).values('doctor')
                        except:
                            attach_schedule = []

                        common_schedule = Live_Doctor_Commonworkschedule.objects.filter(clinic_id = organisation_id).values('doctor_id')
                        common_schedule_id = Live_Doctor_Commonworkschedule.objects.filter(clinic_id = organisation_id,associateWithClinic = True).values('doctor_id')

                        live_doctor = Live_Doctor.objects.filter(id__in = common_schedule)
                        ii = []
                        doctor_obj = Doctor.objects.filter(id__in = attach_schedule )
                        for cc in common_schedule_id:
                            ii.append(cc['doctor_id'])
                        return render(request, 'data_management/live_organisation_data/live_organisation_edit.html',
                                      {'organisation_data': organisation_data,'ii':ii,
                                       'tab': tab,'doctor_obj':doctor_obj ,'live_doctor':live_doctor,
                                      })

#************************************************* Tab 4 starts **********************************************************************************************************
                elif tab == '4':
                    if request.method == 'GET':
                        global hostname
                        global port
                        url_p3 = "/api/v2/clinic_associate/get_clinic_associate"
                        global authToken
                        org_id = int(organisation_id)

                        urlc = hostname + port + url_p3
                        import requests
                        url = urlc
                        obj = {'organisation_id':org_id, 'authToken':authToken}
                        s = json.dumps(obj)
                        try:
                            headers = {
                                'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}

                            r = requests.post(url,s)
                            tresp = json.dumps(r.text)
                            resp = json.loads(r.text)
                            if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                                org_data = resp['data']
                                return render(request,'data_management/live_organisation_data/live_organisation_edit.html',
                                              {'organisation_data': organisation_data,'tab': tab,'org_data':org_data})
                            else:
                                messages.success(request, "something bad hppened")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))


                        except Exception as e:
                            messages.error(request, e)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

#************************************************* Tab 5 starts **********************************************************************************************************

                elif tab == '5':
                    organisation = None
                    delete = None
                    planid = None

                    try:
                        organisation = OrganisationName.objects.get(id=organisation_id)
                    except:
                        organisation = None


                    if request.method == 'GET' and organisation:

                        try:
                            delete = request.GET.get('delete')
                            planid = request.GET.get('planid')
                        except:
                            delete = None
                            planid = None
                        if delete and planid:
                            try:
                                plan_obj_full = Organisation_plan.objects.get(organisation_id=organisation_id)
                                plan_obj = plan_obj_full.package_details
                            except:
                                plan_obj = {}
                            try:
                                if  planid in list(plan_obj['plan_details'].keys()):
                                    del plan_obj['plan_details'][planid]
                                    plan_obj_full.package_details = plan_obj
                                    plan_obj_full.save()
                                    messages.success(request, 'Plan Successfully Deleted')
                                    return HttpResponseRedirect('/organisation/edit/' + str(organisation_id) + '/?tab=4')
                            except:
                                messages.success(request, 'Something Bad Happened')
                                return HttpResponseRedirect('/organisation/edit/' + str(organisation_id) + '/?tab=4')


                        plan_category_list = PlanCategory.objects.all()
                        provider_list = ServiceProvider.objects.all()
                        try:
                            plan_obj = Organisation_plan.objects.get(organisation_id=organisation_id)
                            plan = plan_obj.package_details
                            plan_list = plan['plan_details']
                        except:
                            plan_obj = None
                            plan_list =  None
                        return render(request, 'data_management/live_organisation_data/live_organisation_edit.html',
                                      {'organisation_data': organisation_data,
                                       'department': department,
                                       'facility': facility,
                                       'tab': tab,
                                       'reviewer_user_data': reviewer_user_data,
                                       'publisher_user_data': publisher_user_data,
                                       'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                       'organisation_id': organisation_id,
                                       'organisation': organisation,
                                       'provider_list': provider_list,'plan_list':plan_list,
                                       'plan_category_list':plan_category_list,'back_to_url':back_to_url})
                    elif request.method == 'POST' and organisation:

                        plan_name = request.POST['package_name']

                        provider_id = request.POST['provider_name']

                        instructions = request.POST['instructions']

                        package_description = request.POST['package_description']

                        investigation = request.POST.getlist('investigations')

                        blood_bank = request.POST.getlist('blood_tests')

                        consultation = request.POST.getlist('consultations')

                        imaging = request.POST.getlist('diabetes_evaluation')

                        try:
                            plan_price = float(request.POST['package_rates'])
                        except Exception as e:
                            messages.error(request, "It must br numaric value")
                            return HttpResponseRedirect('/live_organisation/edit/' + str(organisation_id) + '/?tab=5')


                        timings = request.POST['timings']

                        plan_validity = request.POST['validity']

                        dict_in = {}

                        if(len(investigation) > 0) and investigation[0] != '':
                            for i in range(1, (len(investigation)+1)):
                                dict_in.update({str(i): investigation[i-1]})
                        else:
                            dict_in = {}


                        dict_co = {}
                        if ((len(consultation) > 0) and consultation[0] != ''):
                            for i in range(1, (len(consultation)+1)):
                                dict_co.update({str(i): consultation[i-1]})
                        else:
                            dict_co = {}


                        dict_im = {}
                        if (len(imaging) > 0) and imaging[0] != '':
                            for i in range(1, (len(imaging)+1)):
                                dict_im.update({str(i): imaging[i-1]})
                        else:
                            dict_im = {}


                        dict_bb = {}
                        if (len(blood_bank) > 0) and blood_bank[0] != '':
                            for i in range(1, (len(blood_bank)+1)):
                                dict_bb.update({str(i): blood_bank[i-1]})
                        else:
                            dict_bb = {}


                        dict_description={}
                        dict_description.update({'investigation':dict_in,'consultation':dict_co,
                        'imaging':dict_im,'blood_bank':dict_bb, })

                        try:
                            plan_obj = Organisation_plan.objects.get(organisation_id=organisation_id)
                            try:
                                plan_list = plan_obj.package_details
                            except:
                                plan_list = {'organisation_id': organisation_id, 'plan_details': {}}
                        except:
                            plan_obj = Organisation_plan(organisation_id=organisation_id)
                            plan_list = {'organisation_id': organisation_id, 'plan_details': {}}


                        try:
                            if len(plan_list['plan_details']) > 0 :
                                no_of_plans = int(len(plan_list['plan_details'].keys()))
                                new_plan_index = str(no_of_plans + 1)
                            else:
                                new_plan_index = '1'
                        except:
                            new_plan_index = '1'
                            #plan_list['plan_details']= {}
                            plan_list = {'organisation_id': organisation_id, 'plan_details': {}}
                            #print 'type = ',type(plan_list['plan_details'])

                        cl_obj = OrganisationName.objects.get(id=int(organisation_id))
                        u = User.objects.get(id=request.user.id)
                        cl_obj.updated_via = str(u)
                        cl_obj.save()
                        if plan_name and provider_id:

                            plan_list['plan_details'].update({ new_plan_index:{'plan_name':plan_name,'provider_id':provider_id, 'instructions':instructions,
                                                               'package_description':package_description,'plan_price':plan_price,
                                                               'timings':timings,'plan_validity':plan_validity, 'description':dict_description}
                                             })
                            if plan_obj :
                                plan_obj.package_details = plan_list
                                plan_obj.save()
                            else:
                                plan_obj = Organisation_plan(organisation_id=organisation_id,package_details=plan_list)
                                plan_obj.save()

                            messages.success(request,"Plan Successfully Added")
                            return HttpResponseRedirect('/live_organisation/edit/'+str(organisation_id)+'/?tab=5' )
                        else:
                            messages.error(request, "Please provide Provider and Plan name")
                            return HttpResponseRedirect('/live_organisation/edit/' + str(organisation_id) + '/?tab=5')
#*********************************************** Tab 6 start ********************************************************************************************************************************************

                elif tab == '6':
                    try:
                        organisation = OrganisationName.objects.get(id=organisation_id)
                        u_id = organisation.user_id
                        org_branch = OrganisationName.objects.filter(user_id=u_id)
                        #print org_branch[0].activation
                    except :
                        organisation = None

                    if request.method =='GET' and organisation:
                        return render(request, 'data_management/live_organisation_data/live_organisation_edit.html',
                                      {'organisation_data': organisation_data,'tab':tab,'org_branch':org_branch,'back_to_url':back_to_url})

#******************************************** tab 7 starts********************************************************************************************************************************************************

                elif tab == '7':
                    org_object = OrganisationName.objects.get(id=organisation_id)
                    country = Country.objects.filter(delete=False)
                    state = State.objects.filter(delete=False)
                    city = City.objects.filter(delete=False)
                    locality = Locality.objects.filter(delete=False)
                    department_list = Department.objects.filter(delete=False).order_by('name')

                    try:
                        attach_obj = Attach_therapist_organisation.objects.filter(organisation_id=organisation_id)
                    except:
                        attach_obj = []
                    return render(request, 'data_management/live_organisation_data/live_organisation_edit.html',
                                  {'organisation_data': organisation_data,
                                   'department_list': department_list,
                                   'tab': tab,
                                   'reviewer_user_data': reviewer_user_data,
                                   'publisher_user_data': publisher_user_data,
                                   'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                   'country': country, 'city': city, 'state': state, 'locality': locality,
                                   'organisation_id': organisation_id,'org_object':org_object,
                                   'back_to_url': back_to_url,'attach_obj':attach_obj})
# ******************************************** tab 8 started********************************************************************************************************************************************************
                elif tab == '8':
                    org_object = OrganisationName.objects.get(id=organisation_id)
                    country = Country.objects.filter(delete=False)
                    state = State.objects.filter(delete=False)
                    city = City.objects.filter(delete=False)
                    locality = Locality.objects.filter(delete=False)
                    department_list = Department.objects.filter(delete=False).order_by('name')

                    try:
                        attach_obj2 = Attach_dietitian_organisation.objects.filter(organisation_id=organisation_id)
                    except:
                        attach_obj2 = []
                    return render(request, 'data_management/live_organisation_data/live_organisation_edit.html',
                                  {'organisation_data': organisation_data,
                                   'department_list': department_list,
                                   'tab': tab,
                                   'reviewer_user_data': reviewer_user_data,
                                   'publisher_user_data': publisher_user_data,
                                   'user_data_complete': user_data_complete, 'valid_choice': valid_choice,
                                   'country': country, 'city': city, 'state': state, 'locality': locality,
                                   'organisation_id': organisation_id, 'org_object': org_object,
                                   'back_to_url': back_to_url, 'attach_obj2': attach_obj2})
# ******************************************** tab 10 started********************************************************************************************************************************************************
                elif tab == '9':
                    if request.method == 'GET':
                        return render(request, 'data_management/live_organisation_data/live_organisation_edit.html',
                                      {'organisation_data': organisation_data,
                                       'tab': tab,
                                       })
                elif tab == '10':
                    country = Country.objects.filter(delete=False)
                    state = State.objects.filter(delete=False)
                    city = City.objects.filter(delete=False)
                    locality = Locality.objects.filter(delete=False)
                    department_list = Department.objects.filter(delete=False).order_by('name')
                    if request.method == 'GET':
                        organisation_data = OrganisationName.objects.filter(id=organisation_id)

                        fields_json = organisation_data[0].verified_fields

                        full_list = []
                        verified_list = []
                        for i in fields_json:
                            for k, v in i.items():
                                full_list.append(k)
                                if v == True:
                                    verified_list.append(k)
                        return render(request, 'data_management/live_organisation_data/live_organisation_edit.html',
                                      {
                                       'tab': tab,
                                       'reviewer_user_data': reviewer_user_data,
                                       'publisher_user_data': publisher_user_data,
                                       'user_data_complete': user_data_complete,
                                       'organisation_id': organisation_id, 'organisation_data': organisation_data,
                                       'back_to_url': back_to_url,
                                       'full_list': full_list,'verified_list': verified_list,
                                       'country': country, 'city': city, 'state': state, 'locality': locality,
                                       'department_list': department_list,
                                      })

                    elif request.method == 'POST':
                        cl_obj = OrganisationName.objects.get(id=int(organisation_id))
                        u = User.objects.get(id=request.user.id)
                        cl_obj.updated_via = str(u)
                        cl_obj.save()
                        field_names = request.POST.getlist('vfields')
                        org_object = OrganisationName.objects.filter(id=organisation_id)
                        fields_json = org_object[0].verified_fields
                        full_list = []
                        for i in fields_json:
                            for k, v in i.items():
                                full_list.append(k)
                        for i in full_list:
                            if i in field_names:
                                c = -1
                                for x in fields_json:
                                    c += 1
                                    for k, v in x.items():
                                        if k == i:
                                            fields_json[c] = {k: True}
                            else:
                                c = -1
                                for x in fields_json:
                                    c += 1
                                    for k, v in x.items():
                                        if k == i:
                                            fields_json[c] = {k: False}

                        checkj = json.dumps(fields_json)
                        org_object.update(verified_fields=fields_json)
                        messages.success(request, "Successfully Updated Hospital Field Meta Data")
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                elif tab == '11':
                    if request.method == 'GET':
                        org = OrganisationName.objects.filter(id=int(organisation_id)).values('merge_field')
                        return render(request, 'data_management/live_organisation_data/live_organisation_edit.html',
                                      {'organisation_data': organisation_data,
                                       'tab': tab,'merge_field':org[0]['merge_field']
                                       })
                else:
                    messages.error(request, "No method available")
                    is_publisher = UserManagement.objects.filter(user_id= request.user.id,is_publisher=True)
                    if len(is_publisher):
                        return HttpResponseRedirect(reverse('publisher-organisation-listing'))
                    return HttpResponseRedirect(reverse('live-organisation-listing'))
            return HttpResponseRedirect(reverse('live-organisation-listing'))
    except Exception as e:
        #print e
        raise Http404


####################################################################
# Name - update_manage_account_live_doctor                         #
# Owner - Dhrumil Shah                                             #
####################################################################
@login_required(login_url='/')
@csrf_exempt
@require_POST
def update_manage_account_live_doctor(request):
    try:
        import datetime
        record_id = request.POST.get('details_id')
        record = Live_Doctor_Manage_Account.objects.get(id=int(record_id))
        if not record.receipt:
            try:
                file_name = request.FILES['uploadReceipt'].name
            except:
                file_name = None
            if file_name != None:
                try:
                    # doc_obj = Live_Doctor.objects.get(id=int(doctor_id))
                    file = request.FILES['uploadReceipt']

                    global hostname
                    global port
                    url_p3 = "/api/v2/doctor/upload_receipt_cms/"
                    # url_p3 = "/api/v2/doctor/update_profile_picture/"
                    global authToken
                    doc_id = record_id + '/'

                    urlc = hostname + port + url_p3 + authToken + '/' + doc_id
                    import requests
                    url = urlc
                    #print settings.DOC_PROFILE
                    from django.core.files.storage import FileSystemStorage
                    filepath = settings.DOC_RECIEPT_AND_INVOICE + '/' + file_name
                    fs = FileSystemStorage()
                    # filename = fs.save(settings.DOC_REG, file)
                    filename = fs.save(filepath, file)
                    uploaded_file_url = fs.url(filename)
                    # print uploaded_file_url

                    try:
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                        with open(filepath, "rb") as image_file:
                            # print ">>>>>>>>>   ", type(image_file), "   <<<<<<<<<<<<<<<<<"
                            files = {'uploadFile': image_file}

                            # cookie = {cookiename: token.value}
                            # r = requests.post(url,headers=headers ,files=files)
                            r = requests.post(url, files=files)
                            tresp = json.dumps(r.text)
                            resp = json.loads(r.text)


                            if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                                pass
                            else:
                                messages.error(request, "Unable to upload Receipt")
                    except Exception as e:
                        messages.error(request, e)
                except Exception as e:
                    # print e
                    messages.error(request, e)

        if not record.invoice:
            try:
                file_name = request.FILES['uploadInvoice'].name
            except:
                file_name = None
            if file_name != None:
                try:
                    # doc_obj = Live_Doctor.objects.get(id=int(doctor_id))
                    file = request.FILES['uploadInvoice']

                    global hostname
                    global port
                    # url_p3 = "/api/v2/doctor/upload_receipt_cms/"
                    url_p3 = "/api/v2/doctor/upload_invoice_cms"
                    global authToken
                    doc_id = record_id + '/'

                    urlc = hostname + port + url_p3 +'/'+ authToken + '/' + doc_id
                    import requests
                    url = urlc
                    #print settings.DOC_PROFILE
                    from django.core.files.storage import FileSystemStorage
                    filepath = settings.DOC_RECIEPT_AND_INVOICE + '/' + file_name
                    fs = FileSystemStorage()
                    # filename = fs.save(settings.DOC_REG, file)
                    filename = fs.save(filepath, file)
                    uploaded_file_url = fs.url(filename)
                    # print uploaded_file_url

                    try:
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                        with open(filepath, "rb") as image_file:
                            # print ">>>>>>>>>   ", type(image_file), "   <<<<<<<<<<<<<<<<<"
                            files = {'uploadFile': image_file}

                            # cookie = {cookiename: token.value}
                            # r = requests.post(url,headers=headers ,files=files)
                            r = requests.post(url, files=files)
                            tresp = json.dumps(r.text)
                            resp = json.loads(r.text)
                            if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                                pass
                            else:
                                messages.error(request, "Unable to upload Receipt")
                    except Exception as e:
                        messages.error(request, e)
                except Exception as e:
                    # print e
                    messages.error(request, e)
        record = None
        record2 =Live_Doctor_Manage_Account.objects.get(id=int(record_id))
        plan = request.POST.get('uplan')
        record2.plan_name = plan
        shrt_desc = request.POST.get('udesc')
        record2.short_description = shrt_desc
        start_date = request.POST.get('uinvoiceStartDate')
        stdt = None
        if start_date:
            stdt = datetime.datetime.strptime(start_date, "%d/%m/%Y")
            record2.startdate = stdt
        stop_date = request.POST.get('uinvoiceEndDate')
        eddt = None
        if stop_date:
            eddt = datetime.datetime.strptime(stop_date, "%d/%m/%Y")
            record2.enddate = eddt
        amt = request.POST.get('uamount')
        record2.amount = amt
        mode = request.POST.get('upaymentMode')
        if mode:
            record2.payment_mode = mode
        remarks = request.POST.get('uremarks')
        record2.remarks = remarks
        record2.save()
        messages.success(request, "Record Updated successfully")
    except Exception as e:
        messages.error(request, 'Something Bad Happened')
    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - delete_receipt_live_doctor                                #
# Owner - Dhrumil Shah                                             #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_receipt(request, doctor_id=None, record_id=None):
    try:
        if doctor_id and record_id:
            manage_acc=Live_Doctor_Manage_Account.objects.get(id=record_id)
            receipt=manage_acc.receipt
            global hostname
            global port
            global authToken
            url_p3 = "/api/v2/doctor/delete_receipt_cms/"
            urlc = hostname + port + url_p3 + authToken + '/' + record_id
            print urlc
            import requests
            url = urlc
            try:
                r = requests.post(url, json={'id': int(record_id), 'hit_from': 'CMS', 'doctor_id':int(doctor_id),'authToken':authToken}, headers={'hit_from': 'CMS'})
                resp = json.loads(r.text)
                print resp

                if r.status_code == 200 or r.status_code == '200':
                    if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                        messages.success(request, "Receipt Deleted Successfully...!!!")
                        return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=8")

                    else:
                        messages.error(request, resp['statusMessage'])
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                else:
                    messages.success(request, "Receipt Not Deleted...!!!")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as e:
                messages.error(request, "Exception")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404


####################################################################
# Name - delete_invoice_live_doctor                                #
# Owner - Dhrumil Shah                                             #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_invoice(request, doctor_id=None, record_id=None):
    try:
        if doctor_id and record_id:
            manage_acc=Live_Doctor_Manage_Account.objects.get(id=record_id)
            invoice=manage_acc.invoice
            global hostname
            global port
            global authToken
            url_p3 = "/api/v2/doctor/delete_invoice_cms/"
            urlc = hostname + port + url_p3 + authToken + '/' + record_id
            print urlc
            import requests
            url = urlc
            try:
                r = requests.post(url, json={'id': int(record_id), 'hit_from': 'CMS','doctor_id':int(doctor_id),'authToken':authToken}, headers={'hit_from': 'CMS'})
                resp = json.loads(r.text)
                print resp

                if r.status_code == 200 or r.status_code == '200':
                    if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                       messages.success(request, "Invoice Deleted Successfully...!!!")
                       return redirect(reverse('live_doctor_listing_edit', args=[doctor_id]) + "?tab=8")

                    else:
                        messages.error(request, resp['statusMessage'])
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                else:
                    messages.success(request, "Invoice Not Deleted...!!!")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as e:
                messages.error(request, "Exception")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        raise Http404

####################################################################
# Name - upload_profile_pic_doc                                    #
# BY - Dhrumil Shah                                                #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def upload_profile_pic_doc(request, doctor_id=None):
    try:
        if doctor_id:
            try:
                doc_obj = Doctor.objects.get(id=int(doctor_id))
                if len(request.FILES) == 1:
                    file = request.FILES['ProfileImage']
                    file_name = request.FILES['ProfileImage'].name
                    global hostname
                    global port
                    url_p3 = "/api/v2/doctor/update_doctor_profile_picture/"
                    global authToken
                    doc_id = str(doctor_id) + '/'

                    urlc = hostname + port + url_p3 + authToken + '/' + doc_id
                    import requests
                    url = urlc
                    from django.core.files.storage import FileSystemStorage
                    filepath = settings.DOC_PROFILE + '/' + file_name
                    fs = FileSystemStorage()
                    filename = fs.save(filepath, file)
                    uploaded_file_url = fs.url(filename)
                    print uploaded_file_url

                    try:
                        headers = {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0',
                        'hit_from':'CMS'}
                        with open(filepath, "rb") as image_file:
                            # print ">>>>>>>>>   ", type(image_file), "   <<<<<<<<<<<<<<<<<"
                            files = {'uploadFile': image_file}
                            r = requests.post(url,  data={'hit_from':'CMS'}, files=files)
                            if r.status_code == 200 or r.status_code == '200':
                                from datetime import datetime
                                now = datetime.now()
                                messages.success(request, "Successfully Uploaded Profile Image")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                messages.error(request, "Profile Image Upload Failed")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    except Exception as e:
                        messages.error(request, e)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            except Exception as e:
                messages.error(request, e)
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
        else:
            messages.error(request, "Doctor ID Not Provided")
            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - delete_profile_pic_doc                                    #
# BY - Dhrumil Shah                                                #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def delete_profile_pic_doc(request, doctor_id=None):
    try:
        if doctor_id:
            doc_id = Doctor.objects.get(id=doctor_id)
            photo = doc_id.profile_photo
            global hostname
            global port
            global authToken
            url_p3 = "/api/v2/doctor/delete_doctor_profile_picture"
            urlc = hostname + port + url_p3
            print urlc
            import requests
            url = urlc
            try:
                r = requests.post(url, json={'id': int(doctor_id), 'hit_from': 'CMS', 'authToken': authToken},
                                  headers={'hit_from': 'CMS'})
                resp = json.loads(r.text)
                print resp

                if r.status_code == 200 or r.status_code == '200':
                    if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                        messages.success(request, "Profile Photo Deleted Successfully...!!!")
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                    else:
                        messages.error(request, resp['statusMessage'])
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                else:
                    messages.error(request, "Photo Not Deleted...!!!")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

            except Exception as e:
                messages.error(request, e)
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - gallery_images_doctor                                    #
# BY - Dhrumil Shah                                                #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def gallery_images_doctor(request, doctor_id=None):
    try:
        if request.method == 'GET' and doctor_id:
            doctor_data = Doctor.objects.filter(id=doctor_id)
            doctor_image_list = Doctor_Imagegallery.objects.filter(doctor_id=doctor_id)
            global hostname
            global port
            hostport = hostname + port

            return render(request, 'data_management/doctor_data/gallery_images.html',
                          {'tab': 'galleryimages', 'tab_listing': 'doctor_listing', 'doctor_data': doctor_data,
                           'doctor_image_list':doctor_image_list, 'hostport':hostport})
        elif request.method == 'POST' and doctor_id:
            if doctor_id:
                try:
                    doc_obj = Doctor.objects.filter(id=int(doctor_id))
                    if len(request.FILES) == 1:
                        file = request.FILES['galleryrImage']
                        file_name = request.FILES['galleryrImage'].name
                        global hostname
                        global port
                        url_p3 = "/api/v2/doctor/add_doctor_image_gallery/"
                        global authToken
                        doc_id = str(doctor_id) + '/'
                        urlc = hostname + port + url_p3 + authToken + '/' + doc_id
                        import requests
                        url = urlc
                        from django.core.files.storage import FileSystemStorage
                        filepath = settings.DOC_GALLERY + '/' + file_name
                        fs = FileSystemStorage()
                        filename = fs.save(filepath, file)
                        uploaded_file_url = fs.url(filename)
                        print uploaded_file_url
                        try:
                            headers = {
                                'User-Agent': 'Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0'}
                            with open(filepath, "rb") as image_file:
                                # print ">>>>>>>>>   ", type(image_file), "   <<<<<<<<<<<<<<<<<"
                                files = {'uploadFile': image_file}
                                r = requests.post(url, data={'hit_from': 'CMS'}, files=files)
                                if r.status_code == 200 or r.status_code == '200':
                                    messages.success(request, "Successfully Uploaded Gallery Image")
                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                                else:
                                    messages.error(request, "Gallery Image Upload Failed")
                                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                        except Exception as e:
                            messages.error(request, e)
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

                except Exception as e:
                    messages.error(request, e)
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            else:
                messages.error(request, "Doctor ID Not Provided")
                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

####################################################################
# Name - gallery_images_doctor_changes                             #
# BY - Dhrumil Shah                                                #
####################################################################
@login_required(login_url='/')
@csrf_exempt
def doc_gallery_images_changes(request, doctor_id=None):
    try:
        if doctor_id:
            image_obj_id_list = request.POST.getlist('Images')
            image_obj_id_list = [int(img) for img in image_obj_id_list]
            if 'delete'in request.POST:
                if image_obj_id_list != []:
                    for i in image_obj_id_list:
                        image_obj = Doctor_Imagegallery.objects.get(id=i)
                        if image_obj.publish == True:
                            messages.error(request, "Selected image is in Publish List, Can't be deleted")
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    image_list = {
                        'hit_from': 'CMS',
                        "id": [],
                        "doctor_id": int(doctor_id),
                        "authToken": "",
                    }
                    image_list['id'] = image_obj_id_list
                    image_list['authToken'] = authToken
                    global hostname
                    global port
                    url_p3 = "/api/v2/doctor/delete_doctor_image_gallery"
                    urlc = hostname + port + url_p3
                    print urlc
                    import requests
                    url = urlc
                    try:
                        r = requests.post(url, json=image_list, headers={'hit_from': 'CMS'})
                        resp = json.loads(r.text)
                        print resp
                        if r.status_code == 200 or r.status_code == '200':
                            if resp['statusCode'] == 200 or resp['statusCode'] == '200':
                                messages.success(request, "Successfully Deleted Gallery Images")
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                            else:
                                messages.error(request, resp['statusMessage'])
                                return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                        else:
                            messages.success(request, "Image(s) Not Deleted")
                            return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                    except Exception as e:
                        messages.success(request, e)
                        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                else:
                    messages.success(request, "Image ID(s) Not Provided")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            elif 'publish' in request.POST:
                if image_obj_id_list != []:
                    for i in image_obj_id_list:
                        image_obj = Doctor_Imagegallery.objects.get(id=i)
                        image_obj.publish = True
                        image_obj.save()
                    messages.success(request, "Image Added to Publish List")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                else:
                    messages.error(request, "Select Image to add to Publish List")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
            elif 'unpublish' in request.POST:
                if image_obj_id_list != []:
                    for i in image_obj_id_list:
                        image_obj = Doctor_Imagegallery.objects.get(id=i)
                        image_obj.publish = False
                        image_obj.save()
                    messages.success(request, "Image Removed from Publish List")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
                else:
                    messages.error(request, "Select Image to remove from Publish List")
                    return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
    except Exception as e:
        messages.error(request, e)
        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))
